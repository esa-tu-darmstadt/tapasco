//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
//
// On Wed Apr 10 09:13:32 CEST 2024
//
//
// Ports:
// Name                         I/O  size props
// tm_dsc_sts_rdy                 O     1 reg
// c2h_byp_in_radr                O    64
// c2h_byp_in_wadr                O    64
// c2h_byp_in_len                 O    16
// c2h_byp_in_sdi                 O     1
// c2h_byp_in_mrkr_req            O     1
// c2h_byp_in_qid                 O    11
// c2h_byp_in_error               O     1
// c2h_byp_in_func                O     8
// c2h_byp_in_cidx                O    16
// c2h_byp_in_port_id             O     3
// c2h_byp_in_vld                 O     1 reg
// h2c_byp_in_radr                O    64
// h2c_byp_in_wadr                O    64
// h2c_byp_in_len                 O    16
// h2c_byp_in_sdi                 O     1
// h2c_byp_in_mrkr_req            O     1
// h2c_byp_in_qid                 O    11
// h2c_byp_in_error               O     1
// h2c_byp_in_func                O     8
// h2c_byp_in_cidx                O    16
// h2c_byp_in_port_id             O     3
// h2c_byp_in_vld                 O     1 reg
// c2h_byp_out_rdy                O     1 const
// h2c_byp_out_rdy                O     1 const
// c2h_byp_st_addr                O    64
// c2h_byp_st_error               O     1
// c2h_byp_st_qid                 O    11
// c2h_byp_st_func                O     8
// c2h_byp_st_port_id             O     3
// c2h_byp_st_vld                 O     1 reg
// h2c_byp_st_addr                O    64
// h2c_byp_st_len                 O    16
// h2c_byp_st_no_dma              O     1
// h2c_byp_st_error               O     1
// h2c_byp_st_sdi                 O     1
// h2c_byp_st_mrkr_req            O     1
// h2c_byp_st_sop                 O     1
// h2c_byp_st_eop                 O     1
// h2c_byp_st_qid                 O    11
// h2c_byp_st_func                O     8
// h2c_byp_st_cidx                O    16
// h2c_byp_st_port_id             O     3
// h2c_byp_st_vld                 O     1 reg
// st_rx_msg_tready               O     1 const
// s_axis_h2c_tready              O     1 reg
// m_axis_c2h_tvalid              O     1 reg
// m_axis_c2h_tdata               O   512
// m_axis_c2h_tlast               O     1
// m_axis_c2h_dpar                O    64
// m_axis_c2h_mty                 O     6
// m_axis_c2h_ctrl_marker         O     1
// m_axis_c2h_dis_cmpt            O     1
// m_axis_c2h_imm_data            O     1
// m_axis_c2h_user_trig           O     1
// m_axis_c2h_len                 O    16
// m_axis_c2h_qid                 O    11
// m_axis_c2h_port_id             O     3
// m_axis_c2h_cmpt_tvalid         O     1 reg
// m_axis_c2h_cmpt_tdata          O   128
// m_axis_c2h_cmpt_tlast          O     1
// m_axis_c2h_cmpt_dpar           O     4
// m_axis_c2h_cmpt_size           O     2
// S_AXIS_USER_tready             O     1
// M_AXIS_USER_tvalid             O     1
// M_AXIS_USER_tdata              O   512
// M_AXIS_USER_tlast              O     1
// M_AXIS_USER_tkeep              O    64
// M_AXIS_USER_tDest              O     4
// S_AXI_CTRL_arready             O     1
// S_AXI_CTRL_rvalid              O     1
// S_AXI_CTRL_rdata               O    64
// S_AXI_CTRL_rresp               O     2
// S_AXI_CTRL_awready             O     1
// S_AXI_CTRL_wready              O     1
// S_AXI_CTRL_bvalid              O     1
// S_AXI_CTRL_bresp               O     2
// dma_resetn                     O     1
// aclk                           I     1 clock
// resetn                         I     1 reset
// tm_dsc_sts_vld                 I     1
// tm_dsc_sts_byp                 I     1 reg
// tm_dsc_sts_dir                 I     1 reg
// tm_dsc_sts_mm                  I     1 reg
// tm_dsc_sts_qid                 I    11 reg
// tm_dsc_sts_avl                 I    16 reg
// tm_dsc_sts_qinv                I     1 reg
// tm_dsc_sts_qen                 I     1 reg
// tm_dsc_sts_irq_arm             I     1 reg
// tm_dsc_sts_error               I     1 reg
// tm_dsc_sts_port_id             I     3 reg
// c2h_byp_in_rdy                 I     1
// h2c_byp_in_rdy                 I     1
// c2h_byp_out_vld                I     1 unused
// c2h_byp_out_dsc                I   256 unused
// c2h_byp_out_st_mm              I     1 unused
// c2h_byp_out_dsc_sz             I     2 unused
// c2h_byp_out_qid                I    11 unused
// c2h_byp_out_error              I     1 unused
// c2h_byp_out_func               I     8 unused
// c2h_byp_out_cidx               I    16 unused
// c2h_byp_out_port_id            I     3 unused
// c2h_byp_out_mrkr_rsp           I     1 unused
// h2c_byp_out_vld                I     1 unused
// h2c_byp_out_dsc                I   256 unused
// h2c_byp_out_st_mm              I     1 unused
// h2c_byp_out_dsc_sz             I     2 unused
// h2c_byp_out_qid                I    11 unused
// h2c_byp_out_error              I     1 unused
// h2c_byp_out_func               I     8 unused
// h2c_byp_out_cidx               I    16 unused
// h2c_byp_out_port_id            I     3 unused
// h2c_byp_out_mrkr_rsp           I     1 unused
// c2h_byp_st_rdy                 I     1
// h2c_byp_st_rdy                 I     1
// st_rx_msg_tvalid               I     1 unused
// st_rx_msg_tdata                I    32 unused
// st_rx_msg_tlast                I     1 unused
// s_axis_h2c_tvalid              I     1
// s_axis_h2c_tdata               I   512 reg
// s_axis_h2c_tlast               I     1 reg
// s_axis_h2c_dpar                I    64 reg
// s_axis_h2c_err                 I     1 reg
// s_axis_h2c_zero_byte           I     1 reg
// s_axis_h2c_mty                 I     6 reg
// s_axis_h2c_qid                 I    11 reg
// s_axis_h2c_mdata               I    32 reg
// s_axis_h2c_port_id             I     3 reg
// m_axis_c2h_tready              I     1
// m_axis_c2h_cmpt_tready         I     1
// S_AXIS_USER_tvalid             I     1
// S_AXIS_USER_tdata              I   512 reg
// S_AXIS_USER_tkeep              I    64 reg
// S_AXIS_USER_tDest              I     4 reg
// S_AXIS_USER_tlast              I     1 reg
// M_AXIS_USER_tready             I     1
// S_AXI_CTRL_arvalid             I     1
// S_AXI_CTRL_araddr              I    12 reg
// S_AXI_CTRL_arprot              I     3 reg
// S_AXI_CTRL_rready              I     1
// S_AXI_CTRL_awvalid             I     1
// S_AXI_CTRL_awaddr              I    12
// S_AXI_CTRL_awprot              I     3
// S_AXI_CTRL_wvalid              I     1
// S_AXI_CTRL_wdata               I    64
// S_AXI_CTRL_wstrb               I     8
// S_AXI_CTRL_bready              I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkQDMADescriptorGenerator(aclk,
				 resetn,

				 tm_dsc_sts_vld,
				 tm_dsc_sts_byp,
				 tm_dsc_sts_dir,
				 tm_dsc_sts_mm,
				 tm_dsc_sts_qid,
				 tm_dsc_sts_avl,
				 tm_dsc_sts_qinv,
				 tm_dsc_sts_qen,
				 tm_dsc_sts_irq_arm,
				 tm_dsc_sts_error,
				 tm_dsc_sts_port_id,

				 tm_dsc_sts_rdy,

				 c2h_byp_in_radr,

				 c2h_byp_in_wadr,

				 c2h_byp_in_len,

				 c2h_byp_in_sdi,

				 c2h_byp_in_mrkr_req,

				 c2h_byp_in_qid,

				 c2h_byp_in_error,

				 c2h_byp_in_func,

				 c2h_byp_in_cidx,

				 c2h_byp_in_port_id,

				 c2h_byp_in_vld,

				 c2h_byp_in_rdy,

				 h2c_byp_in_radr,

				 h2c_byp_in_wadr,

				 h2c_byp_in_len,

				 h2c_byp_in_sdi,

				 h2c_byp_in_mrkr_req,

				 h2c_byp_in_qid,

				 h2c_byp_in_error,

				 h2c_byp_in_func,

				 h2c_byp_in_cidx,

				 h2c_byp_in_port_id,

				 h2c_byp_in_vld,

				 h2c_byp_in_rdy,

				 c2h_byp_out_vld,
				 c2h_byp_out_dsc,
				 c2h_byp_out_st_mm,
				 c2h_byp_out_dsc_sz,
				 c2h_byp_out_qid,
				 c2h_byp_out_error,
				 c2h_byp_out_func,
				 c2h_byp_out_cidx,
				 c2h_byp_out_port_id,
				 c2h_byp_out_mrkr_rsp,

				 c2h_byp_out_rdy,

				 h2c_byp_out_vld,
				 h2c_byp_out_dsc,
				 h2c_byp_out_st_mm,
				 h2c_byp_out_dsc_sz,
				 h2c_byp_out_qid,
				 h2c_byp_out_error,
				 h2c_byp_out_func,
				 h2c_byp_out_cidx,
				 h2c_byp_out_port_id,
				 h2c_byp_out_mrkr_rsp,

				 h2c_byp_out_rdy,

				 c2h_byp_st_addr,

				 c2h_byp_st_error,

				 c2h_byp_st_qid,

				 c2h_byp_st_func,

				 c2h_byp_st_port_id,

				 c2h_byp_st_vld,

				 c2h_byp_st_rdy,

				 h2c_byp_st_addr,

				 h2c_byp_st_len,

				 h2c_byp_st_no_dma,

				 h2c_byp_st_error,

				 h2c_byp_st_sdi,

				 h2c_byp_st_mrkr_req,

				 h2c_byp_st_sop,

				 h2c_byp_st_eop,

				 h2c_byp_st_qid,

				 h2c_byp_st_func,

				 h2c_byp_st_cidx,

				 h2c_byp_st_port_id,

				 h2c_byp_st_vld,

				 h2c_byp_st_rdy,

				 st_rx_msg_tvalid,
				 st_rx_msg_tdata,
				 st_rx_msg_tlast,

				 st_rx_msg_tready,

				 s_axis_h2c_tvalid,
				 s_axis_h2c_tdata,
				 s_axis_h2c_tlast,
				 s_axis_h2c_dpar,
				 s_axis_h2c_err,
				 s_axis_h2c_zero_byte,
				 s_axis_h2c_mty,
				 s_axis_h2c_qid,
				 s_axis_h2c_mdata,
				 s_axis_h2c_port_id,

				 s_axis_h2c_tready,

				 m_axis_c2h_tvalid,

				 m_axis_c2h_tdata,

				 m_axis_c2h_tlast,

				 m_axis_c2h_dpar,

				 m_axis_c2h_mty,

				 m_axis_c2h_ctrl_marker,

				 m_axis_c2h_dis_cmpt,

				 m_axis_c2h_imm_data,

				 m_axis_c2h_user_trig,

				 m_axis_c2h_len,

				 m_axis_c2h_qid,

				 m_axis_c2h_port_id,

				 m_axis_c2h_tready,

				 m_axis_c2h_cmpt_tvalid,

				 m_axis_c2h_cmpt_tdata,

				 m_axis_c2h_cmpt_tlast,

				 m_axis_c2h_cmpt_dpar,

				 m_axis_c2h_cmpt_size,

				 m_axis_c2h_cmpt_tready,

				 S_AXIS_USER_tready,

				 S_AXIS_USER_tvalid,

				 S_AXIS_USER_tdata,

				 S_AXIS_USER_tkeep,

				 S_AXIS_USER_tDest,

				 S_AXIS_USER_tlast,

				 M_AXIS_USER_tvalid,

				 M_AXIS_USER_tready,

				 M_AXIS_USER_tdata,

				 M_AXIS_USER_tlast,

				 M_AXIS_USER_tkeep,

				 M_AXIS_USER_tDest,

				 S_AXI_CTRL_arready,

				 S_AXI_CTRL_arvalid,

				 S_AXI_CTRL_araddr,

				 S_AXI_CTRL_arprot,

				 S_AXI_CTRL_rvalid,

				 S_AXI_CTRL_rready,

				 S_AXI_CTRL_rdata,

				 S_AXI_CTRL_rresp,

				 S_AXI_CTRL_awready,

				 S_AXI_CTRL_awvalid,

				 S_AXI_CTRL_awaddr,

				 S_AXI_CTRL_awprot,

				 S_AXI_CTRL_wready,

				 S_AXI_CTRL_wvalid,

				 S_AXI_CTRL_wdata,

				 S_AXI_CTRL_wstrb,

				 S_AXI_CTRL_bvalid,

				 S_AXI_CTRL_bready,

				 S_AXI_CTRL_bresp,

				 dma_resetn);
  input  aclk;
  input  resetn;

  // action method creditIfc_acceptTMCredit
  input  tm_dsc_sts_vld;
  input  tm_dsc_sts_byp;
  input  tm_dsc_sts_dir;
  input  tm_dsc_sts_mm;
  input  [10 : 0] tm_dsc_sts_qid;
  input  [15 : 0] tm_dsc_sts_avl;
  input  tm_dsc_sts_qinv;
  input  tm_dsc_sts_qen;
  input  tm_dsc_sts_irq_arm;
  input  tm_dsc_sts_error;
  input  [2 : 0] tm_dsc_sts_port_id;

  // value method creditIfc_rdy
  output tm_dsc_sts_rdy;

  // value method c2hDescriptorTransmitIfc_radr
  output [63 : 0] c2h_byp_in_radr;

  // value method c2hDescriptorTransmitIfc_wadr
  output [63 : 0] c2h_byp_in_wadr;

  // value method c2hDescriptorTransmitIfc_len
  output [15 : 0] c2h_byp_in_len;

  // value method c2hDescriptorTransmitIfc_sdi
  output c2h_byp_in_sdi;

  // value method c2hDescriptorTransmitIfc_mrkr_req
  output c2h_byp_in_mrkr_req;

  // value method c2hDescriptorTransmitIfc_qid
  output [10 : 0] c2h_byp_in_qid;

  // value method c2hDescriptorTransmitIfc_error
  output c2h_byp_in_error;

  // value method c2hDescriptorTransmitIfc_func
  output [7 : 0] c2h_byp_in_func;

  // value method c2hDescriptorTransmitIfc_cidx
  output [15 : 0] c2h_byp_in_cidx;

  // value method c2hDescriptorTransmitIfc_port_id
  output [2 : 0] c2h_byp_in_port_id;

  // value method c2hDescriptorTransmitIfc_vld
  output c2h_byp_in_vld;

  // action method c2hDescriptorTransmitIfc_acceptRdy
  input  c2h_byp_in_rdy;

  // value method h2cDescriptorTransmitIfc_radr
  output [63 : 0] h2c_byp_in_radr;

  // value method h2cDescriptorTransmitIfc_wadr
  output [63 : 0] h2c_byp_in_wadr;

  // value method h2cDescriptorTransmitIfc_len
  output [15 : 0] h2c_byp_in_len;

  // value method h2cDescriptorTransmitIfc_sdi
  output h2c_byp_in_sdi;

  // value method h2cDescriptorTransmitIfc_mrkr_req
  output h2c_byp_in_mrkr_req;

  // value method h2cDescriptorTransmitIfc_qid
  output [10 : 0] h2c_byp_in_qid;

  // value method h2cDescriptorTransmitIfc_error
  output h2c_byp_in_error;

  // value method h2cDescriptorTransmitIfc_func
  output [7 : 0] h2c_byp_in_func;

  // value method h2cDescriptorTransmitIfc_cidx
  output [15 : 0] h2c_byp_in_cidx;

  // value method h2cDescriptorTransmitIfc_port_id
  output [2 : 0] h2c_byp_in_port_id;

  // value method h2cDescriptorTransmitIfc_vld
  output h2c_byp_in_vld;

  // action method h2cDescriptorTransmitIfc_acceptRdy
  input  h2c_byp_in_rdy;

  // action method c2hDescriptorReceiveIfc_acceptDescriptor
  input  c2h_byp_out_vld;
  input  [255 : 0] c2h_byp_out_dsc;
  input  c2h_byp_out_st_mm;
  input  [1 : 0] c2h_byp_out_dsc_sz;
  input  [10 : 0] c2h_byp_out_qid;
  input  c2h_byp_out_error;
  input  [7 : 0] c2h_byp_out_func;
  input  [15 : 0] c2h_byp_out_cidx;
  input  [2 : 0] c2h_byp_out_port_id;
  input  c2h_byp_out_mrkr_rsp;

  // value method c2hDescriptorReceiveIfc_rdy
  output c2h_byp_out_rdy;

  // action method h2cDescriptorReceiveIfc_acceptDescriptor
  input  h2c_byp_out_vld;
  input  [255 : 0] h2c_byp_out_dsc;
  input  h2c_byp_out_st_mm;
  input  [1 : 0] h2c_byp_out_dsc_sz;
  input  [10 : 0] h2c_byp_out_qid;
  input  h2c_byp_out_error;
  input  [7 : 0] h2c_byp_out_func;
  input  [15 : 0] h2c_byp_out_cidx;
  input  [2 : 0] h2c_byp_out_port_id;
  input  h2c_byp_out_mrkr_rsp;

  // value method h2cDescriptorReceiveIfc_rdy
  output h2c_byp_out_rdy;

  // value method c2hStreamDescriptorTransmitIfc_addr
  output [63 : 0] c2h_byp_st_addr;

  // value method c2hStreamDescriptorTransmitIfc_error
  output c2h_byp_st_error;

  // value method c2hStreamDescriptorTransmitIfc_qid
  output [10 : 0] c2h_byp_st_qid;

  // value method c2hStreamDescriptorTransmitIfc_func
  output [7 : 0] c2h_byp_st_func;

  // value method c2hStreamDescriptorTransmitIfc_port_id
  output [2 : 0] c2h_byp_st_port_id;

  // value method c2hStreamDescriptorTransmitIfc_vld
  output c2h_byp_st_vld;

  // action method c2hStreamDescriptorTransmitIfc_acceptRdy
  input  c2h_byp_st_rdy;

  // value method h2cStreamDescriptorTransmitIfc_addr
  output [63 : 0] h2c_byp_st_addr;

  // value method h2cStreamDescriptorTransmitIfc_len
  output [15 : 0] h2c_byp_st_len;

  // value method h2cStreamDescriptorTransmitIfc_no_dma
  output h2c_byp_st_no_dma;

  // value method h2cStreamDescriptorTransmitIfc_error
  output h2c_byp_st_error;

  // value method h2cStreamDescriptorTransmitIfc_sdi
  output h2c_byp_st_sdi;

  // value method h2cStreamDescriptorTransmitIfc_mrkr_req
  output h2c_byp_st_mrkr_req;

  // value method h2cStreamDescriptorTransmitIfc_sop
  output h2c_byp_st_sop;

  // value method h2cStreamDescriptorTransmitIfc_eop
  output h2c_byp_st_eop;

  // value method h2cStreamDescriptorTransmitIfc_qid
  output [10 : 0] h2c_byp_st_qid;

  // value method h2cStreamDescriptorTransmitIfc_func
  output [7 : 0] h2c_byp_st_func;

  // value method h2cStreamDescriptorTransmitIfc_cidx
  output [15 : 0] h2c_byp_st_cidx;

  // value method h2cStreamDescriptorTransmitIfc_port_id
  output [2 : 0] h2c_byp_st_port_id;

  // value method h2cStreamDescriptorTransmitIfc_vld
  output h2c_byp_st_vld;

  // action method h2cStreamDescriptorTransmitIfc_acceptRdy
  input  h2c_byp_st_rdy;

  // action method vdmRecieveIfc_accept
  input  st_rx_msg_tvalid;
  input  [31 : 0] st_rx_msg_tdata;
  input  st_rx_msg_tlast;

  // value method vdmRecieveIfc_tready
  output st_rx_msg_tready;

  // action method h2cStreamRxIfc_accept
  input  s_axis_h2c_tvalid;
  input  [511 : 0] s_axis_h2c_tdata;
  input  s_axis_h2c_tlast;
  input  [63 : 0] s_axis_h2c_dpar;
  input  s_axis_h2c_err;
  input  s_axis_h2c_zero_byte;
  input  [5 : 0] s_axis_h2c_mty;
  input  [10 : 0] s_axis_h2c_qid;
  input  [31 : 0] s_axis_h2c_mdata;
  input  [2 : 0] s_axis_h2c_port_id;

  // value method h2cStreamRxIfc_tready
  output s_axis_h2c_tready;

  // value method c2hStreamTxIfc_tvalid
  output m_axis_c2h_tvalid;

  // value method c2hStreamTxIfc_tdata
  output [511 : 0] m_axis_c2h_tdata;

  // value method c2hStreamTxIfc_tlast
  output m_axis_c2h_tlast;

  // value method c2hStreamTxIfc_dpar
  output [63 : 0] m_axis_c2h_dpar;

  // value method c2hStreamTxIfc_mty
  output [5 : 0] m_axis_c2h_mty;

  // value method c2hStreamTxIfc_ctrl_marker
  output m_axis_c2h_ctrl_marker;

  // value method c2hStreamTxIfc_dis_cmpt
  output m_axis_c2h_dis_cmpt;

  // value method c2hStreamTxIfc_imm_data
  output m_axis_c2h_imm_data;

  // value method c2hStreamTxIfc_user_trig
  output m_axis_c2h_user_trig;

  // value method c2hStreamTxIfc_len
  output [15 : 0] m_axis_c2h_len;

  // value method c2hStreamTxIfc_qid
  output [10 : 0] m_axis_c2h_qid;

  // value method c2hStreamTxIfc_port_id
  output [2 : 0] m_axis_c2h_port_id;

  // action method c2hStreamTxIfc_accept
  input  m_axis_c2h_tready;

  // value method c2hStreamCmptTxIfc_tvalid
  output m_axis_c2h_cmpt_tvalid;

  // value method c2hStreamCmptTxIfc_tdata
  output [127 : 0] m_axis_c2h_cmpt_tdata;

  // value method c2hStreamCmptTxIfc_tlast
  output m_axis_c2h_cmpt_tlast;

  // value method c2hStreamCmptTxIfc_dpar
  output [3 : 0] m_axis_c2h_cmpt_dpar;

  // value method c2hStreamCmptTxIfc_size
  output [1 : 0] m_axis_c2h_cmpt_size;

  // action method c2hStreamCmptTxIfc_accept
  input  m_axis_c2h_cmpt_tready;

  // value method axi_st_rd_tready
  output S_AXIS_USER_tready;

  // action method axi_st_rd_ptvalid
  input  S_AXIS_USER_tvalid;

  // action method axi_st_rd_ptdata
  input  [511 : 0] S_AXIS_USER_tdata;

  // action method axi_st_rd_ptuser

  // action method axi_st_rd_ptkeep
  input  [63 : 0] S_AXIS_USER_tkeep;

  // action method axi_st_rd_ptDest
  input  [3 : 0] S_AXIS_USER_tDest;

  // action method axi_st_rd_ptlast
  input  S_AXIS_USER_tlast;

  // value method axi_st_wr_tvalid
  output M_AXIS_USER_tvalid;

  // action method axi_st_wr_ptready
  input  M_AXIS_USER_tready;

  // value method axi_st_wr_tdata
  output [511 : 0] M_AXIS_USER_tdata;

  // value method axi_st_wr_tlast
  output M_AXIS_USER_tlast;

  // value method axi_st_wr_tuser

  // value method axi_st_wr_tkeep
  output [63 : 0] M_AXIS_USER_tkeep;

  // value method axi_st_wr_tDest
  output [3 : 0] M_AXIS_USER_tDest;

  // value method axi_rd_fab_arready
  output S_AXI_CTRL_arready;

  // action method axi_rd_fab_parvalid
  input  S_AXI_CTRL_arvalid;

  // action method axi_rd_fab_paraddr
  input  [11 : 0] S_AXI_CTRL_araddr;

  // action method axi_rd_fab_parprot
  input  [2 : 0] S_AXI_CTRL_arprot;

  // value method axi_rd_fab_rvalid
  output S_AXI_CTRL_rvalid;

  // action method axi_rd_fab_prready
  input  S_AXI_CTRL_rready;

  // value method axi_rd_fab_rdata
  output [63 : 0] S_AXI_CTRL_rdata;

  // value method axi_rd_fab_rresp
  output [1 : 0] S_AXI_CTRL_rresp;

  // value method axi_wr_fab_awready
  output S_AXI_CTRL_awready;

  // action method axi_wr_fab_pawvalid
  input  S_AXI_CTRL_awvalid;

  // action method axi_wr_fab_pawaddr
  input  [11 : 0] S_AXI_CTRL_awaddr;

  // action method axi_wr_fab_pawprot
  input  [2 : 0] S_AXI_CTRL_awprot;

  // value method axi_wr_fab_wready
  output S_AXI_CTRL_wready;

  // action method axi_wr_fab_pwvalid
  input  S_AXI_CTRL_wvalid;

  // action method axi_wr_fab_pwdata
  input  [63 : 0] S_AXI_CTRL_wdata;

  // action method axi_wr_fab_pwstrb
  input  [7 : 0] S_AXI_CTRL_wstrb;

  // value method axi_wr_fab_bvalid
  output S_AXI_CTRL_bvalid;

  // action method axi_wr_fab_pbready
  input  S_AXI_CTRL_bready;

  // value method axi_wr_fab_bresp
  output [1 : 0] S_AXI_CTRL_bresp;

  // value method dma_resetn
  output dma_resetn;

  // signals for module outputs
  wire [511 : 0] M_AXIS_USER_tdata, m_axis_c2h_tdata;
  wire [127 : 0] m_axis_c2h_cmpt_tdata;
  wire [63 : 0] M_AXIS_USER_tkeep,
		S_AXI_CTRL_rdata,
		c2h_byp_in_radr,
		c2h_byp_in_wadr,
		c2h_byp_st_addr,
		h2c_byp_in_radr,
		h2c_byp_in_wadr,
		h2c_byp_st_addr,
		m_axis_c2h_dpar;
  wire [15 : 0] c2h_byp_in_cidx,
		c2h_byp_in_len,
		h2c_byp_in_cidx,
		h2c_byp_in_len,
		h2c_byp_st_cidx,
		h2c_byp_st_len,
		m_axis_c2h_len;
  wire [10 : 0] c2h_byp_in_qid,
		c2h_byp_st_qid,
		h2c_byp_in_qid,
		h2c_byp_st_qid,
		m_axis_c2h_qid;
  wire [7 : 0] c2h_byp_in_func,
	       c2h_byp_st_func,
	       h2c_byp_in_func,
	       h2c_byp_st_func;
  wire [5 : 0] m_axis_c2h_mty;
  wire [3 : 0] M_AXIS_USER_tDest, m_axis_c2h_cmpt_dpar;
  wire [2 : 0] c2h_byp_in_port_id,
	       c2h_byp_st_port_id,
	       h2c_byp_in_port_id,
	       h2c_byp_st_port_id,
	       m_axis_c2h_port_id;
  wire [1 : 0] S_AXI_CTRL_bresp, S_AXI_CTRL_rresp, m_axis_c2h_cmpt_size;
  wire M_AXIS_USER_tlast,
       M_AXIS_USER_tvalid,
       S_AXIS_USER_tready,
       S_AXI_CTRL_arready,
       S_AXI_CTRL_awready,
       S_AXI_CTRL_bvalid,
       S_AXI_CTRL_rvalid,
       S_AXI_CTRL_wready,
       c2h_byp_in_error,
       c2h_byp_in_mrkr_req,
       c2h_byp_in_sdi,
       c2h_byp_in_vld,
       c2h_byp_out_rdy,
       c2h_byp_st_error,
       c2h_byp_st_vld,
       dma_resetn,
       h2c_byp_in_error,
       h2c_byp_in_mrkr_req,
       h2c_byp_in_sdi,
       h2c_byp_in_vld,
       h2c_byp_out_rdy,
       h2c_byp_st_eop,
       h2c_byp_st_error,
       h2c_byp_st_mrkr_req,
       h2c_byp_st_no_dma,
       h2c_byp_st_sdi,
       h2c_byp_st_sop,
       h2c_byp_st_vld,
       m_axis_c2h_cmpt_tlast,
       m_axis_c2h_cmpt_tvalid,
       m_axis_c2h_ctrl_marker,
       m_axis_c2h_dis_cmpt,
       m_axis_c2h_imm_data,
       m_axis_c2h_tlast,
       m_axis_c2h_tvalid,
       m_axis_c2h_user_trig,
       s_axis_h2c_tready,
       st_rx_msg_tready,
       tm_dsc_sts_rdy;

  // inlined wires
  wire [630 : 0] h2cRx_pkgWire$wget;
  wire [72 : 0] axiCtrlSlave_writeSlave_dataIn_rv$port0__write_1,
		axiCtrlSlave_writeSlave_dataIn_rv$port1__read,
		axiCtrlSlave_writeSlave_dataIn_rv$port2__read;
  wire [36 : 0] creditReceiver_creditWire$wget;
  wire [15 : 0] axiCtrlSlave_writeSlave_addrIn_rv$port0__write_1,
		axiCtrlSlave_writeSlave_addrIn_rv$port1__read,
		axiCtrlSlave_writeSlave_addrIn_rv$port2__read;
  wire activateDmaResetWire$whas,
       axiCtrlSlave_readIsHandled$whas,
       axiCtrlSlave_writeIsHandled$whas,
       axiCtrlSlave_writeSlave_addrIn_rv$EN_port0__write,
       axiCtrlSlave_writeSlave_addrIn_rv$EN_port1__write,
       axiCtrlSlave_writeSlave_dataIn_rv$EN_port0__write,
       axiCtrlSlave_writeSlave_dataIn_rv$EN_port1__write;

  // register axiCtrlSlave_readBusy
  reg axiCtrlSlave_readBusy;
  wire axiCtrlSlave_readBusy$D_IN, axiCtrlSlave_readBusy$EN;

  // register axiCtrlSlave_readSlave_isRst_isInReset
  reg axiCtrlSlave_readSlave_isRst_isInReset;
  wire axiCtrlSlave_readSlave_isRst_isInReset$D_IN,
       axiCtrlSlave_readSlave_isRst_isInReset$EN;

  // register axiCtrlSlave_writeBusy
  reg axiCtrlSlave_writeBusy;
  wire axiCtrlSlave_writeBusy$D_IN, axiCtrlSlave_writeBusy$EN;

  // register axiCtrlSlave_writeSlave_addrIn_rv
  reg [15 : 0] axiCtrlSlave_writeSlave_addrIn_rv;
  wire [15 : 0] axiCtrlSlave_writeSlave_addrIn_rv$D_IN;
  wire axiCtrlSlave_writeSlave_addrIn_rv$EN;

  // register axiCtrlSlave_writeSlave_dataIn_rv
  reg [72 : 0] axiCtrlSlave_writeSlave_dataIn_rv;
  wire [72 : 0] axiCtrlSlave_writeSlave_dataIn_rv$D_IN;
  wire axiCtrlSlave_writeSlave_dataIn_rv$EN;

  // register axiCtrlSlave_writeSlave_isRst_isInReset
  reg axiCtrlSlave_writeSlave_isRst_isInReset;
  wire axiCtrlSlave_writeSlave_isRst_isInReset$D_IN,
       axiCtrlSlave_writeSlave_isRst_isInReset$EN;

  // register axisRd_isRst_isInReset
  reg axisRd_isRst_isInReset;
  wire axisRd_isRst_isInReset$D_IN, axisRd_isRst_isInReset$EN;

  // register axisWr_isRst_isInReset
  reg axisWr_isRst_isInReset;
  wire axisWr_isRst_isInReset$D_IN, axisWr_isRst_isInReset$EN;

  // register c2hBurstCount
  reg [9 : 0] c2hBurstCount;
  wire [9 : 0] c2hBurstCount$D_IN;
  wire c2hBurstCount$EN;

  // register c2hCurrReadAddr
  reg [63 : 0] c2hCurrReadAddr;
  wire [63 : 0] c2hCurrReadAddr$D_IN;
  wire c2hCurrReadAddr$EN;

  // register c2hCurrWriteAddr
  reg [63 : 0] c2hCurrWriteAddr;
  wire [63 : 0] c2hCurrWriteAddr$D_IN;
  wire c2hCurrWriteAddr$EN;

  // register c2hIrqArm
  reg c2hIrqArm;
  wire c2hIrqArm$D_IN, c2hIrqArm$EN;

  // register c2hOutstandingReg
  reg [31 : 0] c2hOutstandingReg;
  wire [31 : 0] c2hOutstandingReg$D_IN;
  wire c2hOutstandingReg$EN;

  // register c2hQueueEnable
  reg c2hQueueEnable;
  wire c2hQueueEnable$D_IN, c2hQueueEnable$EN;

  // register c2hStreamCurrReadAddr
  reg [63 : 0] c2hStreamCurrReadAddr;
  wire [63 : 0] c2hStreamCurrReadAddr$D_IN;
  wire c2hStreamCurrReadAddr$EN;

  // register c2hStreamOutstandingReg
  reg [31 : 0] c2hStreamOutstandingReg;
  wire [31 : 0] c2hStreamOutstandingReg$D_IN;
  wire c2hStreamOutstandingReg$EN;

  // register c2hStreamQueueEnable
  reg c2hStreamQueueEnable;
  wire c2hStreamQueueEnable$D_IN, c2hStreamQueueEnable$EN;

  // register dmaResetActive
  reg dmaResetActive;
  wire dmaResetActive$D_IN, dmaResetActive$EN;

  // register fpgaAddrReg
  reg [63 : 0] fpgaAddrReg;
  wire [63 : 0] fpgaAddrReg$D_IN;
  wire fpgaAddrReg$EN;

  // register h2cCurrReadAddr
  reg [63 : 0] h2cCurrReadAddr;
  wire [63 : 0] h2cCurrReadAddr$D_IN;
  wire h2cCurrReadAddr$EN;

  // register h2cCurrWriteAddr
  reg [63 : 0] h2cCurrWriteAddr;
  wire [63 : 0] h2cCurrWriteAddr$D_IN;
  wire h2cCurrWriteAddr$EN;

  // register h2cIrqArm
  reg h2cIrqArm;
  wire h2cIrqArm$D_IN, h2cIrqArm$EN;

  // register h2cOutstandingReg
  reg [31 : 0] h2cOutstandingReg;
  wire [31 : 0] h2cOutstandingReg$D_IN;
  wire h2cOutstandingReg$EN;

  // register h2cQueueEnable
  reg h2cQueueEnable;
  wire h2cQueueEnable$D_IN, h2cQueueEnable$EN;

  // register h2cStreamCurrReadAddr
  reg [63 : 0] h2cStreamCurrReadAddr;
  wire [63 : 0] h2cStreamCurrReadAddr$D_IN;
  wire h2cStreamCurrReadAddr$EN;

  // register h2cStreamIrqArm
  reg h2cStreamIrqArm;
  wire h2cStreamIrqArm$D_IN, h2cStreamIrqArm$EN;

  // register h2cStreamOutstandingReg
  reg [31 : 0] h2cStreamOutstandingReg;
  wire [31 : 0] h2cStreamOutstandingReg$D_IN;
  wire h2cStreamOutstandingReg$EN;

  // register h2cStreamQueueEnable
  reg h2cStreamQueueEnable;
  wire h2cStreamQueueEnable$D_IN, h2cStreamQueueEnable$EN;

  // register hostAddrReg
  reg [63 : 0] hostAddrReg;
  wire [63 : 0] hostAddrReg$D_IN;
  wire hostAddrReg$EN;

  // register newTransfer
  reg newTransfer;
  wire newTransfer$D_IN, newTransfer$EN;

  // register resetCount
  reg [7 : 0] resetCount;
  wire [7 : 0] resetCount$D_IN;
  wire resetCount$EN;

  // register transferLenReg
  reg [63 : 0] transferLenReg;
  wire [63 : 0] transferLenReg$D_IN;
  wire transferLenReg$EN;

  // ports of submodule axiCtrlSlave_readSlave_in
  wire [14 : 0] axiCtrlSlave_readSlave_in$D_IN,
		axiCtrlSlave_readSlave_in$D_OUT;
  wire axiCtrlSlave_readSlave_in$CLR,
       axiCtrlSlave_readSlave_in$DEQ,
       axiCtrlSlave_readSlave_in$EMPTY_N,
       axiCtrlSlave_readSlave_in$ENQ,
       axiCtrlSlave_readSlave_in$FULL_N;

  // ports of submodule axiCtrlSlave_readSlave_out
  reg [65 : 0] axiCtrlSlave_readSlave_out$D_IN;
  wire [65 : 0] axiCtrlSlave_readSlave_out$D_OUT;
  wire axiCtrlSlave_readSlave_out$CLR,
       axiCtrlSlave_readSlave_out$DEQ,
       axiCtrlSlave_readSlave_out$EMPTY_N,
       axiCtrlSlave_readSlave_out$ENQ,
       axiCtrlSlave_readSlave_out$FULL_N;

  // ports of submodule axiCtrlSlave_writeSlave_in
  wire [86 : 0] axiCtrlSlave_writeSlave_in$D_IN,
		axiCtrlSlave_writeSlave_in$D_OUT;
  wire axiCtrlSlave_writeSlave_in$CLR,
       axiCtrlSlave_writeSlave_in$DEQ,
       axiCtrlSlave_writeSlave_in$EMPTY_N,
       axiCtrlSlave_writeSlave_in$ENQ,
       axiCtrlSlave_writeSlave_in$FULL_N;

  // ports of submodule axiCtrlSlave_writeSlave_out
  wire [1 : 0] axiCtrlSlave_writeSlave_out$D_IN,
	       axiCtrlSlave_writeSlave_out$D_OUT;
  wire axiCtrlSlave_writeSlave_out$CLR,
       axiCtrlSlave_writeSlave_out$DEQ,
       axiCtrlSlave_writeSlave_out$EMPTY_N,
       axiCtrlSlave_writeSlave_out$ENQ,
       axiCtrlSlave_writeSlave_out$FULL_N;

  // ports of submodule axisRd_in
  wire [580 : 0] axisRd_in$D_IN;
  wire axisRd_in$CLR, axisRd_in$DEQ, axisRd_in$ENQ;

  // ports of submodule axisRd_in_1
  wire [580 : 0] axisRd_in_1$D_IN, axisRd_in_1$D_OUT;
  wire axisRd_in_1$CLR,
       axisRd_in_1$DEQ,
       axisRd_in_1$EMPTY_N,
       axisRd_in_1$ENQ,
       axisRd_in_1$FULL_N;

  // ports of submodule axisWr_out
  wire [580 : 0] axisWr_out$D_IN;
  wire axisWr_out$CLR, axisWr_out$DEQ, axisWr_out$ENQ;

  // ports of submodule axisWr_out_1
  wire [580 : 0] axisWr_out_1$D_IN, axisWr_out_1$D_OUT;
  wire axisWr_out_1$CLR,
       axisWr_out_1$DEQ,
       axisWr_out_1$EMPTY_N,
       axisWr_out_1$ENQ,
       axisWr_out_1$FULL_N;

  // ports of submodule c2hBurstFifo
  wire [10 : 0] c2hBurstFifo$D_IN, c2hBurstFifo$D_OUT;
  wire c2hBurstFifo$CLR,
       c2hBurstFifo$DEQ,
       c2hBurstFifo$EMPTY_N,
       c2hBurstFifo$ENQ,
       c2hBurstFifo$FULL_N;

  // ports of submodule c2hCmdFifo
  wire [159 : 0] c2hCmdFifo$D_IN, c2hCmdFifo$D_OUT;
  wire c2hCmdFifo$CLR,
       c2hCmdFifo$DEQ,
       c2hCmdFifo$EMPTY_N,
       c2hCmdFifo$ENQ,
       c2hCmdFifo$FULL_N;

  // ports of submodule c2hCmptTx_pkgFifo
  wire [134 : 0] c2hCmptTx_pkgFifo$D_IN, c2hCmptTx_pkgFifo$D_OUT;
  wire c2hCmptTx_pkgFifo$CLR,
       c2hCmptTx_pkgFifo$DEQ,
       c2hCmptTx_pkgFifo$EMPTY_N,
       c2hCmptTx_pkgFifo$ENQ,
       c2hCmptTx_pkgFifo$FULL_N;

  // ports of submodule c2hDescriptorTransmitter_descriptorFifo
  wire [184 : 0] c2hDescriptorTransmitter_descriptorFifo$D_IN,
		 c2hDescriptorTransmitter_descriptorFifo$D_OUT;
  wire c2hDescriptorTransmitter_descriptorFifo$CLR,
       c2hDescriptorTransmitter_descriptorFifo$DEQ,
       c2hDescriptorTransmitter_descriptorFifo$EMPTY_N,
       c2hDescriptorTransmitter_descriptorFifo$ENQ,
       c2hDescriptorTransmitter_descriptorFifo$FULL_N;

  // ports of submodule c2hStreamCmdFifo
  wire [95 : 0] c2hStreamCmdFifo$D_IN, c2hStreamCmdFifo$D_OUT;
  wire c2hStreamCmdFifo$CLR,
       c2hStreamCmdFifo$DEQ,
       c2hStreamCmdFifo$EMPTY_N,
       c2hStreamCmdFifo$ENQ,
       c2hStreamCmdFifo$FULL_N;

  // ports of submodule c2hStreamDescriptorTransmitter_descriptorFifo
  wire [86 : 0] c2hStreamDescriptorTransmitter_descriptorFifo$D_IN,
		c2hStreamDescriptorTransmitter_descriptorFifo$D_OUT;
  wire c2hStreamDescriptorTransmitter_descriptorFifo$CLR,
       c2hStreamDescriptorTransmitter_descriptorFifo$DEQ,
       c2hStreamDescriptorTransmitter_descriptorFifo$EMPTY_N,
       c2hStreamDescriptorTransmitter_descriptorFifo$ENQ,
       c2hStreamDescriptorTransmitter_descriptorFifo$FULL_N;

  // ports of submodule c2hTx_pkgFifo
  wire [616 : 0] c2hTx_pkgFifo$D_IN, c2hTx_pkgFifo$D_OUT;
  wire c2hTx_pkgFifo$CLR,
       c2hTx_pkgFifo$DEQ,
       c2hTx_pkgFifo$EMPTY_N,
       c2hTx_pkgFifo$ENQ,
       c2hTx_pkgFifo$FULL_N;

  // ports of submodule creditReceiver_creditFifo
  wire [36 : 0] creditReceiver_creditFifo$D_IN,
		creditReceiver_creditFifo$D_OUT;
  wire creditReceiver_creditFifo$CLR,
       creditReceiver_creditFifo$DEQ,
       creditReceiver_creditFifo$EMPTY_N,
       creditReceiver_creditFifo$ENQ,
       creditReceiver_creditFifo$FULL_N;

  // ports of submodule h2cCmdFifo
  wire [159 : 0] h2cCmdFifo$D_IN, h2cCmdFifo$D_OUT;
  wire h2cCmdFifo$CLR,
       h2cCmdFifo$DEQ,
       h2cCmdFifo$EMPTY_N,
       h2cCmdFifo$ENQ,
       h2cCmdFifo$FULL_N;

  // ports of submodule h2cDescriptorTransmitter_descriptorFifo
  wire [184 : 0] h2cDescriptorTransmitter_descriptorFifo$D_IN,
		 h2cDescriptorTransmitter_descriptorFifo$D_OUT;
  wire h2cDescriptorTransmitter_descriptorFifo$CLR,
       h2cDescriptorTransmitter_descriptorFifo$DEQ,
       h2cDescriptorTransmitter_descriptorFifo$EMPTY_N,
       h2cDescriptorTransmitter_descriptorFifo$ENQ,
       h2cDescriptorTransmitter_descriptorFifo$FULL_N;

  // ports of submodule h2cRx_pkgFifo
  wire [630 : 0] h2cRx_pkgFifo$D_IN, h2cRx_pkgFifo$D_OUT;
  wire h2cRx_pkgFifo$CLR,
       h2cRx_pkgFifo$DEQ,
       h2cRx_pkgFifo$EMPTY_N,
       h2cRx_pkgFifo$ENQ,
       h2cRx_pkgFifo$FULL_N;

  // ports of submodule h2cStreamCmdFifo
  wire [95 : 0] h2cStreamCmdFifo$D_IN, h2cStreamCmdFifo$D_OUT;
  wire h2cStreamCmdFifo$CLR,
       h2cStreamCmdFifo$DEQ,
       h2cStreamCmdFifo$EMPTY_N,
       h2cStreamCmdFifo$ENQ,
       h2cStreamCmdFifo$FULL_N;

  // ports of submodule h2cStreamDescriptorTransmitter_descriptorFifo
  wire [123 : 0] h2cStreamDescriptorTransmitter_descriptorFifo$D_IN,
		 h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT;
  wire h2cStreamDescriptorTransmitter_descriptorFifo$CLR,
       h2cStreamDescriptorTransmitter_descriptorFifo$DEQ,
       h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N,
       h2cStreamDescriptorTransmitter_descriptorFifo$ENQ,
       h2cStreamDescriptorTransmitter_descriptorFifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_axiCtrlSlave_1_axiWriteFallback,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4,
       WILL_FIRE_RL_axiCtrlSlave_axiReadFallback,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5,
       WILL_FIRE_RL_dequeueC2HCmd,
       WILL_FIRE_RL_dequeueC2HStreamCmd,
       WILL_FIRE_RL_dequeueH2CCmd,
       WILL_FIRE_RL_dequeueH2CStreamCmd,
       WILL_FIRE_RL_forwardC2HStreamPacket,
       WILL_FIRE_RL_generateC2HDescriptor,
       WILL_FIRE_RL_generateC2HStreamDescriptor,
       WILL_FIRE_RL_generateH2CDescriptor,
       WILL_FIRE_RL_generateH2CStreamDescriptor,
       WILL_FIRE_RL_startReset;

  // inputs to muxes for submodule ports
  wire [65 : 0] MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_1,
		MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_2,
		MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_3,
		MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_4;
  wire [63 : 0] MUX_c2hCurrReadAddr$write_1__VAL_1,
		MUX_c2hCurrWriteAddr$write_1__VAL_1,
		MUX_c2hStreamCurrReadAddr$write_1__VAL_2,
		MUX_h2cCurrReadAddr$write_1__VAL_1,
		MUX_h2cCurrWriteAddr$write_1__VAL_1,
		MUX_h2cStreamCurrReadAddr$write_1__VAL_1;
  wire [31 : 0] MUX_c2hOutstandingReg$write_1__VAL_1,
		MUX_c2hStreamOutstandingReg$write_1__VAL_2,
		MUX_h2cOutstandingReg$write_1__VAL_1,
		MUX_h2cStreamOutstandingReg$write_1__VAL_1;
  wire [7 : 0] MUX_resetCount$write_1__VAL_1;
  wire MUX_axiCtrlSlave_readSlave_out$enq_1__SEL_5,
       MUX_c2hCurrReadAddr$write_1__SEL_1,
       MUX_c2hIrqArm$write_1__SEL_1,
       MUX_dmaResetActive$write_1__SEL_1,
       MUX_h2cCurrReadAddr$write_1__SEL_1,
       MUX_h2cIrqArm$write_1__SEL_1,
       MUX_h2cStreamCurrReadAddr$write_1__SEL_1,
       MUX_h2cStreamIrqArm$write_1__SEL_1,
       MUX_resetCount$write_1__SEL_1;

  // remaining internal signals
  wire [63 : 0] out_dpar__h23395, v__h13722, y__h21773, y__h22302;
  wire [31 : 0] y__h21719, y__h22268, y__h22761, y__h23112;
  wire [15 : 0] out_len__h23400,
		transferLen__h21486,
		transferLen__h22056,
		transferLen__h22615,
		transferLen__h22999;
  wire [9 : 0] burstLen___1__h22691, burst_beats__h22638, x__h51235;
  wire c2hBurstCount_21_EQ_c2hBurstFifo_first__22_BIT_ETC___d525,
       x__h28509,
       x__h28609,
       x__h28613,
       x__h28617,
       x__h28621,
       x__h28625,
       x__h28629,
       x__h28883,
       x__h28966,
       x__h28970,
       x__h28974,
       x__h28978,
       x__h28982,
       x__h28986,
       x__h29238,
       x__h29321,
       x__h29325,
       x__h29329,
       x__h29333,
       x__h29337,
       x__h29341,
       x__h29593,
       x__h29676,
       x__h29680,
       x__h29684,
       x__h29688,
       x__h29692,
       x__h29696,
       x__h29948,
       x__h30031,
       x__h30035,
       x__h30039,
       x__h30043,
       x__h30047,
       x__h30051,
       x__h30303,
       x__h30386,
       x__h30390,
       x__h30394,
       x__h30398,
       x__h30402,
       x__h30406,
       x__h30658,
       x__h30741,
       x__h30745,
       x__h30749,
       x__h30753,
       x__h30757,
       x__h30761,
       x__h31013,
       x__h31096,
       x__h31100,
       x__h31104,
       x__h31108,
       x__h31112,
       x__h31116,
       x__h31368,
       x__h31451,
       x__h31455,
       x__h31459,
       x__h31463,
       x__h31467,
       x__h31471,
       x__h31723,
       x__h31806,
       x__h31810,
       x__h31814,
       x__h31818,
       x__h31822,
       x__h31826,
       x__h32078,
       x__h32161,
       x__h32165,
       x__h32169,
       x__h32173,
       x__h32177,
       x__h32181,
       x__h32433,
       x__h32516,
       x__h32520,
       x__h32524,
       x__h32528,
       x__h32532,
       x__h32536,
       x__h32788,
       x__h32871,
       x__h32875,
       x__h32879,
       x__h32883,
       x__h32887,
       x__h32891,
       x__h33143,
       x__h33226,
       x__h33230,
       x__h33234,
       x__h33238,
       x__h33242,
       x__h33246,
       x__h33498,
       x__h33581,
       x__h33585,
       x__h33589,
       x__h33593,
       x__h33597,
       x__h33601,
       x__h33853,
       x__h33936,
       x__h33940,
       x__h33944,
       x__h33948,
       x__h33952,
       x__h33956,
       x__h34208,
       x__h34291,
       x__h34295,
       x__h34299,
       x__h34303,
       x__h34307,
       x__h34311,
       x__h34563,
       x__h34646,
       x__h34650,
       x__h34654,
       x__h34658,
       x__h34662,
       x__h34666,
       x__h34918,
       x__h35001,
       x__h35005,
       x__h35009,
       x__h35013,
       x__h35017,
       x__h35021,
       x__h35273,
       x__h35356,
       x__h35360,
       x__h35364,
       x__h35368,
       x__h35372,
       x__h35376,
       x__h35628,
       x__h35711,
       x__h35715,
       x__h35719,
       x__h35723,
       x__h35727,
       x__h35731,
       x__h35983,
       x__h36066,
       x__h36070,
       x__h36074,
       x__h36078,
       x__h36082,
       x__h36086,
       x__h36338,
       x__h36421,
       x__h36425,
       x__h36429,
       x__h36433,
       x__h36437,
       x__h36441,
       x__h36693,
       x__h36776,
       x__h36780,
       x__h36784,
       x__h36788,
       x__h36792,
       x__h36796,
       x__h37048,
       x__h37131,
       x__h37135,
       x__h37139,
       x__h37143,
       x__h37147,
       x__h37151,
       x__h37403,
       x__h37486,
       x__h37490,
       x__h37494,
       x__h37498,
       x__h37502,
       x__h37506,
       x__h37758,
       x__h37841,
       x__h37845,
       x__h37849,
       x__h37853,
       x__h37857,
       x__h37861,
       x__h38113,
       x__h38196,
       x__h38200,
       x__h38204,
       x__h38208,
       x__h38212,
       x__h38216,
       x__h38468,
       x__h38551,
       x__h38555,
       x__h38559,
       x__h38563,
       x__h38567,
       x__h38571,
       x__h38823,
       x__h38906,
       x__h38910,
       x__h38914,
       x__h38918,
       x__h38922,
       x__h38926,
       x__h39178,
       x__h39261,
       x__h39265,
       x__h39269,
       x__h39273,
       x__h39277,
       x__h39281,
       x__h39533,
       x__h39616,
       x__h39620,
       x__h39624,
       x__h39628,
       x__h39632,
       x__h39636,
       x__h39888,
       x__h39971,
       x__h39975,
       x__h39979,
       x__h39983,
       x__h39987,
       x__h39991,
       x__h40243,
       x__h40326,
       x__h40330,
       x__h40334,
       x__h40338,
       x__h40342,
       x__h40346,
       x__h40598,
       x__h40681,
       x__h40685,
       x__h40689,
       x__h40693,
       x__h40697,
       x__h40701,
       x__h40953,
       x__h41036,
       x__h41040,
       x__h41044,
       x__h41048,
       x__h41052,
       x__h41056,
       x__h41308,
       x__h41391,
       x__h41395,
       x__h41399,
       x__h41403,
       x__h41407,
       x__h41411,
       x__h41663,
       x__h41746,
       x__h41750,
       x__h41754,
       x__h41758,
       x__h41762,
       x__h41766,
       x__h42018,
       x__h42101,
       x__h42105,
       x__h42109,
       x__h42113,
       x__h42117,
       x__h42121,
       x__h42373,
       x__h42456,
       x__h42460,
       x__h42464,
       x__h42468,
       x__h42472,
       x__h42476,
       x__h42728,
       x__h42811,
       x__h42815,
       x__h42819,
       x__h42823,
       x__h42827,
       x__h42831,
       x__h43083,
       x__h43166,
       x__h43170,
       x__h43174,
       x__h43178,
       x__h43182,
       x__h43186,
       x__h43438,
       x__h43521,
       x__h43525,
       x__h43529,
       x__h43533,
       x__h43537,
       x__h43541,
       x__h43793,
       x__h43876,
       x__h43880,
       x__h43884,
       x__h43888,
       x__h43892,
       x__h43896,
       x__h44148,
       x__h44231,
       x__h44235,
       x__h44239,
       x__h44243,
       x__h44247,
       x__h44251,
       x__h44503,
       x__h44586,
       x__h44590,
       x__h44594,
       x__h44598,
       x__h44602,
       x__h44606,
       x__h44858,
       x__h44941,
       x__h44945,
       x__h44949,
       x__h44953,
       x__h44957,
       x__h44961,
       x__h45213,
       x__h45296,
       x__h45300,
       x__h45304,
       x__h45308,
       x__h45312,
       x__h45316,
       x__h45568,
       x__h45651,
       x__h45655,
       x__h45659,
       x__h45663,
       x__h45667,
       x__h45671,
       x__h45923,
       x__h46006,
       x__h46010,
       x__h46014,
       x__h46018,
       x__h46022,
       x__h46026,
       x__h46278,
       x__h46361,
       x__h46365,
       x__h46369,
       x__h46373,
       x__h46377,
       x__h46381,
       x__h46633,
       x__h46716,
       x__h46720,
       x__h46724,
       x__h46728,
       x__h46732,
       x__h46736,
       x__h46988,
       x__h47071,
       x__h47075,
       x__h47079,
       x__h47083,
       x__h47087,
       x__h47091,
       x__h47343,
       x__h47426,
       x__h47430,
       x__h47434,
       x__h47438,
       x__h47442,
       x__h47446,
       x__h47698,
       x__h47781,
       x__h47785,
       x__h47789,
       x__h47793,
       x__h47797,
       x__h47801,
       x__h48053,
       x__h48136,
       x__h48140,
       x__h48144,
       x__h48148,
       x__h48152,
       x__h48156,
       x__h48408,
       x__h48491,
       x__h48495,
       x__h48499,
       x__h48503,
       x__h48507,
       x__h48511,
       x__h48763,
       x__h48846,
       x__h48850,
       x__h48854,
       x__h48858,
       x__h48862,
       x__h48866,
       x__h49118,
       x__h49201,
       x__h49205,
       x__h49209,
       x__h49213,
       x__h49217,
       x__h49221,
       x__h49473,
       x__h49556,
       x__h49560,
       x__h49564,
       x__h49568,
       x__h49572,
       x__h49576,
       x__h49828,
       x__h49911,
       x__h49915,
       x__h49919,
       x__h49923,
       x__h49927,
       x__h49931,
       x__h50183,
       x__h50266,
       x__h50270,
       x__h50274,
       x__h50278,
       x__h50282,
       x__h50286,
       x__h50538,
       x__h50621,
       x__h50625,
       x__h50629,
       x__h50633,
       x__h50637,
       x__h50641,
       x__h50893,
       x__h50976,
       x__h50980,
       x__h50984,
       x__h50988,
       x__h50992,
       x__h50996;

  // value method creditIfc_rdy
  assign tm_dsc_sts_rdy = creditReceiver_creditFifo$FULL_N ;

  // value method c2hDescriptorTransmitIfc_radr
  assign c2h_byp_in_radr =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[184:121] :
	       64'd0 ;

  // value method c2hDescriptorTransmitIfc_wadr
  assign c2h_byp_in_wadr =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[120:57] :
	       64'd0 ;

  // value method c2hDescriptorTransmitIfc_len
  assign c2h_byp_in_len =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[56:41] :
	       16'd0 ;

  // value method c2hDescriptorTransmitIfc_sdi
  assign c2h_byp_in_sdi =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2hDescriptorTransmitter_descriptorFifo$D_OUT[40] ;

  // value method c2hDescriptorTransmitIfc_mrkr_req
  assign c2h_byp_in_mrkr_req =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2hDescriptorTransmitter_descriptorFifo$D_OUT[39] ;

  // value method c2hDescriptorTransmitIfc_qid
  assign c2h_byp_in_qid =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[38:28] :
	       11'd0 ;

  // value method c2hDescriptorTransmitIfc_error
  assign c2h_byp_in_error =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2hDescriptorTransmitter_descriptorFifo$D_OUT[27] ;

  // value method c2hDescriptorTransmitIfc_func
  assign c2h_byp_in_func =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[26:19] :
	       8'd0 ;

  // value method c2hDescriptorTransmitIfc_cidx
  assign c2h_byp_in_cidx =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[18:3] :
	       16'd0 ;

  // value method c2hDescriptorTransmitIfc_port_id
  assign c2h_byp_in_port_id =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[2:0] :
	       3'd0 ;

  // value method c2hDescriptorTransmitIfc_vld
  assign c2h_byp_in_vld = c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ;

  // value method h2cDescriptorTransmitIfc_radr
  assign h2c_byp_in_radr =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[184:121] :
	       64'd0 ;

  // value method h2cDescriptorTransmitIfc_wadr
  assign h2c_byp_in_wadr =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[120:57] :
	       64'd0 ;

  // value method h2cDescriptorTransmitIfc_len
  assign h2c_byp_in_len =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[56:41] :
	       16'd0 ;

  // value method h2cDescriptorTransmitIfc_sdi
  assign h2c_byp_in_sdi =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cDescriptorTransmitter_descriptorFifo$D_OUT[40] ;

  // value method h2cDescriptorTransmitIfc_mrkr_req
  assign h2c_byp_in_mrkr_req =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cDescriptorTransmitter_descriptorFifo$D_OUT[39] ;

  // value method h2cDescriptorTransmitIfc_qid
  assign h2c_byp_in_qid =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[38:28] :
	       11'd0 ;

  // value method h2cDescriptorTransmitIfc_error
  assign h2c_byp_in_error =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cDescriptorTransmitter_descriptorFifo$D_OUT[27] ;

  // value method h2cDescriptorTransmitIfc_func
  assign h2c_byp_in_func =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[26:19] :
	       8'd0 ;

  // value method h2cDescriptorTransmitIfc_cidx
  assign h2c_byp_in_cidx =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[18:3] :
	       16'd0 ;

  // value method h2cDescriptorTransmitIfc_port_id
  assign h2c_byp_in_port_id =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[2:0] :
	       3'd0 ;

  // value method h2cDescriptorTransmitIfc_vld
  assign h2c_byp_in_vld = h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ;

  // value method c2hDescriptorReceiveIfc_rdy
  assign c2h_byp_out_rdy = 1'd1 ;

  // value method h2cDescriptorReceiveIfc_rdy
  assign h2c_byp_out_rdy = 1'd1 ;

  // value method c2hStreamDescriptorTransmitIfc_addr
  assign c2h_byp_st_addr =
	     c2hStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hStreamDescriptorTransmitter_descriptorFifo$D_OUT[86:23] :
	       64'd0 ;

  // value method c2hStreamDescriptorTransmitIfc_error
  assign c2h_byp_st_error =
	     c2hStreamDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2hStreamDescriptorTransmitter_descriptorFifo$D_OUT[22] ;

  // value method c2hStreamDescriptorTransmitIfc_qid
  assign c2h_byp_st_qid =
	     c2hStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hStreamDescriptorTransmitter_descriptorFifo$D_OUT[21:11] :
	       11'd0 ;

  // value method c2hStreamDescriptorTransmitIfc_func
  assign c2h_byp_st_func =
	     c2hStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hStreamDescriptorTransmitter_descriptorFifo$D_OUT[10:3] :
	       8'd0 ;

  // value method c2hStreamDescriptorTransmitIfc_port_id
  assign c2h_byp_st_port_id =
	     c2hStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hStreamDescriptorTransmitter_descriptorFifo$D_OUT[2:0] :
	       3'd0 ;

  // value method c2hStreamDescriptorTransmitIfc_vld
  assign c2h_byp_st_vld =
	     c2hStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ;

  // value method h2cStreamDescriptorTransmitIfc_addr
  assign h2c_byp_st_addr =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[123:60] :
	       64'd0 ;

  // value method h2cStreamDescriptorTransmitIfc_len
  assign h2c_byp_st_len =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[59:44] :
	       16'd0 ;

  // value method h2cStreamDescriptorTransmitIfc_no_dma
  assign h2c_byp_st_no_dma =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[43] ;

  // value method h2cStreamDescriptorTransmitIfc_error
  assign h2c_byp_st_error =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[42] ;

  // value method h2cStreamDescriptorTransmitIfc_sdi
  assign h2c_byp_st_sdi =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[41] ;

  // value method h2cStreamDescriptorTransmitIfc_mrkr_req
  assign h2c_byp_st_mrkr_req =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[40] ;

  // value method h2cStreamDescriptorTransmitIfc_sop
  assign h2c_byp_st_sop =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[39] ;

  // value method h2cStreamDescriptorTransmitIfc_eop
  assign h2c_byp_st_eop =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[38] ;

  // value method h2cStreamDescriptorTransmitIfc_qid
  assign h2c_byp_st_qid =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[37:27] :
	       11'd0 ;

  // value method h2cStreamDescriptorTransmitIfc_func
  assign h2c_byp_st_func =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[26:19] :
	       8'd0 ;

  // value method h2cStreamDescriptorTransmitIfc_cidx
  assign h2c_byp_st_cidx =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[18:3] :
	       16'd0 ;

  // value method h2cStreamDescriptorTransmitIfc_port_id
  assign h2c_byp_st_port_id =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT[2:0] :
	       3'd0 ;

  // value method h2cStreamDescriptorTransmitIfc_vld
  assign h2c_byp_st_vld =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N ;

  // value method vdmRecieveIfc_tready
  assign st_rx_msg_tready = 1'd1 ;

  // value method h2cStreamRxIfc_tready
  assign s_axis_h2c_tready = h2cRx_pkgFifo$FULL_N ;

  // value method c2hStreamTxIfc_tvalid
  assign m_axis_c2h_tvalid = c2hTx_pkgFifo$EMPTY_N ;

  // value method c2hStreamTxIfc_tdata
  assign m_axis_c2h_tdata =
	     c2hTx_pkgFifo$EMPTY_N ? c2hTx_pkgFifo$D_OUT[616:105] : 512'd0 ;

  // value method c2hStreamTxIfc_tlast
  assign m_axis_c2h_tlast =
	     c2hTx_pkgFifo$EMPTY_N && c2hTx_pkgFifo$D_OUT[104] ;

  // value method c2hStreamTxIfc_dpar
  assign m_axis_c2h_dpar =
	     c2hTx_pkgFifo$EMPTY_N ? c2hTx_pkgFifo$D_OUT[103:40] : 64'd0 ;

  // value method c2hStreamTxIfc_mty
  assign m_axis_c2h_mty =
	     c2hTx_pkgFifo$EMPTY_N ? c2hTx_pkgFifo$D_OUT[39:34] : 6'd0 ;

  // value method c2hStreamTxIfc_ctrl_marker
  assign m_axis_c2h_ctrl_marker =
	     c2hTx_pkgFifo$EMPTY_N && c2hTx_pkgFifo$D_OUT[33] ;

  // value method c2hStreamTxIfc_dis_cmpt
  assign m_axis_c2h_dis_cmpt =
	     c2hTx_pkgFifo$EMPTY_N && c2hTx_pkgFifo$D_OUT[32] ;

  // value method c2hStreamTxIfc_imm_data
  assign m_axis_c2h_imm_data =
	     c2hTx_pkgFifo$EMPTY_N && c2hTx_pkgFifo$D_OUT[31] ;

  // value method c2hStreamTxIfc_user_trig
  assign m_axis_c2h_user_trig =
	     c2hTx_pkgFifo$EMPTY_N && c2hTx_pkgFifo$D_OUT[30] ;

  // value method c2hStreamTxIfc_len
  assign m_axis_c2h_len =
	     c2hTx_pkgFifo$EMPTY_N ? c2hTx_pkgFifo$D_OUT[29:14] : 16'd0 ;

  // value method c2hStreamTxIfc_qid
  assign m_axis_c2h_qid =
	     c2hTx_pkgFifo$EMPTY_N ? c2hTx_pkgFifo$D_OUT[13:3] : 11'd0 ;

  // value method c2hStreamTxIfc_port_id
  assign m_axis_c2h_port_id =
	     c2hTx_pkgFifo$EMPTY_N ? c2hTx_pkgFifo$D_OUT[2:0] : 3'd0 ;

  // value method c2hStreamCmptTxIfc_tvalid
  assign m_axis_c2h_cmpt_tvalid = c2hCmptTx_pkgFifo$EMPTY_N ;

  // value method c2hStreamCmptTxIfc_tdata
  assign m_axis_c2h_cmpt_tdata =
	     c2hCmptTx_pkgFifo$EMPTY_N ?
	       c2hCmptTx_pkgFifo$D_OUT[134:7] :
	       128'd0 ;

  // value method c2hStreamCmptTxIfc_tlast
  assign m_axis_c2h_cmpt_tlast =
	     c2hCmptTx_pkgFifo$EMPTY_N && c2hCmptTx_pkgFifo$D_OUT[6] ;

  // value method c2hStreamCmptTxIfc_dpar
  assign m_axis_c2h_cmpt_dpar =
	     c2hCmptTx_pkgFifo$EMPTY_N ? c2hCmptTx_pkgFifo$D_OUT[5:2] : 4'd0 ;

  // value method c2hStreamCmptTxIfc_size
  assign m_axis_c2h_cmpt_size =
	     c2hCmptTx_pkgFifo$EMPTY_N ? c2hCmptTx_pkgFifo$D_OUT[1:0] : 2'd0 ;

  // value method axi_st_rd_tready
  assign S_AXIS_USER_tready = !axisRd_isRst_isInReset && axisRd_in_1$FULL_N ;

  // value method axi_st_wr_tvalid
  assign M_AXIS_USER_tvalid =
	     !axisWr_isRst_isInReset && axisWr_out_1$EMPTY_N ;

  // value method axi_st_wr_tdata
  assign M_AXIS_USER_tdata =
	     axisWr_out_1$EMPTY_N ? axisWr_out_1$D_OUT[580:69] : 512'd0 ;

  // value method axi_st_wr_tlast
  assign M_AXIS_USER_tlast = axisWr_out_1$EMPTY_N && axisWr_out_1$D_OUT[0] ;

  // value method axi_st_wr_tkeep
  assign M_AXIS_USER_tkeep =
	     axisWr_out_1$EMPTY_N ? axisWr_out_1$D_OUT[68:5] : 64'd0 ;

  // value method axi_st_wr_tDest
  assign M_AXIS_USER_tDest =
	     axisWr_out_1$EMPTY_N ? axisWr_out_1$D_OUT[4:1] : 4'd0 ;

  // value method axi_rd_fab_arready
  assign S_AXI_CTRL_arready =
	     !axiCtrlSlave_readSlave_isRst_isInReset &&
	     axiCtrlSlave_readSlave_in$FULL_N ;

  // value method axi_rd_fab_rvalid
  assign S_AXI_CTRL_rvalid =
	     !axiCtrlSlave_readSlave_isRst_isInReset &&
	     axiCtrlSlave_readSlave_out$EMPTY_N ;

  // value method axi_rd_fab_rdata
  assign S_AXI_CTRL_rdata =
	     axiCtrlSlave_readSlave_out$EMPTY_N ?
	       axiCtrlSlave_readSlave_out$D_OUT[65:2] :
	       64'd0 ;

  // value method axi_rd_fab_rresp
  assign S_AXI_CTRL_rresp =
	     axiCtrlSlave_readSlave_out$EMPTY_N ?
	       axiCtrlSlave_readSlave_out$D_OUT[1:0] :
	       2'd0 ;

  // value method axi_wr_fab_awready
  assign S_AXI_CTRL_awready =
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     !axiCtrlSlave_writeSlave_addrIn_rv[15] ;

  // value method axi_wr_fab_wready
  assign S_AXI_CTRL_wready =
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     !axiCtrlSlave_writeSlave_dataIn_rv[72] ;

  // value method axi_wr_fab_bvalid
  assign S_AXI_CTRL_bvalid =
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     axiCtrlSlave_writeSlave_out$EMPTY_N ;

  // value method axi_wr_fab_bresp
  assign S_AXI_CTRL_bresp =
	     axiCtrlSlave_writeSlave_out$EMPTY_N ?
	       axiCtrlSlave_writeSlave_out$D_OUT :
	       2'd0 ;

  // value method dma_resetn
  assign dma_resetn = !dmaResetActive ;

  // submodule axiCtrlSlave_readSlave_in
  FIFO2 #(.width(32'd15),
	  .guarded(1'd1)) axiCtrlSlave_readSlave_in(.RST(resetn),
						    .CLK(aclk),
						    .D_IN(axiCtrlSlave_readSlave_in$D_IN),
						    .ENQ(axiCtrlSlave_readSlave_in$ENQ),
						    .DEQ(axiCtrlSlave_readSlave_in$DEQ),
						    .CLR(axiCtrlSlave_readSlave_in$CLR),
						    .D_OUT(axiCtrlSlave_readSlave_in$D_OUT),
						    .FULL_N(axiCtrlSlave_readSlave_in$FULL_N),
						    .EMPTY_N(axiCtrlSlave_readSlave_in$EMPTY_N));

  // submodule axiCtrlSlave_readSlave_out
  FIFO2 #(.width(32'd66),
	  .guarded(1'd1)) axiCtrlSlave_readSlave_out(.RST(resetn),
						     .CLK(aclk),
						     .D_IN(axiCtrlSlave_readSlave_out$D_IN),
						     .ENQ(axiCtrlSlave_readSlave_out$ENQ),
						     .DEQ(axiCtrlSlave_readSlave_out$DEQ),
						     .CLR(axiCtrlSlave_readSlave_out$CLR),
						     .D_OUT(axiCtrlSlave_readSlave_out$D_OUT),
						     .FULL_N(axiCtrlSlave_readSlave_out$FULL_N),
						     .EMPTY_N(axiCtrlSlave_readSlave_out$EMPTY_N));

  // submodule axiCtrlSlave_writeSlave_in
  FIFO2 #(.width(32'd87),
	  .guarded(1'd1)) axiCtrlSlave_writeSlave_in(.RST(resetn),
						     .CLK(aclk),
						     .D_IN(axiCtrlSlave_writeSlave_in$D_IN),
						     .ENQ(axiCtrlSlave_writeSlave_in$ENQ),
						     .DEQ(axiCtrlSlave_writeSlave_in$DEQ),
						     .CLR(axiCtrlSlave_writeSlave_in$CLR),
						     .D_OUT(axiCtrlSlave_writeSlave_in$D_OUT),
						     .FULL_N(axiCtrlSlave_writeSlave_in$FULL_N),
						     .EMPTY_N(axiCtrlSlave_writeSlave_in$EMPTY_N));

  // submodule axiCtrlSlave_writeSlave_out
  FIFO2 #(.width(32'd2),
	  .guarded(1'd1)) axiCtrlSlave_writeSlave_out(.RST(resetn),
						      .CLK(aclk),
						      .D_IN(axiCtrlSlave_writeSlave_out$D_IN),
						      .ENQ(axiCtrlSlave_writeSlave_out$ENQ),
						      .DEQ(axiCtrlSlave_writeSlave_out$DEQ),
						      .CLR(axiCtrlSlave_writeSlave_out$CLR),
						      .D_OUT(axiCtrlSlave_writeSlave_out$D_OUT),
						      .FULL_N(axiCtrlSlave_writeSlave_out$FULL_N),
						      .EMPTY_N(axiCtrlSlave_writeSlave_out$EMPTY_N));

  // submodule axisRd_in
  FIFO2 #(.width(32'd581), .guarded(1'd1)) axisRd_in(.RST(resetn),
						     .CLK(aclk),
						     .D_IN(axisRd_in$D_IN),
						     .ENQ(axisRd_in$ENQ),
						     .DEQ(axisRd_in$DEQ),
						     .CLR(axisRd_in$CLR),
						     .D_OUT(),
						     .FULL_N(),
						     .EMPTY_N());

  // submodule axisRd_in_1
  FIFO2 #(.width(32'd581), .guarded(1'd1)) axisRd_in_1(.RST(resetn),
						       .CLK(aclk),
						       .D_IN(axisRd_in_1$D_IN),
						       .ENQ(axisRd_in_1$ENQ),
						       .DEQ(axisRd_in_1$DEQ),
						       .CLR(axisRd_in_1$CLR),
						       .D_OUT(axisRd_in_1$D_OUT),
						       .FULL_N(axisRd_in_1$FULL_N),
						       .EMPTY_N(axisRd_in_1$EMPTY_N));

  // submodule axisWr_out
  FIFO2 #(.width(32'd581), .guarded(1'd1)) axisWr_out(.RST(resetn),
						      .CLK(aclk),
						      .D_IN(axisWr_out$D_IN),
						      .ENQ(axisWr_out$ENQ),
						      .DEQ(axisWr_out$DEQ),
						      .CLR(axisWr_out$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule axisWr_out_1
  FIFO2 #(.width(32'd581), .guarded(1'd1)) axisWr_out_1(.RST(resetn),
							.CLK(aclk),
							.D_IN(axisWr_out_1$D_IN),
							.ENQ(axisWr_out_1$ENQ),
							.DEQ(axisWr_out_1$DEQ),
							.CLR(axisWr_out_1$CLR),
							.D_OUT(axisWr_out_1$D_OUT),
							.FULL_N(axisWr_out_1$FULL_N),
							.EMPTY_N(axisWr_out_1$EMPTY_N));

  // submodule c2hBurstFifo
  SizedFIFO #(.p1width(32'd11),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) c2hBurstFifo(.RST(resetn),
					   .CLK(aclk),
					   .D_IN(c2hBurstFifo$D_IN),
					   .ENQ(c2hBurstFifo$ENQ),
					   .DEQ(c2hBurstFifo$DEQ),
					   .CLR(c2hBurstFifo$CLR),
					   .D_OUT(c2hBurstFifo$D_OUT),
					   .FULL_N(c2hBurstFifo$FULL_N),
					   .EMPTY_N(c2hBurstFifo$EMPTY_N));

  // submodule c2hCmdFifo
  SizedFIFO #(.p1width(32'd160),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) c2hCmdFifo(.RST(resetn),
					 .CLK(aclk),
					 .D_IN(c2hCmdFifo$D_IN),
					 .ENQ(c2hCmdFifo$ENQ),
					 .DEQ(c2hCmdFifo$DEQ),
					 .CLR(c2hCmdFifo$CLR),
					 .D_OUT(c2hCmdFifo$D_OUT),
					 .FULL_N(c2hCmdFifo$FULL_N),
					 .EMPTY_N(c2hCmdFifo$EMPTY_N));

  // submodule c2hCmptTx_pkgFifo
  FIFO2 #(.width(32'd135), .guarded(1'd1)) c2hCmptTx_pkgFifo(.RST(resetn),
							     .CLK(aclk),
							     .D_IN(c2hCmptTx_pkgFifo$D_IN),
							     .ENQ(c2hCmptTx_pkgFifo$ENQ),
							     .DEQ(c2hCmptTx_pkgFifo$DEQ),
							     .CLR(c2hCmptTx_pkgFifo$CLR),
							     .D_OUT(c2hCmptTx_pkgFifo$D_OUT),
							     .FULL_N(c2hCmptTx_pkgFifo$FULL_N),
							     .EMPTY_N(c2hCmptTx_pkgFifo$EMPTY_N));

  // submodule c2hDescriptorTransmitter_descriptorFifo
  FIFO2 #(.width(32'd185),
	  .guarded(1'd1)) c2hDescriptorTransmitter_descriptorFifo(.RST(resetn),
								  .CLK(aclk),
								  .D_IN(c2hDescriptorTransmitter_descriptorFifo$D_IN),
								  .ENQ(c2hDescriptorTransmitter_descriptorFifo$ENQ),
								  .DEQ(c2hDescriptorTransmitter_descriptorFifo$DEQ),
								  .CLR(c2hDescriptorTransmitter_descriptorFifo$CLR),
								  .D_OUT(c2hDescriptorTransmitter_descriptorFifo$D_OUT),
								  .FULL_N(c2hDescriptorTransmitter_descriptorFifo$FULL_N),
								  .EMPTY_N(c2hDescriptorTransmitter_descriptorFifo$EMPTY_N));

  // submodule c2hStreamCmdFifo
  SizedFIFO #(.p1width(32'd96),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) c2hStreamCmdFifo(.RST(resetn),
					       .CLK(aclk),
					       .D_IN(c2hStreamCmdFifo$D_IN),
					       .ENQ(c2hStreamCmdFifo$ENQ),
					       .DEQ(c2hStreamCmdFifo$DEQ),
					       .CLR(c2hStreamCmdFifo$CLR),
					       .D_OUT(c2hStreamCmdFifo$D_OUT),
					       .FULL_N(c2hStreamCmdFifo$FULL_N),
					       .EMPTY_N(c2hStreamCmdFifo$EMPTY_N));

  // submodule c2hStreamDescriptorTransmitter_descriptorFifo
  FIFO2 #(.width(32'd87),
	  .guarded(1'd1)) c2hStreamDescriptorTransmitter_descriptorFifo(.RST(resetn),
									.CLK(aclk),
									.D_IN(c2hStreamDescriptorTransmitter_descriptorFifo$D_IN),
									.ENQ(c2hStreamDescriptorTransmitter_descriptorFifo$ENQ),
									.DEQ(c2hStreamDescriptorTransmitter_descriptorFifo$DEQ),
									.CLR(c2hStreamDescriptorTransmitter_descriptorFifo$CLR),
									.D_OUT(c2hStreamDescriptorTransmitter_descriptorFifo$D_OUT),
									.FULL_N(c2hStreamDescriptorTransmitter_descriptorFifo$FULL_N),
									.EMPTY_N(c2hStreamDescriptorTransmitter_descriptorFifo$EMPTY_N));

  // submodule c2hTx_pkgFifo
  FIFO2 #(.width(32'd617), .guarded(1'd1)) c2hTx_pkgFifo(.RST(resetn),
							 .CLK(aclk),
							 .D_IN(c2hTx_pkgFifo$D_IN),
							 .ENQ(c2hTx_pkgFifo$ENQ),
							 .DEQ(c2hTx_pkgFifo$DEQ),
							 .CLR(c2hTx_pkgFifo$CLR),
							 .D_OUT(c2hTx_pkgFifo$D_OUT),
							 .FULL_N(c2hTx_pkgFifo$FULL_N),
							 .EMPTY_N(c2hTx_pkgFifo$EMPTY_N));

  // submodule creditReceiver_creditFifo
  FIFO2 #(.width(32'd37),
	  .guarded(1'd1)) creditReceiver_creditFifo(.RST(resetn),
						    .CLK(aclk),
						    .D_IN(creditReceiver_creditFifo$D_IN),
						    .ENQ(creditReceiver_creditFifo$ENQ),
						    .DEQ(creditReceiver_creditFifo$DEQ),
						    .CLR(creditReceiver_creditFifo$CLR),
						    .D_OUT(creditReceiver_creditFifo$D_OUT),
						    .FULL_N(creditReceiver_creditFifo$FULL_N),
						    .EMPTY_N(creditReceiver_creditFifo$EMPTY_N));

  // submodule h2cCmdFifo
  SizedFIFO #(.p1width(32'd160),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) h2cCmdFifo(.RST(resetn),
					 .CLK(aclk),
					 .D_IN(h2cCmdFifo$D_IN),
					 .ENQ(h2cCmdFifo$ENQ),
					 .DEQ(h2cCmdFifo$DEQ),
					 .CLR(h2cCmdFifo$CLR),
					 .D_OUT(h2cCmdFifo$D_OUT),
					 .FULL_N(h2cCmdFifo$FULL_N),
					 .EMPTY_N(h2cCmdFifo$EMPTY_N));

  // submodule h2cDescriptorTransmitter_descriptorFifo
  FIFO2 #(.width(32'd185),
	  .guarded(1'd1)) h2cDescriptorTransmitter_descriptorFifo(.RST(resetn),
								  .CLK(aclk),
								  .D_IN(h2cDescriptorTransmitter_descriptorFifo$D_IN),
								  .ENQ(h2cDescriptorTransmitter_descriptorFifo$ENQ),
								  .DEQ(h2cDescriptorTransmitter_descriptorFifo$DEQ),
								  .CLR(h2cDescriptorTransmitter_descriptorFifo$CLR),
								  .D_OUT(h2cDescriptorTransmitter_descriptorFifo$D_OUT),
								  .FULL_N(h2cDescriptorTransmitter_descriptorFifo$FULL_N),
								  .EMPTY_N(h2cDescriptorTransmitter_descriptorFifo$EMPTY_N));

  // submodule h2cRx_pkgFifo
  FIFO2 #(.width(32'd631), .guarded(1'd1)) h2cRx_pkgFifo(.RST(resetn),
							 .CLK(aclk),
							 .D_IN(h2cRx_pkgFifo$D_IN),
							 .ENQ(h2cRx_pkgFifo$ENQ),
							 .DEQ(h2cRx_pkgFifo$DEQ),
							 .CLR(h2cRx_pkgFifo$CLR),
							 .D_OUT(h2cRx_pkgFifo$D_OUT),
							 .FULL_N(h2cRx_pkgFifo$FULL_N),
							 .EMPTY_N(h2cRx_pkgFifo$EMPTY_N));

  // submodule h2cStreamCmdFifo
  SizedFIFO #(.p1width(32'd96),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) h2cStreamCmdFifo(.RST(resetn),
					       .CLK(aclk),
					       .D_IN(h2cStreamCmdFifo$D_IN),
					       .ENQ(h2cStreamCmdFifo$ENQ),
					       .DEQ(h2cStreamCmdFifo$DEQ),
					       .CLR(h2cStreamCmdFifo$CLR),
					       .D_OUT(h2cStreamCmdFifo$D_OUT),
					       .FULL_N(h2cStreamCmdFifo$FULL_N),
					       .EMPTY_N(h2cStreamCmdFifo$EMPTY_N));

  // submodule h2cStreamDescriptorTransmitter_descriptorFifo
  FIFO2 #(.width(32'd124),
	  .guarded(1'd1)) h2cStreamDescriptorTransmitter_descriptorFifo(.RST(resetn),
									.CLK(aclk),
									.D_IN(h2cStreamDescriptorTransmitter_descriptorFifo$D_IN),
									.ENQ(h2cStreamDescriptorTransmitter_descriptorFifo$ENQ),
									.DEQ(h2cStreamDescriptorTransmitter_descriptorFifo$DEQ),
									.CLR(h2cStreamDescriptorTransmitter_descriptorFifo$CLR),
									.D_OUT(h2cStreamDescriptorTransmitter_descriptorFifo$D_OUT),
									.FULL_N(h2cStreamDescriptorTransmitter_descriptorFifo$FULL_N),
									.EMPTY_N(h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N));

  // rule RL_dequeueC2HCmd
  assign WILL_FIRE_RL_dequeueC2HCmd =
	     c2hCmdFifo$EMPTY_N && c2hOutstandingReg == 32'd0 ;

  // rule RL_generateC2HDescriptor
  assign WILL_FIRE_RL_generateC2HDescriptor =
	     c2hDescriptorTransmitter_descriptorFifo$FULL_N &&
	     c2hOutstandingReg != 32'd0 ;

  // rule RL_dequeueH2CCmd
  assign WILL_FIRE_RL_dequeueH2CCmd =
	     h2cCmdFifo$EMPTY_N && h2cOutstandingReg == 32'd0 ;

  // rule RL_generateH2CDescriptor
  assign WILL_FIRE_RL_generateH2CDescriptor =
	     h2cDescriptorTransmitter_descriptorFifo$FULL_N &&
	     h2cOutstandingReg != 32'd0 ;

  // rule RL_dequeueC2HStreamCmd
  assign WILL_FIRE_RL_dequeueC2HStreamCmd =
	     c2hStreamCmdFifo$EMPTY_N && c2hStreamOutstandingReg == 32'd0 ;

  // rule RL_generateC2HStreamDescriptor
  assign WILL_FIRE_RL_generateC2HStreamDescriptor =
	     c2hBurstFifo$FULL_N &&
	     c2hStreamDescriptorTransmitter_descriptorFifo$FULL_N &&
	     c2hStreamOutstandingReg != 32'd0 &&
	     c2hStreamQueueEnable ;

  // rule RL_dequeueH2CStreamCmd
  assign WILL_FIRE_RL_dequeueH2CStreamCmd =
	     h2cStreamCmdFifo$EMPTY_N && h2cStreamOutstandingReg == 32'd0 ;

  // rule RL_generateH2CStreamDescriptor
  assign WILL_FIRE_RL_generateH2CStreamDescriptor =
	     h2cStreamDescriptorTransmitter_descriptorFifo$FULL_N &&
	     h2cStreamOutstandingReg != 32'd0 &&
	     h2cStreamQueueEnable ;

  // rule RL_forwardC2HStreamPacket
  assign WILL_FIRE_RL_forwardC2HStreamPacket =
	     axisRd_in_1$EMPTY_N && c2hTx_pkgFifo$FULL_N &&
	     c2hBurstFifo$EMPTY_N &&
	     c2hCmptTx_pkgFifo$FULL_N ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd0 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_1
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd1 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_2
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd2 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_3
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd3 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_4
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd5 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_5
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd32 ;

  // rule RL_axiCtrlSlave_axiReadSpecial
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd0 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_1
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd1 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_2
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd2 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_3
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd3 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_4
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd5 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_5
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd32 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadFallback
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadFallback =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     !axiCtrlSlave_readIsHandled$whas ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd0 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd0 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd1 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial_1
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd1 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd2 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial_2
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd2 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd4 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial_3
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     c2hCmdFifo$FULL_N &&
	     h2cCmdFifo$FULL_N &&
	     c2hStreamCmdFifo$FULL_N &&
	     h2cStreamCmdFifo$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd4 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd32 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial_4
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd32 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_startReset
  assign WILL_FIRE_RL_startReset =
	     !dmaResetActive && activateDmaResetWire$whas ;

  // rule RL_axiCtrlSlave_1_axiWriteFallback
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteFallback =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     !axiCtrlSlave_writeIsHandled$whas &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial ;

  // inputs to muxes for submodule ports
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__SEL_5 =
	     WILL_FIRE_RL_axiCtrlSlave_axiReadFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ;
  assign MUX_c2hCurrReadAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     (c2hOutstandingReg[31:16] != 16'd0 || c2hIrqArm) ;
  assign MUX_c2hIrqArm$write_1__SEL_1 =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ;
  assign MUX_dmaResetActive$write_1__SEL_1 =
	     dmaResetActive && resetCount == 8'd128 ;
  assign MUX_h2cCurrReadAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     (h2cOutstandingReg[31:16] != 16'd0 || h2cIrqArm) ;
  assign MUX_h2cIrqArm$write_1__SEL_1 =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     !creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ;
  assign MUX_h2cStreamCurrReadAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_generateH2CStreamDescriptor &&
	     (h2cStreamOutstandingReg[31:16] != 16'd0 || h2cStreamIrqArm) ;
  assign MUX_h2cStreamIrqArm$write_1__SEL_1 =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd1 &&
	     !creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ;
  assign MUX_resetCount$write_1__SEL_1 =
	     dmaResetActive && resetCount != 8'd128 ;
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_1 = { hostAddrReg, 2'd0 } ;
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_2 = { fpgaAddrReg, 2'd0 } ;
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_3 =
	     { transferLenReg, 2'd0 } ;
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_4 = { v__h13722, 2'd0 } ;
  assign MUX_c2hCurrReadAddr$write_1__VAL_1 = c2hCurrReadAddr + y__h21773 ;
  assign MUX_c2hCurrWriteAddr$write_1__VAL_1 = c2hCurrWriteAddr + y__h21773 ;
  assign MUX_c2hOutstandingReg$write_1__VAL_1 =
	     c2hOutstandingReg - y__h21719 ;
  assign MUX_c2hStreamCurrReadAddr$write_1__VAL_2 =
	     c2hStreamCurrReadAddr + 64'd32768 ;
  assign MUX_c2hStreamOutstandingReg$write_1__VAL_2 =
	     c2hStreamOutstandingReg - y__h22761 ;
  assign MUX_h2cCurrReadAddr$write_1__VAL_1 = h2cCurrReadAddr + y__h22302 ;
  assign MUX_h2cCurrWriteAddr$write_1__VAL_1 = h2cCurrWriteAddr + y__h22302 ;
  assign MUX_h2cOutstandingReg$write_1__VAL_1 =
	     h2cOutstandingReg - y__h22268 ;
  assign MUX_h2cStreamCurrReadAddr$write_1__VAL_1 =
	     h2cStreamCurrReadAddr + 64'd32768 ;
  assign MUX_h2cStreamOutstandingReg$write_1__VAL_1 =
	     h2cStreamOutstandingReg - y__h23112 ;
  assign MUX_resetCount$write_1__VAL_1 = resetCount + 8'd1 ;

  // inlined wires
  assign creditReceiver_creditWire$wget =
	     { tm_dsc_sts_byp,
	       tm_dsc_sts_dir,
	       tm_dsc_sts_mm,
	       tm_dsc_sts_qid,
	       tm_dsc_sts_avl,
	       tm_dsc_sts_qinv,
	       tm_dsc_sts_qen,
	       tm_dsc_sts_irq_arm,
	       tm_dsc_sts_error,
	       tm_dsc_sts_port_id } ;
  assign h2cRx_pkgWire$wget =
	     { s_axis_h2c_tdata,
	       s_axis_h2c_tlast,
	       s_axis_h2c_dpar,
	       s_axis_h2c_err,
	       s_axis_h2c_zero_byte,
	       s_axis_h2c_mty,
	       s_axis_h2c_qid,
	       s_axis_h2c_mdata,
	       s_axis_h2c_port_id } ;
  assign axiCtrlSlave_readIsHandled$whas =
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled ;
  assign axiCtrlSlave_writeIsHandled$whas =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled ;
  assign activateDmaResetWire$whas =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	     axiCtrlSlave_writeSlave_in$D_OUT[3] &&
	     axiCtrlSlave_writeSlave_in$D_OUT[11] ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$EN_port0__write =
	     !axiCtrlSlave_writeSlave_addrIn_rv[15] &&
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     S_AXI_CTRL_awvalid ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_CTRL_awaddr, S_AXI_CTRL_awprot } ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$port1__read =
	     axiCtrlSlave_writeSlave_addrIn_rv$EN_port0__write ?
	       axiCtrlSlave_writeSlave_addrIn_rv$port0__write_1 :
	       axiCtrlSlave_writeSlave_addrIn_rv ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$EN_port1__write =
	     axiCtrlSlave_writeSlave_addrIn_rv$port1__read[15] &&
	     axiCtrlSlave_writeSlave_dataIn_rv$port1__read[72] &&
	     axiCtrlSlave_writeSlave_in$FULL_N ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$port2__read =
	     axiCtrlSlave_writeSlave_addrIn_rv$EN_port1__write ?
	       16'd10922 :
	       axiCtrlSlave_writeSlave_addrIn_rv$port1__read ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$EN_port0__write =
	     !axiCtrlSlave_writeSlave_dataIn_rv[72] &&
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     S_AXI_CTRL_wvalid ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_CTRL_wdata, S_AXI_CTRL_wstrb } ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$port1__read =
	     axiCtrlSlave_writeSlave_dataIn_rv$EN_port0__write ?
	       axiCtrlSlave_writeSlave_dataIn_rv$port0__write_1 :
	       axiCtrlSlave_writeSlave_dataIn_rv ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$EN_port1__write =
	     axiCtrlSlave_writeSlave_addrIn_rv$port1__read[15] &&
	     axiCtrlSlave_writeSlave_dataIn_rv$port1__read[72] &&
	     axiCtrlSlave_writeSlave_in$FULL_N ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$port2__read =
	     axiCtrlSlave_writeSlave_dataIn_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       axiCtrlSlave_writeSlave_dataIn_rv$port1__read ;

  // register axiCtrlSlave_readBusy
  assign axiCtrlSlave_readBusy$D_IN = 1'b0 ;
  assign axiCtrlSlave_readBusy$EN = 1'b0 ;

  // register axiCtrlSlave_readSlave_isRst_isInReset
  assign axiCtrlSlave_readSlave_isRst_isInReset$D_IN = 1'd0 ;
  assign axiCtrlSlave_readSlave_isRst_isInReset$EN =
	     axiCtrlSlave_readSlave_isRst_isInReset ;

  // register axiCtrlSlave_writeBusy
  assign axiCtrlSlave_writeBusy$D_IN = 1'b0 ;
  assign axiCtrlSlave_writeBusy$EN = 1'b0 ;

  // register axiCtrlSlave_writeSlave_addrIn_rv
  assign axiCtrlSlave_writeSlave_addrIn_rv$D_IN =
	     axiCtrlSlave_writeSlave_addrIn_rv$port2__read ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$EN = 1'b1 ;

  // register axiCtrlSlave_writeSlave_dataIn_rv
  assign axiCtrlSlave_writeSlave_dataIn_rv$D_IN =
	     axiCtrlSlave_writeSlave_dataIn_rv$port2__read ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$EN = 1'b1 ;

  // register axiCtrlSlave_writeSlave_isRst_isInReset
  assign axiCtrlSlave_writeSlave_isRst_isInReset$D_IN = 1'd0 ;
  assign axiCtrlSlave_writeSlave_isRst_isInReset$EN =
	     axiCtrlSlave_writeSlave_isRst_isInReset ;

  // register axisRd_isRst_isInReset
  assign axisRd_isRst_isInReset$D_IN = 1'd0 ;
  assign axisRd_isRst_isInReset$EN = axisRd_isRst_isInReset ;

  // register axisWr_isRst_isInReset
  assign axisWr_isRst_isInReset$D_IN = 1'd0 ;
  assign axisWr_isRst_isInReset$EN = axisWr_isRst_isInReset ;

  // register c2hBurstCount
  assign c2hBurstCount$D_IN =
	     c2hBurstCount_21_EQ_c2hBurstFifo_first__22_BIT_ETC___d525 ?
	       10'd0 :
	       x__h51235 ;
  assign c2hBurstCount$EN = WILL_FIRE_RL_forwardC2HStreamPacket ;

  // register c2hCurrReadAddr
  assign c2hCurrReadAddr$D_IN =
	     MUX_c2hCurrReadAddr$write_1__SEL_1 ?
	       MUX_c2hCurrReadAddr$write_1__VAL_1 :
	       c2hCmdFifo$D_OUT[159:96] ;
  assign c2hCurrReadAddr$EN =
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     (c2hOutstandingReg[31:16] != 16'd0 || c2hIrqArm) ||
	     WILL_FIRE_RL_dequeueC2HCmd ;

  // register c2hCurrWriteAddr
  assign c2hCurrWriteAddr$D_IN =
	     MUX_c2hCurrReadAddr$write_1__SEL_1 ?
	       MUX_c2hCurrWriteAddr$write_1__VAL_1 :
	       c2hCmdFifo$D_OUT[95:32] ;
  assign c2hCurrWriteAddr$EN =
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     (c2hOutstandingReg[31:16] != 16'd0 || c2hIrqArm) ||
	     WILL_FIRE_RL_dequeueC2HCmd ;

  // register c2hIrqArm
  assign c2hIrqArm$D_IN = MUX_c2hIrqArm$write_1__SEL_1 ;
  assign c2hIrqArm$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ||
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     c2hIrqArm &&
	     c2hOutstandingReg[31:16] == 16'd0 ;

  // register c2hOutstandingReg
  assign c2hOutstandingReg$D_IN =
	     MUX_c2hCurrReadAddr$write_1__SEL_1 ?
	       MUX_c2hOutstandingReg$write_1__VAL_1 :
	       c2hCmdFifo$D_OUT[31:0] ;
  assign c2hOutstandingReg$EN =
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     (c2hOutstandingReg[31:16] != 16'd0 || c2hIrqArm) ||
	     WILL_FIRE_RL_dequeueC2HCmd ;

  // register c2hQueueEnable
  assign c2hQueueEnable$D_IN = creditReceiver_creditFifo$D_OUT[5] ;
  assign c2hQueueEnable$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     creditReceiver_creditFifo$D_OUT[35] ;

  // register c2hStreamCurrReadAddr
  assign c2hStreamCurrReadAddr$D_IN =
	     WILL_FIRE_RL_dequeueC2HStreamCmd ?
	       c2hStreamCmdFifo$D_OUT[95:32] :
	       MUX_c2hStreamCurrReadAddr$write_1__VAL_2 ;
  assign c2hStreamCurrReadAddr$EN =
	     WILL_FIRE_RL_dequeueC2HStreamCmd ||
	     WILL_FIRE_RL_generateC2HStreamDescriptor ;

  // register c2hStreamOutstandingReg
  assign c2hStreamOutstandingReg$D_IN =
	     WILL_FIRE_RL_dequeueC2HStreamCmd ?
	       c2hStreamCmdFifo$D_OUT[31:0] :
	       MUX_c2hStreamOutstandingReg$write_1__VAL_2 ;
  assign c2hStreamOutstandingReg$EN =
	     WILL_FIRE_RL_dequeueC2HStreamCmd ||
	     WILL_FIRE_RL_generateC2HStreamDescriptor ;

  // register c2hStreamQueueEnable
  assign c2hStreamQueueEnable$D_IN = creditReceiver_creditFifo$D_OUT[5] ;
  assign c2hStreamQueueEnable$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd1 &&
	     creditReceiver_creditFifo$D_OUT[35] ;

  // register dmaResetActive
  assign dmaResetActive$D_IN = !MUX_dmaResetActive$write_1__SEL_1 ;
  assign dmaResetActive$EN =
	     dmaResetActive && resetCount == 8'd128 ||
	     WILL_FIRE_RL_startReset ;

  // register fpgaAddrReg
  assign fpgaAddrReg$D_IN =
	     { axiCtrlSlave_writeSlave_in$D_OUT[10] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[74:67] :
		 fpgaAddrReg[63:56],
	       axiCtrlSlave_writeSlave_in$D_OUT[9] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[66:59] :
		 fpgaAddrReg[55:48],
	       axiCtrlSlave_writeSlave_in$D_OUT[8] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[58:51] :
		 fpgaAddrReg[47:40],
	       axiCtrlSlave_writeSlave_in$D_OUT[7] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[50:43] :
		 fpgaAddrReg[39:32],
	       axiCtrlSlave_writeSlave_in$D_OUT[6] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[42:35] :
		 fpgaAddrReg[31:24],
	       axiCtrlSlave_writeSlave_in$D_OUT[5] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[34:27] :
		 fpgaAddrReg[23:16],
	       axiCtrlSlave_writeSlave_in$D_OUT[4] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[26:19] :
		 fpgaAddrReg[15:8],
	       axiCtrlSlave_writeSlave_in$D_OUT[3] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[18:11] :
		 fpgaAddrReg[7:0] } ;
  assign fpgaAddrReg$EN = WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 ;

  // register h2cCurrReadAddr
  assign h2cCurrReadAddr$D_IN =
	     MUX_h2cCurrReadAddr$write_1__SEL_1 ?
	       MUX_h2cCurrReadAddr$write_1__VAL_1 :
	       h2cCmdFifo$D_OUT[159:96] ;
  assign h2cCurrReadAddr$EN =
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     (h2cOutstandingReg[31:16] != 16'd0 || h2cIrqArm) ||
	     WILL_FIRE_RL_dequeueH2CCmd ;

  // register h2cCurrWriteAddr
  assign h2cCurrWriteAddr$D_IN =
	     MUX_h2cCurrReadAddr$write_1__SEL_1 ?
	       MUX_h2cCurrWriteAddr$write_1__VAL_1 :
	       h2cCmdFifo$D_OUT[95:32] ;
  assign h2cCurrWriteAddr$EN =
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     (h2cOutstandingReg[31:16] != 16'd0 || h2cIrqArm) ||
	     WILL_FIRE_RL_dequeueH2CCmd ;

  // register h2cIrqArm
  assign h2cIrqArm$D_IN = MUX_h2cIrqArm$write_1__SEL_1 ;
  assign h2cIrqArm$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     !creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ||
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     h2cIrqArm &&
	     h2cOutstandingReg[31:16] == 16'd0 ;

  // register h2cOutstandingReg
  assign h2cOutstandingReg$D_IN =
	     MUX_h2cCurrReadAddr$write_1__SEL_1 ?
	       MUX_h2cOutstandingReg$write_1__VAL_1 :
	       h2cCmdFifo$D_OUT[31:0] ;
  assign h2cOutstandingReg$EN =
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     (h2cOutstandingReg[31:16] != 16'd0 || h2cIrqArm) ||
	     WILL_FIRE_RL_dequeueH2CCmd ;

  // register h2cQueueEnable
  assign h2cQueueEnable$D_IN = creditReceiver_creditFifo$D_OUT[5] ;
  assign h2cQueueEnable$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     !creditReceiver_creditFifo$D_OUT[35] ;

  // register h2cStreamCurrReadAddr
  assign h2cStreamCurrReadAddr$D_IN =
	     MUX_h2cStreamCurrReadAddr$write_1__SEL_1 ?
	       MUX_h2cStreamCurrReadAddr$write_1__VAL_1 :
	       h2cStreamCmdFifo$D_OUT[95:32] ;
  assign h2cStreamCurrReadAddr$EN =
	     WILL_FIRE_RL_generateH2CStreamDescriptor &&
	     (h2cStreamOutstandingReg[31:16] != 16'd0 || h2cStreamIrqArm) ||
	     WILL_FIRE_RL_dequeueH2CStreamCmd ;

  // register h2cStreamIrqArm
  assign h2cStreamIrqArm$D_IN = MUX_h2cStreamIrqArm$write_1__SEL_1 ;
  assign h2cStreamIrqArm$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd1 &&
	     !creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ||
	     WILL_FIRE_RL_generateH2CStreamDescriptor && h2cStreamIrqArm &&
	     h2cStreamOutstandingReg[31:16] == 16'd0 ;

  // register h2cStreamOutstandingReg
  assign h2cStreamOutstandingReg$D_IN =
	     MUX_h2cStreamCurrReadAddr$write_1__SEL_1 ?
	       MUX_h2cStreamOutstandingReg$write_1__VAL_1 :
	       h2cStreamCmdFifo$D_OUT[31:0] ;
  assign h2cStreamOutstandingReg$EN =
	     WILL_FIRE_RL_generateH2CStreamDescriptor &&
	     (h2cStreamOutstandingReg[31:16] != 16'd0 || h2cStreamIrqArm) ||
	     WILL_FIRE_RL_dequeueH2CStreamCmd ;

  // register h2cStreamQueueEnable
  assign h2cStreamQueueEnable$D_IN = creditReceiver_creditFifo$D_OUT[5] ;
  assign h2cStreamQueueEnable$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd1 &&
	     !creditReceiver_creditFifo$D_OUT[35] ;

  // register hostAddrReg
  assign hostAddrReg$D_IN =
	     { axiCtrlSlave_writeSlave_in$D_OUT[10] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[74:67] :
		 hostAddrReg[63:56],
	       axiCtrlSlave_writeSlave_in$D_OUT[9] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[66:59] :
		 hostAddrReg[55:48],
	       axiCtrlSlave_writeSlave_in$D_OUT[8] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[58:51] :
		 hostAddrReg[47:40],
	       axiCtrlSlave_writeSlave_in$D_OUT[7] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[50:43] :
		 hostAddrReg[39:32],
	       axiCtrlSlave_writeSlave_in$D_OUT[6] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[42:35] :
		 hostAddrReg[31:24],
	       axiCtrlSlave_writeSlave_in$D_OUT[5] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[34:27] :
		 hostAddrReg[23:16],
	       axiCtrlSlave_writeSlave_in$D_OUT[4] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[26:19] :
		 hostAddrReg[15:8],
	       axiCtrlSlave_writeSlave_in$D_OUT[3] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[18:11] :
		 hostAddrReg[7:0] } ;
  assign hostAddrReg$EN = WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial ;

  // register newTransfer
  assign newTransfer$D_IN = !MUX_h2cStreamCurrReadAddr$write_1__SEL_1 ;
  assign newTransfer$EN =
	     WILL_FIRE_RL_generateH2CStreamDescriptor &&
	     (h2cStreamOutstandingReg[31:16] != 16'd0 || h2cStreamIrqArm) ||
	     WILL_FIRE_RL_dequeueH2CStreamCmd ;

  // register resetCount
  assign resetCount$D_IN =
	     MUX_resetCount$write_1__SEL_1 ?
	       MUX_resetCount$write_1__VAL_1 :
	       8'd0 ;
  assign resetCount$EN =
	     dmaResetActive && resetCount != 8'd128 ||
	     WILL_FIRE_RL_startReset ;

  // register transferLenReg
  assign transferLenReg$D_IN =
	     { axiCtrlSlave_writeSlave_in$D_OUT[10] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[74:67] :
		 transferLenReg[63:56],
	       axiCtrlSlave_writeSlave_in$D_OUT[9] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[66:59] :
		 transferLenReg[55:48],
	       axiCtrlSlave_writeSlave_in$D_OUT[8] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[58:51] :
		 transferLenReg[47:40],
	       axiCtrlSlave_writeSlave_in$D_OUT[7] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[50:43] :
		 transferLenReg[39:32],
	       axiCtrlSlave_writeSlave_in$D_OUT[6] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[42:35] :
		 transferLenReg[31:24],
	       axiCtrlSlave_writeSlave_in$D_OUT[5] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[34:27] :
		 transferLenReg[23:16],
	       axiCtrlSlave_writeSlave_in$D_OUT[4] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[26:19] :
		 transferLenReg[15:8],
	       axiCtrlSlave_writeSlave_in$D_OUT[3] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[18:11] :
		 transferLenReg[7:0] } ;
  assign transferLenReg$EN = WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 ;

  // submodule axiCtrlSlave_readSlave_in
  assign axiCtrlSlave_readSlave_in$D_IN =
	     { S_AXI_CTRL_araddr, S_AXI_CTRL_arprot } ;
  assign axiCtrlSlave_readSlave_in$ENQ =
	     axiCtrlSlave_readSlave_in$FULL_N &&
	     !axiCtrlSlave_readSlave_isRst_isInReset &&
	     S_AXI_CTRL_arvalid ;
  assign axiCtrlSlave_readSlave_in$DEQ =
	     WILL_FIRE_RL_axiCtrlSlave_axiReadFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial ;
  assign axiCtrlSlave_readSlave_in$CLR = 1'b0 ;

  // submodule axiCtrlSlave_readSlave_out
  always@(WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_1 or
	  WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_2 or
	  WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_3 or
	  WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_4 or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__SEL_5 or
	  WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial:
	  axiCtrlSlave_readSlave_out$D_IN =
	      MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_1;
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1:
	  axiCtrlSlave_readSlave_out$D_IN =
	      MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_2;
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2:
	  axiCtrlSlave_readSlave_out$D_IN =
	      MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_3;
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5:
	  axiCtrlSlave_readSlave_out$D_IN =
	      MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_4;
      MUX_axiCtrlSlave_readSlave_out$enq_1__SEL_5:
	  axiCtrlSlave_readSlave_out$D_IN = 66'd0;
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3:
	  axiCtrlSlave_readSlave_out$D_IN = 66'h00000000379704000;
      default: axiCtrlSlave_readSlave_out$D_IN =
		   66'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign axiCtrlSlave_readSlave_out$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ;
  assign axiCtrlSlave_readSlave_out$DEQ =
	     axiCtrlSlave_readSlave_out$EMPTY_N &&
	     !axiCtrlSlave_readSlave_isRst_isInReset &&
	     S_AXI_CTRL_rready ;
  assign axiCtrlSlave_readSlave_out$CLR = 1'b0 ;

  // submodule axiCtrlSlave_writeSlave_in
  assign axiCtrlSlave_writeSlave_in$D_IN =
	     { axiCtrlSlave_writeSlave_addrIn_rv$port1__read[14:3],
	       axiCtrlSlave_writeSlave_dataIn_rv$port1__read[71:0],
	       axiCtrlSlave_writeSlave_addrIn_rv$port1__read[2:0] } ;
  assign axiCtrlSlave_writeSlave_in$ENQ =
	     axiCtrlSlave_writeSlave_addrIn_rv$port1__read[15] &&
	     axiCtrlSlave_writeSlave_dataIn_rv$port1__read[72] &&
	     axiCtrlSlave_writeSlave_in$FULL_N ;
  assign axiCtrlSlave_writeSlave_in$DEQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial ;
  assign axiCtrlSlave_writeSlave_in$CLR = 1'b0 ;

  // submodule axiCtrlSlave_writeSlave_out
  assign axiCtrlSlave_writeSlave_out$D_IN = 2'd0 ;
  assign axiCtrlSlave_writeSlave_out$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial ;
  assign axiCtrlSlave_writeSlave_out$DEQ =
	     axiCtrlSlave_writeSlave_out$EMPTY_N &&
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     S_AXI_CTRL_bready ;
  assign axiCtrlSlave_writeSlave_out$CLR = 1'b0 ;

  // submodule axisRd_in
  assign axisRd_in$D_IN = 581'h0 ;
  assign axisRd_in$ENQ = 1'b0 ;
  assign axisRd_in$DEQ = 1'b0 ;
  assign axisRd_in$CLR = 1'b0 ;

  // submodule axisRd_in_1
  assign axisRd_in_1$D_IN =
	     { S_AXIS_USER_tdata,
	       S_AXIS_USER_tkeep,
	       S_AXIS_USER_tDest,
	       S_AXIS_USER_tlast } ;
  assign axisRd_in_1$ENQ =
	     axisRd_in_1$FULL_N && !axisRd_isRst_isInReset &&
	     S_AXIS_USER_tvalid ;
  assign axisRd_in_1$DEQ = WILL_FIRE_RL_forwardC2HStreamPacket ;
  assign axisRd_in_1$CLR = 1'b0 ;

  // submodule axisWr_out
  assign axisWr_out$D_IN = 581'h0 ;
  assign axisWr_out$ENQ = 1'b0 ;
  assign axisWr_out$DEQ = 1'b0 ;
  assign axisWr_out$CLR = 1'b0 ;

  // submodule axisWr_out_1
  assign axisWr_out_1$D_IN =
	     { h2cRx_pkgFifo$D_OUT[630:119],
	       68'hFFFFFFFFFFFFFFFF0,
	       h2cRx_pkgFifo$D_OUT[118] } ;
  assign axisWr_out_1$ENQ = h2cRx_pkgFifo$EMPTY_N && axisWr_out_1$FULL_N ;
  assign axisWr_out_1$DEQ =
	     axisWr_out_1$EMPTY_N && !axisWr_isRst_isInReset &&
	     M_AXIS_USER_tready ;
  assign axisWr_out_1$CLR = 1'b0 ;

  // submodule c2hBurstFifo
  assign c2hBurstFifo$D_IN =
	     { burst_beats__h22638,
	       c2hStreamOutstandingReg[31:15] == 17'd0 ||
	       c2hStreamOutstandingReg == 32'd32768 } ;
  assign c2hBurstFifo$ENQ = WILL_FIRE_RL_generateC2HStreamDescriptor ;
  assign c2hBurstFifo$DEQ =
	     WILL_FIRE_RL_forwardC2HStreamPacket &&
	     c2hBurstCount_21_EQ_c2hBurstFifo_first__22_BIT_ETC___d525 ;
  assign c2hBurstFifo$CLR = 1'b0 ;

  // submodule c2hCmdFifo
  assign c2hCmdFifo$D_IN =
	     { fpgaAddrReg, hostAddrReg, transferLenReg[31:0] } ;
  assign c2hCmdFifo$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	     axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF &&
	     axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10001000 ;
  assign c2hCmdFifo$DEQ = WILL_FIRE_RL_dequeueC2HCmd ;
  assign c2hCmdFifo$CLR = 1'b0 ;

  // submodule c2hCmptTx_pkgFifo
  assign c2hCmptTx_pkgFifo$D_IN = 135'd376 ;
  assign c2hCmptTx_pkgFifo$ENQ =
	     WILL_FIRE_RL_forwardC2HStreamPacket &&
	     c2hBurstCount_21_EQ_c2hBurstFifo_first__22_BIT_ETC___d525 ;
  assign c2hCmptTx_pkgFifo$DEQ =
	     c2hCmptTx_pkgFifo$EMPTY_N && m_axis_c2h_cmpt_tready ;
  assign c2hCmptTx_pkgFifo$CLR = 1'b0 ;

  // submodule c2hDescriptorTransmitter_descriptorFifo
  assign c2hDescriptorTransmitter_descriptorFifo$D_IN =
	     { c2hCurrReadAddr,
	       c2hCurrWriteAddr,
	       transferLen__h21486,
	       c2hOutstandingReg[31:16] == 16'd0,
	       40'd0 } ;
  assign c2hDescriptorTransmitter_descriptorFifo$ENQ =
	     MUX_c2hCurrReadAddr$write_1__SEL_1 ;
  assign c2hDescriptorTransmitter_descriptorFifo$DEQ =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2h_byp_in_rdy ;
  assign c2hDescriptorTransmitter_descriptorFifo$CLR = 1'b0 ;

  // submodule c2hStreamCmdFifo
  assign c2hStreamCmdFifo$D_IN = { hostAddrReg, transferLenReg[31:0] } ;
  assign c2hStreamCmdFifo$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	     axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF &&
	     axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h01101000 ;
  assign c2hStreamCmdFifo$DEQ = WILL_FIRE_RL_dequeueC2HStreamCmd ;
  assign c2hStreamCmdFifo$CLR = 1'b0 ;

  // submodule c2hStreamDescriptorTransmitter_descriptorFifo
  assign c2hStreamDescriptorTransmitter_descriptorFifo$D_IN =
	     { c2hStreamCurrReadAddr, 23'd2048 } ;
  assign c2hStreamDescriptorTransmitter_descriptorFifo$ENQ =
	     WILL_FIRE_RL_generateC2HStreamDescriptor ;
  assign c2hStreamDescriptorTransmitter_descriptorFifo$DEQ =
	     c2hStreamDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2h_byp_st_rdy ;
  assign c2hStreamDescriptorTransmitter_descriptorFifo$CLR = 1'b0 ;

  // submodule c2hTx_pkgFifo
  assign c2hTx_pkgFifo$D_IN =
	     { axisRd_in_1$D_OUT[580:69],
	       c2hBurstCount_21_EQ_c2hBurstFifo_first__22_BIT_ETC___d525,
	       out_dpar__h23395,
	       7'd0,
	       !c2hBurstFifo$D_OUT[0],
	       1'd0,
	       c2hBurstFifo$D_OUT[0],
	       out_len__h23400,
	       14'd8 } ;
  assign c2hTx_pkgFifo$ENQ = WILL_FIRE_RL_forwardC2HStreamPacket ;
  assign c2hTx_pkgFifo$DEQ = c2hTx_pkgFifo$EMPTY_N && m_axis_c2h_tready ;
  assign c2hTx_pkgFifo$CLR = 1'b0 ;

  // submodule creditReceiver_creditFifo
  assign creditReceiver_creditFifo$D_IN = creditReceiver_creditWire$wget ;
  assign creditReceiver_creditFifo$ENQ =
	     creditReceiver_creditFifo$FULL_N && tm_dsc_sts_vld ;
  assign creditReceiver_creditFifo$DEQ = creditReceiver_creditFifo$EMPTY_N ;
  assign creditReceiver_creditFifo$CLR = 1'b0 ;

  // submodule h2cCmdFifo
  assign h2cCmdFifo$D_IN =
	     { hostAddrReg, fpgaAddrReg, transferLenReg[31:0] } ;
  assign h2cCmdFifo$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	     axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF &&
	     axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10000001 ;
  assign h2cCmdFifo$DEQ = WILL_FIRE_RL_dequeueH2CCmd ;
  assign h2cCmdFifo$CLR = 1'b0 ;

  // submodule h2cDescriptorTransmitter_descriptorFifo
  assign h2cDescriptorTransmitter_descriptorFifo$D_IN =
	     { h2cCurrReadAddr,
	       h2cCurrWriteAddr,
	       transferLen__h22056,
	       h2cOutstandingReg[31:16] == 16'd0,
	       40'd0 } ;
  assign h2cDescriptorTransmitter_descriptorFifo$ENQ =
	     MUX_h2cCurrReadAddr$write_1__SEL_1 ;
  assign h2cDescriptorTransmitter_descriptorFifo$DEQ =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2c_byp_in_rdy ;
  assign h2cDescriptorTransmitter_descriptorFifo$CLR = 1'b0 ;

  // submodule h2cRx_pkgFifo
  assign h2cRx_pkgFifo$D_IN = h2cRx_pkgWire$wget ;
  assign h2cRx_pkgFifo$ENQ = h2cRx_pkgFifo$FULL_N && s_axis_h2c_tvalid ;
  assign h2cRx_pkgFifo$DEQ = h2cRx_pkgFifo$EMPTY_N && axisWr_out_1$FULL_N ;
  assign h2cRx_pkgFifo$CLR = 1'b0 ;

  // submodule h2cStreamCmdFifo
  assign h2cStreamCmdFifo$D_IN = { hostAddrReg, transferLenReg[31:0] } ;
  assign h2cStreamCmdFifo$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	     axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF &&
	     axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h01100001 ;
  assign h2cStreamCmdFifo$DEQ = WILL_FIRE_RL_dequeueH2CStreamCmd ;
  assign h2cStreamCmdFifo$CLR = 1'b0 ;

  // submodule h2cStreamDescriptorTransmitter_descriptorFifo
  assign h2cStreamDescriptorTransmitter_descriptorFifo$D_IN =
	     { h2cStreamCurrReadAddr,
	       transferLen__h22999,
	       2'd0,
	       h2cStreamOutstandingReg[31:16] == 16'd0,
	       1'd0,
	       newTransfer,
	       h2cStreamOutstandingReg[31:16] == 16'd0,
	       38'd134217728 } ;
  assign h2cStreamDescriptorTransmitter_descriptorFifo$ENQ =
	     MUX_h2cStreamCurrReadAddr$write_1__SEL_1 ;
  assign h2cStreamDescriptorTransmitter_descriptorFifo$DEQ =
	     h2cStreamDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2c_byp_st_rdy ;
  assign h2cStreamDescriptorTransmitter_descriptorFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign burstLen___1__h22691 = transferLen__h22615[15:6] + 10'd1 ;
  assign burst_beats__h22638 =
	     (transferLen__h22615[5:0] == 6'd0) ?
	       transferLen__h22615[15:6] :
	       burstLen___1__h22691 ;
  assign c2hBurstCount_21_EQ_c2hBurstFifo_first__22_BIT_ETC___d525 =
	     c2hBurstCount == c2hBurstFifo$D_OUT[10:1] - 10'd1 ;
  assign out_dpar__h23395 =
	     { ~x__h28509,
	       ~x__h28883,
	       ~x__h29238,
	       ~x__h29593,
	       ~x__h29948,
	       ~x__h30303,
	       ~x__h30658,
	       ~x__h31013,
	       ~x__h31368,
	       ~x__h31723,
	       ~x__h32078,
	       ~x__h32433,
	       ~x__h32788,
	       ~x__h33143,
	       ~x__h33498,
	       ~x__h33853,
	       ~x__h34208,
	       ~x__h34563,
	       ~x__h34918,
	       ~x__h35273,
	       ~x__h35628,
	       ~x__h35983,
	       ~x__h36338,
	       ~x__h36693,
	       ~x__h37048,
	       ~x__h37403,
	       ~x__h37758,
	       ~x__h38113,
	       ~x__h38468,
	       ~x__h38823,
	       ~x__h39178,
	       ~x__h39533,
	       ~x__h39888,
	       ~x__h40243,
	       ~x__h40598,
	       ~x__h40953,
	       ~x__h41308,
	       ~x__h41663,
	       ~x__h42018,
	       ~x__h42373,
	       ~x__h42728,
	       ~x__h43083,
	       ~x__h43438,
	       ~x__h43793,
	       ~x__h44148,
	       ~x__h44503,
	       ~x__h44858,
	       ~x__h45213,
	       ~x__h45568,
	       ~x__h45923,
	       ~x__h46278,
	       ~x__h46633,
	       ~x__h46988,
	       ~x__h47343,
	       ~x__h47698,
	       ~x__h48053,
	       ~x__h48408,
	       ~x__h48763,
	       ~x__h49118,
	       ~x__h49473,
	       ~x__h49828,
	       ~x__h50183,
	       ~x__h50538,
	       ~x__h50893 } ;
  assign out_len__h23400 = { c2hBurstFifo$D_OUT[10:1], 6'd0 } ;
  assign transferLen__h21486 =
	     (c2hOutstandingReg[31:16] == 16'd0) ?
	       c2hOutstandingReg[15:0] :
	       16'h8000 ;
  assign transferLen__h22056 =
	     (h2cOutstandingReg[31:16] == 16'd0) ?
	       h2cOutstandingReg[15:0] :
	       16'h8000 ;
  assign transferLen__h22615 =
	     (c2hStreamOutstandingReg[31:15] == 17'd0 ||
	      c2hStreamOutstandingReg == 32'd32768) ?
	       c2hStreamOutstandingReg[15:0] :
	       16'h8000 ;
  assign transferLen__h22999 =
	     (h2cStreamOutstandingReg[31:16] == 16'd0) ?
	       h2cStreamOutstandingReg[15:0] :
	       16'h8000 ;
  assign v__h13722 = { 63'd0, dmaResetActive } ;
  assign x__h28509 = x__h28609 ^ axisRd_in_1$D_OUT[580] ;
  assign x__h28609 = x__h28613 ^ axisRd_in_1$D_OUT[579] ;
  assign x__h28613 = x__h28617 ^ axisRd_in_1$D_OUT[578] ;
  assign x__h28617 = x__h28621 ^ axisRd_in_1$D_OUT[577] ;
  assign x__h28621 = x__h28625 ^ axisRd_in_1$D_OUT[576] ;
  assign x__h28625 = x__h28629 ^ axisRd_in_1$D_OUT[575] ;
  assign x__h28629 = axisRd_in_1$D_OUT[573] ^ axisRd_in_1$D_OUT[574] ;
  assign x__h28883 = x__h28966 ^ axisRd_in_1$D_OUT[572] ;
  assign x__h28966 = x__h28970 ^ axisRd_in_1$D_OUT[571] ;
  assign x__h28970 = x__h28974 ^ axisRd_in_1$D_OUT[570] ;
  assign x__h28974 = x__h28978 ^ axisRd_in_1$D_OUT[569] ;
  assign x__h28978 = x__h28982 ^ axisRd_in_1$D_OUT[568] ;
  assign x__h28982 = x__h28986 ^ axisRd_in_1$D_OUT[567] ;
  assign x__h28986 = axisRd_in_1$D_OUT[565] ^ axisRd_in_1$D_OUT[566] ;
  assign x__h29238 = x__h29321 ^ axisRd_in_1$D_OUT[564] ;
  assign x__h29321 = x__h29325 ^ axisRd_in_1$D_OUT[563] ;
  assign x__h29325 = x__h29329 ^ axisRd_in_1$D_OUT[562] ;
  assign x__h29329 = x__h29333 ^ axisRd_in_1$D_OUT[561] ;
  assign x__h29333 = x__h29337 ^ axisRd_in_1$D_OUT[560] ;
  assign x__h29337 = x__h29341 ^ axisRd_in_1$D_OUT[559] ;
  assign x__h29341 = axisRd_in_1$D_OUT[557] ^ axisRd_in_1$D_OUT[558] ;
  assign x__h29593 = x__h29676 ^ axisRd_in_1$D_OUT[556] ;
  assign x__h29676 = x__h29680 ^ axisRd_in_1$D_OUT[555] ;
  assign x__h29680 = x__h29684 ^ axisRd_in_1$D_OUT[554] ;
  assign x__h29684 = x__h29688 ^ axisRd_in_1$D_OUT[553] ;
  assign x__h29688 = x__h29692 ^ axisRd_in_1$D_OUT[552] ;
  assign x__h29692 = x__h29696 ^ axisRd_in_1$D_OUT[551] ;
  assign x__h29696 = axisRd_in_1$D_OUT[549] ^ axisRd_in_1$D_OUT[550] ;
  assign x__h29948 = x__h30031 ^ axisRd_in_1$D_OUT[548] ;
  assign x__h30031 = x__h30035 ^ axisRd_in_1$D_OUT[547] ;
  assign x__h30035 = x__h30039 ^ axisRd_in_1$D_OUT[546] ;
  assign x__h30039 = x__h30043 ^ axisRd_in_1$D_OUT[545] ;
  assign x__h30043 = x__h30047 ^ axisRd_in_1$D_OUT[544] ;
  assign x__h30047 = x__h30051 ^ axisRd_in_1$D_OUT[543] ;
  assign x__h30051 = axisRd_in_1$D_OUT[541] ^ axisRd_in_1$D_OUT[542] ;
  assign x__h30303 = x__h30386 ^ axisRd_in_1$D_OUT[540] ;
  assign x__h30386 = x__h30390 ^ axisRd_in_1$D_OUT[539] ;
  assign x__h30390 = x__h30394 ^ axisRd_in_1$D_OUT[538] ;
  assign x__h30394 = x__h30398 ^ axisRd_in_1$D_OUT[537] ;
  assign x__h30398 = x__h30402 ^ axisRd_in_1$D_OUT[536] ;
  assign x__h30402 = x__h30406 ^ axisRd_in_1$D_OUT[535] ;
  assign x__h30406 = axisRd_in_1$D_OUT[533] ^ axisRd_in_1$D_OUT[534] ;
  assign x__h30658 = x__h30741 ^ axisRd_in_1$D_OUT[532] ;
  assign x__h30741 = x__h30745 ^ axisRd_in_1$D_OUT[531] ;
  assign x__h30745 = x__h30749 ^ axisRd_in_1$D_OUT[530] ;
  assign x__h30749 = x__h30753 ^ axisRd_in_1$D_OUT[529] ;
  assign x__h30753 = x__h30757 ^ axisRd_in_1$D_OUT[528] ;
  assign x__h30757 = x__h30761 ^ axisRd_in_1$D_OUT[527] ;
  assign x__h30761 = axisRd_in_1$D_OUT[525] ^ axisRd_in_1$D_OUT[526] ;
  assign x__h31013 = x__h31096 ^ axisRd_in_1$D_OUT[524] ;
  assign x__h31096 = x__h31100 ^ axisRd_in_1$D_OUT[523] ;
  assign x__h31100 = x__h31104 ^ axisRd_in_1$D_OUT[522] ;
  assign x__h31104 = x__h31108 ^ axisRd_in_1$D_OUT[521] ;
  assign x__h31108 = x__h31112 ^ axisRd_in_1$D_OUT[520] ;
  assign x__h31112 = x__h31116 ^ axisRd_in_1$D_OUT[519] ;
  assign x__h31116 = axisRd_in_1$D_OUT[517] ^ axisRd_in_1$D_OUT[518] ;
  assign x__h31368 = x__h31451 ^ axisRd_in_1$D_OUT[516] ;
  assign x__h31451 = x__h31455 ^ axisRd_in_1$D_OUT[515] ;
  assign x__h31455 = x__h31459 ^ axisRd_in_1$D_OUT[514] ;
  assign x__h31459 = x__h31463 ^ axisRd_in_1$D_OUT[513] ;
  assign x__h31463 = x__h31467 ^ axisRd_in_1$D_OUT[512] ;
  assign x__h31467 = x__h31471 ^ axisRd_in_1$D_OUT[511] ;
  assign x__h31471 = axisRd_in_1$D_OUT[509] ^ axisRd_in_1$D_OUT[510] ;
  assign x__h31723 = x__h31806 ^ axisRd_in_1$D_OUT[508] ;
  assign x__h31806 = x__h31810 ^ axisRd_in_1$D_OUT[507] ;
  assign x__h31810 = x__h31814 ^ axisRd_in_1$D_OUT[506] ;
  assign x__h31814 = x__h31818 ^ axisRd_in_1$D_OUT[505] ;
  assign x__h31818 = x__h31822 ^ axisRd_in_1$D_OUT[504] ;
  assign x__h31822 = x__h31826 ^ axisRd_in_1$D_OUT[503] ;
  assign x__h31826 = axisRd_in_1$D_OUT[501] ^ axisRd_in_1$D_OUT[502] ;
  assign x__h32078 = x__h32161 ^ axisRd_in_1$D_OUT[500] ;
  assign x__h32161 = x__h32165 ^ axisRd_in_1$D_OUT[499] ;
  assign x__h32165 = x__h32169 ^ axisRd_in_1$D_OUT[498] ;
  assign x__h32169 = x__h32173 ^ axisRd_in_1$D_OUT[497] ;
  assign x__h32173 = x__h32177 ^ axisRd_in_1$D_OUT[496] ;
  assign x__h32177 = x__h32181 ^ axisRd_in_1$D_OUT[495] ;
  assign x__h32181 = axisRd_in_1$D_OUT[493] ^ axisRd_in_1$D_OUT[494] ;
  assign x__h32433 = x__h32516 ^ axisRd_in_1$D_OUT[492] ;
  assign x__h32516 = x__h32520 ^ axisRd_in_1$D_OUT[491] ;
  assign x__h32520 = x__h32524 ^ axisRd_in_1$D_OUT[490] ;
  assign x__h32524 = x__h32528 ^ axisRd_in_1$D_OUT[489] ;
  assign x__h32528 = x__h32532 ^ axisRd_in_1$D_OUT[488] ;
  assign x__h32532 = x__h32536 ^ axisRd_in_1$D_OUT[487] ;
  assign x__h32536 = axisRd_in_1$D_OUT[485] ^ axisRd_in_1$D_OUT[486] ;
  assign x__h32788 = x__h32871 ^ axisRd_in_1$D_OUT[484] ;
  assign x__h32871 = x__h32875 ^ axisRd_in_1$D_OUT[483] ;
  assign x__h32875 = x__h32879 ^ axisRd_in_1$D_OUT[482] ;
  assign x__h32879 = x__h32883 ^ axisRd_in_1$D_OUT[481] ;
  assign x__h32883 = x__h32887 ^ axisRd_in_1$D_OUT[480] ;
  assign x__h32887 = x__h32891 ^ axisRd_in_1$D_OUT[479] ;
  assign x__h32891 = axisRd_in_1$D_OUT[477] ^ axisRd_in_1$D_OUT[478] ;
  assign x__h33143 = x__h33226 ^ axisRd_in_1$D_OUT[476] ;
  assign x__h33226 = x__h33230 ^ axisRd_in_1$D_OUT[475] ;
  assign x__h33230 = x__h33234 ^ axisRd_in_1$D_OUT[474] ;
  assign x__h33234 = x__h33238 ^ axisRd_in_1$D_OUT[473] ;
  assign x__h33238 = x__h33242 ^ axisRd_in_1$D_OUT[472] ;
  assign x__h33242 = x__h33246 ^ axisRd_in_1$D_OUT[471] ;
  assign x__h33246 = axisRd_in_1$D_OUT[469] ^ axisRd_in_1$D_OUT[470] ;
  assign x__h33498 = x__h33581 ^ axisRd_in_1$D_OUT[468] ;
  assign x__h33581 = x__h33585 ^ axisRd_in_1$D_OUT[467] ;
  assign x__h33585 = x__h33589 ^ axisRd_in_1$D_OUT[466] ;
  assign x__h33589 = x__h33593 ^ axisRd_in_1$D_OUT[465] ;
  assign x__h33593 = x__h33597 ^ axisRd_in_1$D_OUT[464] ;
  assign x__h33597 = x__h33601 ^ axisRd_in_1$D_OUT[463] ;
  assign x__h33601 = axisRd_in_1$D_OUT[461] ^ axisRd_in_1$D_OUT[462] ;
  assign x__h33853 = x__h33936 ^ axisRd_in_1$D_OUT[460] ;
  assign x__h33936 = x__h33940 ^ axisRd_in_1$D_OUT[459] ;
  assign x__h33940 = x__h33944 ^ axisRd_in_1$D_OUT[458] ;
  assign x__h33944 = x__h33948 ^ axisRd_in_1$D_OUT[457] ;
  assign x__h33948 = x__h33952 ^ axisRd_in_1$D_OUT[456] ;
  assign x__h33952 = x__h33956 ^ axisRd_in_1$D_OUT[455] ;
  assign x__h33956 = axisRd_in_1$D_OUT[453] ^ axisRd_in_1$D_OUT[454] ;
  assign x__h34208 = x__h34291 ^ axisRd_in_1$D_OUT[452] ;
  assign x__h34291 = x__h34295 ^ axisRd_in_1$D_OUT[451] ;
  assign x__h34295 = x__h34299 ^ axisRd_in_1$D_OUT[450] ;
  assign x__h34299 = x__h34303 ^ axisRd_in_1$D_OUT[449] ;
  assign x__h34303 = x__h34307 ^ axisRd_in_1$D_OUT[448] ;
  assign x__h34307 = x__h34311 ^ axisRd_in_1$D_OUT[447] ;
  assign x__h34311 = axisRd_in_1$D_OUT[445] ^ axisRd_in_1$D_OUT[446] ;
  assign x__h34563 = x__h34646 ^ axisRd_in_1$D_OUT[444] ;
  assign x__h34646 = x__h34650 ^ axisRd_in_1$D_OUT[443] ;
  assign x__h34650 = x__h34654 ^ axisRd_in_1$D_OUT[442] ;
  assign x__h34654 = x__h34658 ^ axisRd_in_1$D_OUT[441] ;
  assign x__h34658 = x__h34662 ^ axisRd_in_1$D_OUT[440] ;
  assign x__h34662 = x__h34666 ^ axisRd_in_1$D_OUT[439] ;
  assign x__h34666 = axisRd_in_1$D_OUT[437] ^ axisRd_in_1$D_OUT[438] ;
  assign x__h34918 = x__h35001 ^ axisRd_in_1$D_OUT[436] ;
  assign x__h35001 = x__h35005 ^ axisRd_in_1$D_OUT[435] ;
  assign x__h35005 = x__h35009 ^ axisRd_in_1$D_OUT[434] ;
  assign x__h35009 = x__h35013 ^ axisRd_in_1$D_OUT[433] ;
  assign x__h35013 = x__h35017 ^ axisRd_in_1$D_OUT[432] ;
  assign x__h35017 = x__h35021 ^ axisRd_in_1$D_OUT[431] ;
  assign x__h35021 = axisRd_in_1$D_OUT[429] ^ axisRd_in_1$D_OUT[430] ;
  assign x__h35273 = x__h35356 ^ axisRd_in_1$D_OUT[428] ;
  assign x__h35356 = x__h35360 ^ axisRd_in_1$D_OUT[427] ;
  assign x__h35360 = x__h35364 ^ axisRd_in_1$D_OUT[426] ;
  assign x__h35364 = x__h35368 ^ axisRd_in_1$D_OUT[425] ;
  assign x__h35368 = x__h35372 ^ axisRd_in_1$D_OUT[424] ;
  assign x__h35372 = x__h35376 ^ axisRd_in_1$D_OUT[423] ;
  assign x__h35376 = axisRd_in_1$D_OUT[421] ^ axisRd_in_1$D_OUT[422] ;
  assign x__h35628 = x__h35711 ^ axisRd_in_1$D_OUT[420] ;
  assign x__h35711 = x__h35715 ^ axisRd_in_1$D_OUT[419] ;
  assign x__h35715 = x__h35719 ^ axisRd_in_1$D_OUT[418] ;
  assign x__h35719 = x__h35723 ^ axisRd_in_1$D_OUT[417] ;
  assign x__h35723 = x__h35727 ^ axisRd_in_1$D_OUT[416] ;
  assign x__h35727 = x__h35731 ^ axisRd_in_1$D_OUT[415] ;
  assign x__h35731 = axisRd_in_1$D_OUT[413] ^ axisRd_in_1$D_OUT[414] ;
  assign x__h35983 = x__h36066 ^ axisRd_in_1$D_OUT[412] ;
  assign x__h36066 = x__h36070 ^ axisRd_in_1$D_OUT[411] ;
  assign x__h36070 = x__h36074 ^ axisRd_in_1$D_OUT[410] ;
  assign x__h36074 = x__h36078 ^ axisRd_in_1$D_OUT[409] ;
  assign x__h36078 = x__h36082 ^ axisRd_in_1$D_OUT[408] ;
  assign x__h36082 = x__h36086 ^ axisRd_in_1$D_OUT[407] ;
  assign x__h36086 = axisRd_in_1$D_OUT[405] ^ axisRd_in_1$D_OUT[406] ;
  assign x__h36338 = x__h36421 ^ axisRd_in_1$D_OUT[404] ;
  assign x__h36421 = x__h36425 ^ axisRd_in_1$D_OUT[403] ;
  assign x__h36425 = x__h36429 ^ axisRd_in_1$D_OUT[402] ;
  assign x__h36429 = x__h36433 ^ axisRd_in_1$D_OUT[401] ;
  assign x__h36433 = x__h36437 ^ axisRd_in_1$D_OUT[400] ;
  assign x__h36437 = x__h36441 ^ axisRd_in_1$D_OUT[399] ;
  assign x__h36441 = axisRd_in_1$D_OUT[397] ^ axisRd_in_1$D_OUT[398] ;
  assign x__h36693 = x__h36776 ^ axisRd_in_1$D_OUT[396] ;
  assign x__h36776 = x__h36780 ^ axisRd_in_1$D_OUT[395] ;
  assign x__h36780 = x__h36784 ^ axisRd_in_1$D_OUT[394] ;
  assign x__h36784 = x__h36788 ^ axisRd_in_1$D_OUT[393] ;
  assign x__h36788 = x__h36792 ^ axisRd_in_1$D_OUT[392] ;
  assign x__h36792 = x__h36796 ^ axisRd_in_1$D_OUT[391] ;
  assign x__h36796 = axisRd_in_1$D_OUT[389] ^ axisRd_in_1$D_OUT[390] ;
  assign x__h37048 = x__h37131 ^ axisRd_in_1$D_OUT[388] ;
  assign x__h37131 = x__h37135 ^ axisRd_in_1$D_OUT[387] ;
  assign x__h37135 = x__h37139 ^ axisRd_in_1$D_OUT[386] ;
  assign x__h37139 = x__h37143 ^ axisRd_in_1$D_OUT[385] ;
  assign x__h37143 = x__h37147 ^ axisRd_in_1$D_OUT[384] ;
  assign x__h37147 = x__h37151 ^ axisRd_in_1$D_OUT[383] ;
  assign x__h37151 = axisRd_in_1$D_OUT[381] ^ axisRd_in_1$D_OUT[382] ;
  assign x__h37403 = x__h37486 ^ axisRd_in_1$D_OUT[380] ;
  assign x__h37486 = x__h37490 ^ axisRd_in_1$D_OUT[379] ;
  assign x__h37490 = x__h37494 ^ axisRd_in_1$D_OUT[378] ;
  assign x__h37494 = x__h37498 ^ axisRd_in_1$D_OUT[377] ;
  assign x__h37498 = x__h37502 ^ axisRd_in_1$D_OUT[376] ;
  assign x__h37502 = x__h37506 ^ axisRd_in_1$D_OUT[375] ;
  assign x__h37506 = axisRd_in_1$D_OUT[373] ^ axisRd_in_1$D_OUT[374] ;
  assign x__h37758 = x__h37841 ^ axisRd_in_1$D_OUT[372] ;
  assign x__h37841 = x__h37845 ^ axisRd_in_1$D_OUT[371] ;
  assign x__h37845 = x__h37849 ^ axisRd_in_1$D_OUT[370] ;
  assign x__h37849 = x__h37853 ^ axisRd_in_1$D_OUT[369] ;
  assign x__h37853 = x__h37857 ^ axisRd_in_1$D_OUT[368] ;
  assign x__h37857 = x__h37861 ^ axisRd_in_1$D_OUT[367] ;
  assign x__h37861 = axisRd_in_1$D_OUT[365] ^ axisRd_in_1$D_OUT[366] ;
  assign x__h38113 = x__h38196 ^ axisRd_in_1$D_OUT[364] ;
  assign x__h38196 = x__h38200 ^ axisRd_in_1$D_OUT[363] ;
  assign x__h38200 = x__h38204 ^ axisRd_in_1$D_OUT[362] ;
  assign x__h38204 = x__h38208 ^ axisRd_in_1$D_OUT[361] ;
  assign x__h38208 = x__h38212 ^ axisRd_in_1$D_OUT[360] ;
  assign x__h38212 = x__h38216 ^ axisRd_in_1$D_OUT[359] ;
  assign x__h38216 = axisRd_in_1$D_OUT[357] ^ axisRd_in_1$D_OUT[358] ;
  assign x__h38468 = x__h38551 ^ axisRd_in_1$D_OUT[356] ;
  assign x__h38551 = x__h38555 ^ axisRd_in_1$D_OUT[355] ;
  assign x__h38555 = x__h38559 ^ axisRd_in_1$D_OUT[354] ;
  assign x__h38559 = x__h38563 ^ axisRd_in_1$D_OUT[353] ;
  assign x__h38563 = x__h38567 ^ axisRd_in_1$D_OUT[352] ;
  assign x__h38567 = x__h38571 ^ axisRd_in_1$D_OUT[351] ;
  assign x__h38571 = axisRd_in_1$D_OUT[349] ^ axisRd_in_1$D_OUT[350] ;
  assign x__h38823 = x__h38906 ^ axisRd_in_1$D_OUT[348] ;
  assign x__h38906 = x__h38910 ^ axisRd_in_1$D_OUT[347] ;
  assign x__h38910 = x__h38914 ^ axisRd_in_1$D_OUT[346] ;
  assign x__h38914 = x__h38918 ^ axisRd_in_1$D_OUT[345] ;
  assign x__h38918 = x__h38922 ^ axisRd_in_1$D_OUT[344] ;
  assign x__h38922 = x__h38926 ^ axisRd_in_1$D_OUT[343] ;
  assign x__h38926 = axisRd_in_1$D_OUT[341] ^ axisRd_in_1$D_OUT[342] ;
  assign x__h39178 = x__h39261 ^ axisRd_in_1$D_OUT[340] ;
  assign x__h39261 = x__h39265 ^ axisRd_in_1$D_OUT[339] ;
  assign x__h39265 = x__h39269 ^ axisRd_in_1$D_OUT[338] ;
  assign x__h39269 = x__h39273 ^ axisRd_in_1$D_OUT[337] ;
  assign x__h39273 = x__h39277 ^ axisRd_in_1$D_OUT[336] ;
  assign x__h39277 = x__h39281 ^ axisRd_in_1$D_OUT[335] ;
  assign x__h39281 = axisRd_in_1$D_OUT[333] ^ axisRd_in_1$D_OUT[334] ;
  assign x__h39533 = x__h39616 ^ axisRd_in_1$D_OUT[332] ;
  assign x__h39616 = x__h39620 ^ axisRd_in_1$D_OUT[331] ;
  assign x__h39620 = x__h39624 ^ axisRd_in_1$D_OUT[330] ;
  assign x__h39624 = x__h39628 ^ axisRd_in_1$D_OUT[329] ;
  assign x__h39628 = x__h39632 ^ axisRd_in_1$D_OUT[328] ;
  assign x__h39632 = x__h39636 ^ axisRd_in_1$D_OUT[327] ;
  assign x__h39636 = axisRd_in_1$D_OUT[325] ^ axisRd_in_1$D_OUT[326] ;
  assign x__h39888 = x__h39971 ^ axisRd_in_1$D_OUT[324] ;
  assign x__h39971 = x__h39975 ^ axisRd_in_1$D_OUT[323] ;
  assign x__h39975 = x__h39979 ^ axisRd_in_1$D_OUT[322] ;
  assign x__h39979 = x__h39983 ^ axisRd_in_1$D_OUT[321] ;
  assign x__h39983 = x__h39987 ^ axisRd_in_1$D_OUT[320] ;
  assign x__h39987 = x__h39991 ^ axisRd_in_1$D_OUT[319] ;
  assign x__h39991 = axisRd_in_1$D_OUT[317] ^ axisRd_in_1$D_OUT[318] ;
  assign x__h40243 = x__h40326 ^ axisRd_in_1$D_OUT[316] ;
  assign x__h40326 = x__h40330 ^ axisRd_in_1$D_OUT[315] ;
  assign x__h40330 = x__h40334 ^ axisRd_in_1$D_OUT[314] ;
  assign x__h40334 = x__h40338 ^ axisRd_in_1$D_OUT[313] ;
  assign x__h40338 = x__h40342 ^ axisRd_in_1$D_OUT[312] ;
  assign x__h40342 = x__h40346 ^ axisRd_in_1$D_OUT[311] ;
  assign x__h40346 = axisRd_in_1$D_OUT[309] ^ axisRd_in_1$D_OUT[310] ;
  assign x__h40598 = x__h40681 ^ axisRd_in_1$D_OUT[308] ;
  assign x__h40681 = x__h40685 ^ axisRd_in_1$D_OUT[307] ;
  assign x__h40685 = x__h40689 ^ axisRd_in_1$D_OUT[306] ;
  assign x__h40689 = x__h40693 ^ axisRd_in_1$D_OUT[305] ;
  assign x__h40693 = x__h40697 ^ axisRd_in_1$D_OUT[304] ;
  assign x__h40697 = x__h40701 ^ axisRd_in_1$D_OUT[303] ;
  assign x__h40701 = axisRd_in_1$D_OUT[301] ^ axisRd_in_1$D_OUT[302] ;
  assign x__h40953 = x__h41036 ^ axisRd_in_1$D_OUT[300] ;
  assign x__h41036 = x__h41040 ^ axisRd_in_1$D_OUT[299] ;
  assign x__h41040 = x__h41044 ^ axisRd_in_1$D_OUT[298] ;
  assign x__h41044 = x__h41048 ^ axisRd_in_1$D_OUT[297] ;
  assign x__h41048 = x__h41052 ^ axisRd_in_1$D_OUT[296] ;
  assign x__h41052 = x__h41056 ^ axisRd_in_1$D_OUT[295] ;
  assign x__h41056 = axisRd_in_1$D_OUT[293] ^ axisRd_in_1$D_OUT[294] ;
  assign x__h41308 = x__h41391 ^ axisRd_in_1$D_OUT[292] ;
  assign x__h41391 = x__h41395 ^ axisRd_in_1$D_OUT[291] ;
  assign x__h41395 = x__h41399 ^ axisRd_in_1$D_OUT[290] ;
  assign x__h41399 = x__h41403 ^ axisRd_in_1$D_OUT[289] ;
  assign x__h41403 = x__h41407 ^ axisRd_in_1$D_OUT[288] ;
  assign x__h41407 = x__h41411 ^ axisRd_in_1$D_OUT[287] ;
  assign x__h41411 = axisRd_in_1$D_OUT[285] ^ axisRd_in_1$D_OUT[286] ;
  assign x__h41663 = x__h41746 ^ axisRd_in_1$D_OUT[284] ;
  assign x__h41746 = x__h41750 ^ axisRd_in_1$D_OUT[283] ;
  assign x__h41750 = x__h41754 ^ axisRd_in_1$D_OUT[282] ;
  assign x__h41754 = x__h41758 ^ axisRd_in_1$D_OUT[281] ;
  assign x__h41758 = x__h41762 ^ axisRd_in_1$D_OUT[280] ;
  assign x__h41762 = x__h41766 ^ axisRd_in_1$D_OUT[279] ;
  assign x__h41766 = axisRd_in_1$D_OUT[277] ^ axisRd_in_1$D_OUT[278] ;
  assign x__h42018 = x__h42101 ^ axisRd_in_1$D_OUT[276] ;
  assign x__h42101 = x__h42105 ^ axisRd_in_1$D_OUT[275] ;
  assign x__h42105 = x__h42109 ^ axisRd_in_1$D_OUT[274] ;
  assign x__h42109 = x__h42113 ^ axisRd_in_1$D_OUT[273] ;
  assign x__h42113 = x__h42117 ^ axisRd_in_1$D_OUT[272] ;
  assign x__h42117 = x__h42121 ^ axisRd_in_1$D_OUT[271] ;
  assign x__h42121 = axisRd_in_1$D_OUT[269] ^ axisRd_in_1$D_OUT[270] ;
  assign x__h42373 = x__h42456 ^ axisRd_in_1$D_OUT[268] ;
  assign x__h42456 = x__h42460 ^ axisRd_in_1$D_OUT[267] ;
  assign x__h42460 = x__h42464 ^ axisRd_in_1$D_OUT[266] ;
  assign x__h42464 = x__h42468 ^ axisRd_in_1$D_OUT[265] ;
  assign x__h42468 = x__h42472 ^ axisRd_in_1$D_OUT[264] ;
  assign x__h42472 = x__h42476 ^ axisRd_in_1$D_OUT[263] ;
  assign x__h42476 = axisRd_in_1$D_OUT[261] ^ axisRd_in_1$D_OUT[262] ;
  assign x__h42728 = x__h42811 ^ axisRd_in_1$D_OUT[260] ;
  assign x__h42811 = x__h42815 ^ axisRd_in_1$D_OUT[259] ;
  assign x__h42815 = x__h42819 ^ axisRd_in_1$D_OUT[258] ;
  assign x__h42819 = x__h42823 ^ axisRd_in_1$D_OUT[257] ;
  assign x__h42823 = x__h42827 ^ axisRd_in_1$D_OUT[256] ;
  assign x__h42827 = x__h42831 ^ axisRd_in_1$D_OUT[255] ;
  assign x__h42831 = axisRd_in_1$D_OUT[253] ^ axisRd_in_1$D_OUT[254] ;
  assign x__h43083 = x__h43166 ^ axisRd_in_1$D_OUT[252] ;
  assign x__h43166 = x__h43170 ^ axisRd_in_1$D_OUT[251] ;
  assign x__h43170 = x__h43174 ^ axisRd_in_1$D_OUT[250] ;
  assign x__h43174 = x__h43178 ^ axisRd_in_1$D_OUT[249] ;
  assign x__h43178 = x__h43182 ^ axisRd_in_1$D_OUT[248] ;
  assign x__h43182 = x__h43186 ^ axisRd_in_1$D_OUT[247] ;
  assign x__h43186 = axisRd_in_1$D_OUT[245] ^ axisRd_in_1$D_OUT[246] ;
  assign x__h43438 = x__h43521 ^ axisRd_in_1$D_OUT[244] ;
  assign x__h43521 = x__h43525 ^ axisRd_in_1$D_OUT[243] ;
  assign x__h43525 = x__h43529 ^ axisRd_in_1$D_OUT[242] ;
  assign x__h43529 = x__h43533 ^ axisRd_in_1$D_OUT[241] ;
  assign x__h43533 = x__h43537 ^ axisRd_in_1$D_OUT[240] ;
  assign x__h43537 = x__h43541 ^ axisRd_in_1$D_OUT[239] ;
  assign x__h43541 = axisRd_in_1$D_OUT[237] ^ axisRd_in_1$D_OUT[238] ;
  assign x__h43793 = x__h43876 ^ axisRd_in_1$D_OUT[236] ;
  assign x__h43876 = x__h43880 ^ axisRd_in_1$D_OUT[235] ;
  assign x__h43880 = x__h43884 ^ axisRd_in_1$D_OUT[234] ;
  assign x__h43884 = x__h43888 ^ axisRd_in_1$D_OUT[233] ;
  assign x__h43888 = x__h43892 ^ axisRd_in_1$D_OUT[232] ;
  assign x__h43892 = x__h43896 ^ axisRd_in_1$D_OUT[231] ;
  assign x__h43896 = axisRd_in_1$D_OUT[229] ^ axisRd_in_1$D_OUT[230] ;
  assign x__h44148 = x__h44231 ^ axisRd_in_1$D_OUT[228] ;
  assign x__h44231 = x__h44235 ^ axisRd_in_1$D_OUT[227] ;
  assign x__h44235 = x__h44239 ^ axisRd_in_1$D_OUT[226] ;
  assign x__h44239 = x__h44243 ^ axisRd_in_1$D_OUT[225] ;
  assign x__h44243 = x__h44247 ^ axisRd_in_1$D_OUT[224] ;
  assign x__h44247 = x__h44251 ^ axisRd_in_1$D_OUT[223] ;
  assign x__h44251 = axisRd_in_1$D_OUT[221] ^ axisRd_in_1$D_OUT[222] ;
  assign x__h44503 = x__h44586 ^ axisRd_in_1$D_OUT[220] ;
  assign x__h44586 = x__h44590 ^ axisRd_in_1$D_OUT[219] ;
  assign x__h44590 = x__h44594 ^ axisRd_in_1$D_OUT[218] ;
  assign x__h44594 = x__h44598 ^ axisRd_in_1$D_OUT[217] ;
  assign x__h44598 = x__h44602 ^ axisRd_in_1$D_OUT[216] ;
  assign x__h44602 = x__h44606 ^ axisRd_in_1$D_OUT[215] ;
  assign x__h44606 = axisRd_in_1$D_OUT[213] ^ axisRd_in_1$D_OUT[214] ;
  assign x__h44858 = x__h44941 ^ axisRd_in_1$D_OUT[212] ;
  assign x__h44941 = x__h44945 ^ axisRd_in_1$D_OUT[211] ;
  assign x__h44945 = x__h44949 ^ axisRd_in_1$D_OUT[210] ;
  assign x__h44949 = x__h44953 ^ axisRd_in_1$D_OUT[209] ;
  assign x__h44953 = x__h44957 ^ axisRd_in_1$D_OUT[208] ;
  assign x__h44957 = x__h44961 ^ axisRd_in_1$D_OUT[207] ;
  assign x__h44961 = axisRd_in_1$D_OUT[205] ^ axisRd_in_1$D_OUT[206] ;
  assign x__h45213 = x__h45296 ^ axisRd_in_1$D_OUT[204] ;
  assign x__h45296 = x__h45300 ^ axisRd_in_1$D_OUT[203] ;
  assign x__h45300 = x__h45304 ^ axisRd_in_1$D_OUT[202] ;
  assign x__h45304 = x__h45308 ^ axisRd_in_1$D_OUT[201] ;
  assign x__h45308 = x__h45312 ^ axisRd_in_1$D_OUT[200] ;
  assign x__h45312 = x__h45316 ^ axisRd_in_1$D_OUT[199] ;
  assign x__h45316 = axisRd_in_1$D_OUT[197] ^ axisRd_in_1$D_OUT[198] ;
  assign x__h45568 = x__h45651 ^ axisRd_in_1$D_OUT[196] ;
  assign x__h45651 = x__h45655 ^ axisRd_in_1$D_OUT[195] ;
  assign x__h45655 = x__h45659 ^ axisRd_in_1$D_OUT[194] ;
  assign x__h45659 = x__h45663 ^ axisRd_in_1$D_OUT[193] ;
  assign x__h45663 = x__h45667 ^ axisRd_in_1$D_OUT[192] ;
  assign x__h45667 = x__h45671 ^ axisRd_in_1$D_OUT[191] ;
  assign x__h45671 = axisRd_in_1$D_OUT[189] ^ axisRd_in_1$D_OUT[190] ;
  assign x__h45923 = x__h46006 ^ axisRd_in_1$D_OUT[188] ;
  assign x__h46006 = x__h46010 ^ axisRd_in_1$D_OUT[187] ;
  assign x__h46010 = x__h46014 ^ axisRd_in_1$D_OUT[186] ;
  assign x__h46014 = x__h46018 ^ axisRd_in_1$D_OUT[185] ;
  assign x__h46018 = x__h46022 ^ axisRd_in_1$D_OUT[184] ;
  assign x__h46022 = x__h46026 ^ axisRd_in_1$D_OUT[183] ;
  assign x__h46026 = axisRd_in_1$D_OUT[181] ^ axisRd_in_1$D_OUT[182] ;
  assign x__h46278 = x__h46361 ^ axisRd_in_1$D_OUT[180] ;
  assign x__h46361 = x__h46365 ^ axisRd_in_1$D_OUT[179] ;
  assign x__h46365 = x__h46369 ^ axisRd_in_1$D_OUT[178] ;
  assign x__h46369 = x__h46373 ^ axisRd_in_1$D_OUT[177] ;
  assign x__h46373 = x__h46377 ^ axisRd_in_1$D_OUT[176] ;
  assign x__h46377 = x__h46381 ^ axisRd_in_1$D_OUT[175] ;
  assign x__h46381 = axisRd_in_1$D_OUT[173] ^ axisRd_in_1$D_OUT[174] ;
  assign x__h46633 = x__h46716 ^ axisRd_in_1$D_OUT[172] ;
  assign x__h46716 = x__h46720 ^ axisRd_in_1$D_OUT[171] ;
  assign x__h46720 = x__h46724 ^ axisRd_in_1$D_OUT[170] ;
  assign x__h46724 = x__h46728 ^ axisRd_in_1$D_OUT[169] ;
  assign x__h46728 = x__h46732 ^ axisRd_in_1$D_OUT[168] ;
  assign x__h46732 = x__h46736 ^ axisRd_in_1$D_OUT[167] ;
  assign x__h46736 = axisRd_in_1$D_OUT[165] ^ axisRd_in_1$D_OUT[166] ;
  assign x__h46988 = x__h47071 ^ axisRd_in_1$D_OUT[164] ;
  assign x__h47071 = x__h47075 ^ axisRd_in_1$D_OUT[163] ;
  assign x__h47075 = x__h47079 ^ axisRd_in_1$D_OUT[162] ;
  assign x__h47079 = x__h47083 ^ axisRd_in_1$D_OUT[161] ;
  assign x__h47083 = x__h47087 ^ axisRd_in_1$D_OUT[160] ;
  assign x__h47087 = x__h47091 ^ axisRd_in_1$D_OUT[159] ;
  assign x__h47091 = axisRd_in_1$D_OUT[157] ^ axisRd_in_1$D_OUT[158] ;
  assign x__h47343 = x__h47426 ^ axisRd_in_1$D_OUT[156] ;
  assign x__h47426 = x__h47430 ^ axisRd_in_1$D_OUT[155] ;
  assign x__h47430 = x__h47434 ^ axisRd_in_1$D_OUT[154] ;
  assign x__h47434 = x__h47438 ^ axisRd_in_1$D_OUT[153] ;
  assign x__h47438 = x__h47442 ^ axisRd_in_1$D_OUT[152] ;
  assign x__h47442 = x__h47446 ^ axisRd_in_1$D_OUT[151] ;
  assign x__h47446 = axisRd_in_1$D_OUT[149] ^ axisRd_in_1$D_OUT[150] ;
  assign x__h47698 = x__h47781 ^ axisRd_in_1$D_OUT[148] ;
  assign x__h47781 = x__h47785 ^ axisRd_in_1$D_OUT[147] ;
  assign x__h47785 = x__h47789 ^ axisRd_in_1$D_OUT[146] ;
  assign x__h47789 = x__h47793 ^ axisRd_in_1$D_OUT[145] ;
  assign x__h47793 = x__h47797 ^ axisRd_in_1$D_OUT[144] ;
  assign x__h47797 = x__h47801 ^ axisRd_in_1$D_OUT[143] ;
  assign x__h47801 = axisRd_in_1$D_OUT[141] ^ axisRd_in_1$D_OUT[142] ;
  assign x__h48053 = x__h48136 ^ axisRd_in_1$D_OUT[140] ;
  assign x__h48136 = x__h48140 ^ axisRd_in_1$D_OUT[139] ;
  assign x__h48140 = x__h48144 ^ axisRd_in_1$D_OUT[138] ;
  assign x__h48144 = x__h48148 ^ axisRd_in_1$D_OUT[137] ;
  assign x__h48148 = x__h48152 ^ axisRd_in_1$D_OUT[136] ;
  assign x__h48152 = x__h48156 ^ axisRd_in_1$D_OUT[135] ;
  assign x__h48156 = axisRd_in_1$D_OUT[133] ^ axisRd_in_1$D_OUT[134] ;
  assign x__h48408 = x__h48491 ^ axisRd_in_1$D_OUT[132] ;
  assign x__h48491 = x__h48495 ^ axisRd_in_1$D_OUT[131] ;
  assign x__h48495 = x__h48499 ^ axisRd_in_1$D_OUT[130] ;
  assign x__h48499 = x__h48503 ^ axisRd_in_1$D_OUT[129] ;
  assign x__h48503 = x__h48507 ^ axisRd_in_1$D_OUT[128] ;
  assign x__h48507 = x__h48511 ^ axisRd_in_1$D_OUT[127] ;
  assign x__h48511 = axisRd_in_1$D_OUT[125] ^ axisRd_in_1$D_OUT[126] ;
  assign x__h48763 = x__h48846 ^ axisRd_in_1$D_OUT[124] ;
  assign x__h48846 = x__h48850 ^ axisRd_in_1$D_OUT[123] ;
  assign x__h48850 = x__h48854 ^ axisRd_in_1$D_OUT[122] ;
  assign x__h48854 = x__h48858 ^ axisRd_in_1$D_OUT[121] ;
  assign x__h48858 = x__h48862 ^ axisRd_in_1$D_OUT[120] ;
  assign x__h48862 = x__h48866 ^ axisRd_in_1$D_OUT[119] ;
  assign x__h48866 = axisRd_in_1$D_OUT[117] ^ axisRd_in_1$D_OUT[118] ;
  assign x__h49118 = x__h49201 ^ axisRd_in_1$D_OUT[116] ;
  assign x__h49201 = x__h49205 ^ axisRd_in_1$D_OUT[115] ;
  assign x__h49205 = x__h49209 ^ axisRd_in_1$D_OUT[114] ;
  assign x__h49209 = x__h49213 ^ axisRd_in_1$D_OUT[113] ;
  assign x__h49213 = x__h49217 ^ axisRd_in_1$D_OUT[112] ;
  assign x__h49217 = x__h49221 ^ axisRd_in_1$D_OUT[111] ;
  assign x__h49221 = axisRd_in_1$D_OUT[109] ^ axisRd_in_1$D_OUT[110] ;
  assign x__h49473 = x__h49556 ^ axisRd_in_1$D_OUT[108] ;
  assign x__h49556 = x__h49560 ^ axisRd_in_1$D_OUT[107] ;
  assign x__h49560 = x__h49564 ^ axisRd_in_1$D_OUT[106] ;
  assign x__h49564 = x__h49568 ^ axisRd_in_1$D_OUT[105] ;
  assign x__h49568 = x__h49572 ^ axisRd_in_1$D_OUT[104] ;
  assign x__h49572 = x__h49576 ^ axisRd_in_1$D_OUT[103] ;
  assign x__h49576 = axisRd_in_1$D_OUT[101] ^ axisRd_in_1$D_OUT[102] ;
  assign x__h49828 = x__h49911 ^ axisRd_in_1$D_OUT[100] ;
  assign x__h49911 = x__h49915 ^ axisRd_in_1$D_OUT[99] ;
  assign x__h49915 = x__h49919 ^ axisRd_in_1$D_OUT[98] ;
  assign x__h49919 = x__h49923 ^ axisRd_in_1$D_OUT[97] ;
  assign x__h49923 = x__h49927 ^ axisRd_in_1$D_OUT[96] ;
  assign x__h49927 = x__h49931 ^ axisRd_in_1$D_OUT[95] ;
  assign x__h49931 = axisRd_in_1$D_OUT[93] ^ axisRd_in_1$D_OUT[94] ;
  assign x__h50183 = x__h50266 ^ axisRd_in_1$D_OUT[92] ;
  assign x__h50266 = x__h50270 ^ axisRd_in_1$D_OUT[91] ;
  assign x__h50270 = x__h50274 ^ axisRd_in_1$D_OUT[90] ;
  assign x__h50274 = x__h50278 ^ axisRd_in_1$D_OUT[89] ;
  assign x__h50278 = x__h50282 ^ axisRd_in_1$D_OUT[88] ;
  assign x__h50282 = x__h50286 ^ axisRd_in_1$D_OUT[87] ;
  assign x__h50286 = axisRd_in_1$D_OUT[85] ^ axisRd_in_1$D_OUT[86] ;
  assign x__h50538 = x__h50621 ^ axisRd_in_1$D_OUT[84] ;
  assign x__h50621 = x__h50625 ^ axisRd_in_1$D_OUT[83] ;
  assign x__h50625 = x__h50629 ^ axisRd_in_1$D_OUT[82] ;
  assign x__h50629 = x__h50633 ^ axisRd_in_1$D_OUT[81] ;
  assign x__h50633 = x__h50637 ^ axisRd_in_1$D_OUT[80] ;
  assign x__h50637 = x__h50641 ^ axisRd_in_1$D_OUT[79] ;
  assign x__h50641 = axisRd_in_1$D_OUT[77] ^ axisRd_in_1$D_OUT[78] ;
  assign x__h50893 = x__h50976 ^ axisRd_in_1$D_OUT[76] ;
  assign x__h50976 = x__h50980 ^ axisRd_in_1$D_OUT[75] ;
  assign x__h50980 = x__h50984 ^ axisRd_in_1$D_OUT[74] ;
  assign x__h50984 = x__h50988 ^ axisRd_in_1$D_OUT[73] ;
  assign x__h50988 = x__h50992 ^ axisRd_in_1$D_OUT[72] ;
  assign x__h50992 = x__h50996 ^ axisRd_in_1$D_OUT[71] ;
  assign x__h50996 = axisRd_in_1$D_OUT[69] ^ axisRd_in_1$D_OUT[70] ;
  assign x__h51235 = c2hBurstCount + 10'd1 ;
  assign y__h21719 = { 16'd0, transferLen__h21486 } ;
  assign y__h21773 = { 48'd0, transferLen__h21486 } ;
  assign y__h22268 = { 16'd0, transferLen__h22056 } ;
  assign y__h22302 = { 48'd0, transferLen__h22056 } ;
  assign y__h22761 = { 16'd0, transferLen__h22615 } ;
  assign y__h23112 = { 16'd0, transferLen__h22999 } ;

  // handling of inlined registers

  always@(posedge aclk)
  begin
    if (resetn == `BSV_RESET_VALUE)
      begin
        axiCtrlSlave_readBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axiCtrlSlave_writeBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axiCtrlSlave_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY 16'd10922;
	axiCtrlSlave_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	c2hBurstCount <= `BSV_ASSIGNMENT_DELAY 10'd0;
	c2hCurrReadAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	c2hCurrWriteAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	c2hIrqArm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	c2hOutstandingReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c2hQueueEnable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	c2hStreamCurrReadAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	c2hStreamOutstandingReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c2hStreamQueueEnable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dmaResetActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fpgaAddrReg <= `BSV_ASSIGNMENT_DELAY 64'd0;
	h2cCurrReadAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	h2cCurrWriteAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	h2cIrqArm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h2cOutstandingReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h2cQueueEnable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h2cStreamCurrReadAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	h2cStreamIrqArm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h2cStreamOutstandingReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h2cStreamQueueEnable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hostAddrReg <= `BSV_ASSIGNMENT_DELAY 64'd0;
	newTransfer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	resetCount <= `BSV_ASSIGNMENT_DELAY 8'd0;
	transferLenReg <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (axiCtrlSlave_readBusy$EN)
	  axiCtrlSlave_readBusy <= `BSV_ASSIGNMENT_DELAY
	      axiCtrlSlave_readBusy$D_IN;
	if (axiCtrlSlave_writeBusy$EN)
	  axiCtrlSlave_writeBusy <= `BSV_ASSIGNMENT_DELAY
	      axiCtrlSlave_writeBusy$D_IN;
	if (axiCtrlSlave_writeSlave_addrIn_rv$EN)
	  axiCtrlSlave_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	      axiCtrlSlave_writeSlave_addrIn_rv$D_IN;
	if (axiCtrlSlave_writeSlave_dataIn_rv$EN)
	  axiCtrlSlave_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	      axiCtrlSlave_writeSlave_dataIn_rv$D_IN;
	if (c2hBurstCount$EN)
	  c2hBurstCount <= `BSV_ASSIGNMENT_DELAY c2hBurstCount$D_IN;
	if (c2hCurrReadAddr$EN)
	  c2hCurrReadAddr <= `BSV_ASSIGNMENT_DELAY c2hCurrReadAddr$D_IN;
	if (c2hCurrWriteAddr$EN)
	  c2hCurrWriteAddr <= `BSV_ASSIGNMENT_DELAY c2hCurrWriteAddr$D_IN;
	if (c2hIrqArm$EN) c2hIrqArm <= `BSV_ASSIGNMENT_DELAY c2hIrqArm$D_IN;
	if (c2hOutstandingReg$EN)
	  c2hOutstandingReg <= `BSV_ASSIGNMENT_DELAY c2hOutstandingReg$D_IN;
	if (c2hQueueEnable$EN)
	  c2hQueueEnable <= `BSV_ASSIGNMENT_DELAY c2hQueueEnable$D_IN;
	if (c2hStreamCurrReadAddr$EN)
	  c2hStreamCurrReadAddr <= `BSV_ASSIGNMENT_DELAY
	      c2hStreamCurrReadAddr$D_IN;
	if (c2hStreamOutstandingReg$EN)
	  c2hStreamOutstandingReg <= `BSV_ASSIGNMENT_DELAY
	      c2hStreamOutstandingReg$D_IN;
	if (c2hStreamQueueEnable$EN)
	  c2hStreamQueueEnable <= `BSV_ASSIGNMENT_DELAY
	      c2hStreamQueueEnable$D_IN;
	if (dmaResetActive$EN)
	  dmaResetActive <= `BSV_ASSIGNMENT_DELAY dmaResetActive$D_IN;
	if (fpgaAddrReg$EN)
	  fpgaAddrReg <= `BSV_ASSIGNMENT_DELAY fpgaAddrReg$D_IN;
	if (h2cCurrReadAddr$EN)
	  h2cCurrReadAddr <= `BSV_ASSIGNMENT_DELAY h2cCurrReadAddr$D_IN;
	if (h2cCurrWriteAddr$EN)
	  h2cCurrWriteAddr <= `BSV_ASSIGNMENT_DELAY h2cCurrWriteAddr$D_IN;
	if (h2cIrqArm$EN) h2cIrqArm <= `BSV_ASSIGNMENT_DELAY h2cIrqArm$D_IN;
	if (h2cOutstandingReg$EN)
	  h2cOutstandingReg <= `BSV_ASSIGNMENT_DELAY h2cOutstandingReg$D_IN;
	if (h2cQueueEnable$EN)
	  h2cQueueEnable <= `BSV_ASSIGNMENT_DELAY h2cQueueEnable$D_IN;
	if (h2cStreamCurrReadAddr$EN)
	  h2cStreamCurrReadAddr <= `BSV_ASSIGNMENT_DELAY
	      h2cStreamCurrReadAddr$D_IN;
	if (h2cStreamIrqArm$EN)
	  h2cStreamIrqArm <= `BSV_ASSIGNMENT_DELAY h2cStreamIrqArm$D_IN;
	if (h2cStreamOutstandingReg$EN)
	  h2cStreamOutstandingReg <= `BSV_ASSIGNMENT_DELAY
	      h2cStreamOutstandingReg$D_IN;
	if (h2cStreamQueueEnable$EN)
	  h2cStreamQueueEnable <= `BSV_ASSIGNMENT_DELAY
	      h2cStreamQueueEnable$D_IN;
	if (hostAddrReg$EN)
	  hostAddrReg <= `BSV_ASSIGNMENT_DELAY hostAddrReg$D_IN;
	if (newTransfer$EN)
	  newTransfer <= `BSV_ASSIGNMENT_DELAY newTransfer$D_IN;
	if (resetCount$EN)
	  resetCount <= `BSV_ASSIGNMENT_DELAY resetCount$D_IN;
	if (transferLenReg$EN)
	  transferLenReg <= `BSV_ASSIGNMENT_DELAY transferLenReg$D_IN;
      end
  end

  always@(posedge aclk or `BSV_RESET_EDGE resetn)
  if (resetn == `BSV_RESET_VALUE)
    begin
      axiCtrlSlave_readSlave_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      axiCtrlSlave_writeSlave_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      axisRd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      axisWr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (axiCtrlSlave_readSlave_isRst_isInReset$EN)
	axiCtrlSlave_readSlave_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    axiCtrlSlave_readSlave_isRst_isInReset$D_IN;
      if (axiCtrlSlave_writeSlave_isRst_isInReset$EN)
	axiCtrlSlave_writeSlave_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    axiCtrlSlave_writeSlave_isRst_isInReset$D_IN;
      if (axisRd_isRst_isInReset$EN)
	axisRd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    axisRd_isRst_isInReset$D_IN;
      if (axisWr_isRst_isInReset$EN)
	axisWr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    axisWr_isRst_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    axiCtrlSlave_readBusy = 1'h0;
    axiCtrlSlave_readSlave_isRst_isInReset = 1'h0;
    axiCtrlSlave_writeBusy = 1'h0;
    axiCtrlSlave_writeSlave_addrIn_rv = 16'hAAAA;
    axiCtrlSlave_writeSlave_dataIn_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    axiCtrlSlave_writeSlave_isRst_isInReset = 1'h0;
    axisRd_isRst_isInReset = 1'h0;
    axisWr_isRst_isInReset = 1'h0;
    c2hBurstCount = 10'h2AA;
    c2hCurrReadAddr = 64'hAAAAAAAAAAAAAAAA;
    c2hCurrWriteAddr = 64'hAAAAAAAAAAAAAAAA;
    c2hIrqArm = 1'h0;
    c2hOutstandingReg = 32'hAAAAAAAA;
    c2hQueueEnable = 1'h0;
    c2hStreamCurrReadAddr = 64'hAAAAAAAAAAAAAAAA;
    c2hStreamOutstandingReg = 32'hAAAAAAAA;
    c2hStreamQueueEnable = 1'h0;
    dmaResetActive = 1'h0;
    fpgaAddrReg = 64'hAAAAAAAAAAAAAAAA;
    h2cCurrReadAddr = 64'hAAAAAAAAAAAAAAAA;
    h2cCurrWriteAddr = 64'hAAAAAAAAAAAAAAAA;
    h2cIrqArm = 1'h0;
    h2cOutstandingReg = 32'hAAAAAAAA;
    h2cQueueEnable = 1'h0;
    h2cStreamCurrReadAddr = 64'hAAAAAAAAAAAAAAAA;
    h2cStreamIrqArm = 1'h0;
    h2cStreamOutstandingReg = 32'hAAAAAAAA;
    h2cStreamQueueEnable = 1'h0;
    hostAddrReg = 64'hAAAAAAAAAAAAAAAA;
    newTransfer = 1'h0;
    resetCount = 8'hAA;
    transferLenReg = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge aclk)
  begin
    #0;
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_axiCtrlSlave_axiReadSpecial_1,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_1] and\n  [RL_axiCtrlSlave_axiReadSpecial_2,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_2, RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3, RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_axiCtrlSlave_axiReadSpecial_2,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_2] and\n  [RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3, RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3] and\n  [RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4] and\n  [RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_axiCtrlSlave_axiReadSpecial,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled] and\n  [RL_axiCtrlSlave_axiReadSpecial_1,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_1, RL_axiCtrlSlave_axiReadSpecial_2,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_2, RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3, RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5) &&
	  WILL_FIRE_RL_axiCtrlSlave_axiReadFallback)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_axiCtrlSlave_axiReadSpecial,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled, RL_axiCtrlSlave_axiReadSpecial_1,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_1, RL_axiCtrlSlave_axiReadSpecial_2,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_2, RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3, RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] and\n  [RL_axiCtrlSlave_axiReadFallback] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  (axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h01100001 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h01101000 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10000001 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10001000) &&
	  axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods read and\n  write of module instance transferLenReg.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  (axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10000001 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10001000) &&
	  axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods read and\n  write of module instance fpgaAddrReg.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  (axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h01100001 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h01101000 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10000001 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10001000) &&
	  axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods read and write\n  of module instance hostAddrReg.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_3 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_3 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_3 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_3 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/QDMA-Streaming/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance axiCtrlSlave_writeSlave_out.\n");
  end
  // synopsys translate_on
endmodule  // mkQDMADescriptorGenerator

