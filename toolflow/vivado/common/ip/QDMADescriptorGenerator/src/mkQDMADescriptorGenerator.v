//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa)
//
// On Fri Jun 30 12:52:53 CEST 2023
//
//
// Ports:
// Name                         I/O  size props
// tm_dsc_sts_rdy                 O     1 reg
// c2h_byp_in_radr                O    64
// c2h_byp_in_wadr                O    64
// c2h_byp_in_len                 O    16
// c2h_byp_in_sdi                 O     1
// c2h_byp_in_mrkr_req            O     1
// c2h_byp_in_qid                 O    11
// c2h_byp_in_error               O     1
// c2h_byp_in_func                O     8
// c2h_byp_in_cidx                O    16
// c2h_byp_in_port_id             O     3
// c2h_byp_in_vld                 O     1 reg
// h2c_byp_in_radr                O    64
// h2c_byp_in_wadr                O    64
// h2c_byp_in_len                 O    16
// h2c_byp_in_sdi                 O     1
// h2c_byp_in_mrkr_req            O     1
// h2c_byp_in_qid                 O    11
// h2c_byp_in_error               O     1
// h2c_byp_in_func                O     8
// h2c_byp_in_cidx                O    16
// h2c_byp_in_port_id             O     3
// h2c_byp_in_vld                 O     1 reg
// c2h_byp_out_rdy                O     1 const
// h2c_byp_out_rdy                O     1 const
// S_AXI_CTRL_arready             O     1
// S_AXI_CTRL_rvalid              O     1
// S_AXI_CTRL_rdata               O    64
// S_AXI_CTRL_rresp               O     2
// S_AXI_CTRL_awready             O     1
// S_AXI_CTRL_wready              O     1
// S_AXI_CTRL_bvalid              O     1
// S_AXI_CTRL_bresp               O     2
// dma_resetn                     O     1
// aclk                           I     1 clock
// resetn                         I     1 reset
// tm_dsc_sts_vld                 I     1
// tm_dsc_sts_byp                 I     1 reg
// tm_dsc_sts_dir                 I     1 reg
// tm_dsc_sts_mm                  I     1 reg
// tm_dsc_sts_qid                 I    11 reg
// tm_dsc_sts_avl                 I    16 reg
// tm_dsc_sts_qinv                I     1 reg
// tm_dsc_sts_qen                 I     1 reg
// tm_dsc_sts_irq_arm             I     1 reg
// tm_dsc_sts_error               I     1 reg
// tm_dsc_sts_port_id             I     3 reg
// c2h_byp_in_rdy                 I     1
// h2c_byp_in_rdy                 I     1
// c2h_byp_out_vld                I     1 unused
// c2h_byp_out_dsc                I   256 unused
// c2h_byp_out_st_mm              I     1 unused
// c2h_byp_out_dsc_sz             I     2 unused
// c2h_byp_out_qid                I    11 unused
// c2h_byp_out_error              I     1 unused
// c2h_byp_out_func               I     8 unused
// c2h_byp_out_cidx               I    16 unused
// c2h_byp_out_port_id            I     3 unused
// c2h_byp_out_mrkr_rsp           I     1 unused
// h2c_byp_out_vld                I     1 unused
// h2c_byp_out_dsc                I   256 unused
// h2c_byp_out_st_mm              I     1 unused
// h2c_byp_out_dsc_sz             I     2 unused
// h2c_byp_out_qid                I    11 unused
// h2c_byp_out_error              I     1 unused
// h2c_byp_out_func               I     8 unused
// h2c_byp_out_cidx               I    16 unused
// h2c_byp_out_port_id            I     3 unused
// h2c_byp_out_mrkr_rsp           I     1 unused
// S_AXI_CTRL_arvalid             I     1
// S_AXI_CTRL_araddr              I    12 reg
// S_AXI_CTRL_arprot              I     3 reg
// S_AXI_CTRL_rready              I     1
// S_AXI_CTRL_awvalid             I     1
// S_AXI_CTRL_awaddr              I    12
// S_AXI_CTRL_awprot              I     3
// S_AXI_CTRL_wvalid              I     1
// S_AXI_CTRL_wdata               I    64
// S_AXI_CTRL_wstrb               I     8
// S_AXI_CTRL_bready              I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkQDMADescriptorGenerator(aclk,
				 resetn,

				 tm_dsc_sts_vld,
				 tm_dsc_sts_byp,
				 tm_dsc_sts_dir,
				 tm_dsc_sts_mm,
				 tm_dsc_sts_qid,
				 tm_dsc_sts_avl,
				 tm_dsc_sts_qinv,
				 tm_dsc_sts_qen,
				 tm_dsc_sts_irq_arm,
				 tm_dsc_sts_error,
				 tm_dsc_sts_port_id,

				 tm_dsc_sts_rdy,

				 c2h_byp_in_radr,

				 c2h_byp_in_wadr,

				 c2h_byp_in_len,

				 c2h_byp_in_sdi,

				 c2h_byp_in_mrkr_req,

				 c2h_byp_in_qid,

				 c2h_byp_in_error,

				 c2h_byp_in_func,

				 c2h_byp_in_cidx,

				 c2h_byp_in_port_id,

				 c2h_byp_in_vld,

				 c2h_byp_in_rdy,

				 h2c_byp_in_radr,

				 h2c_byp_in_wadr,

				 h2c_byp_in_len,

				 h2c_byp_in_sdi,

				 h2c_byp_in_mrkr_req,

				 h2c_byp_in_qid,

				 h2c_byp_in_error,

				 h2c_byp_in_func,

				 h2c_byp_in_cidx,

				 h2c_byp_in_port_id,

				 h2c_byp_in_vld,

				 h2c_byp_in_rdy,

				 c2h_byp_out_vld,
				 c2h_byp_out_dsc,
				 c2h_byp_out_st_mm,
				 c2h_byp_out_dsc_sz,
				 c2h_byp_out_qid,
				 c2h_byp_out_error,
				 c2h_byp_out_func,
				 c2h_byp_out_cidx,
				 c2h_byp_out_port_id,
				 c2h_byp_out_mrkr_rsp,

				 c2h_byp_out_rdy,

				 h2c_byp_out_vld,
				 h2c_byp_out_dsc,
				 h2c_byp_out_st_mm,
				 h2c_byp_out_dsc_sz,
				 h2c_byp_out_qid,
				 h2c_byp_out_error,
				 h2c_byp_out_func,
				 h2c_byp_out_cidx,
				 h2c_byp_out_port_id,
				 h2c_byp_out_mrkr_rsp,

				 h2c_byp_out_rdy,

				 S_AXI_CTRL_arready,

				 S_AXI_CTRL_arvalid,

				 S_AXI_CTRL_araddr,

				 S_AXI_CTRL_arprot,

				 S_AXI_CTRL_rvalid,

				 S_AXI_CTRL_rready,

				 S_AXI_CTRL_rdata,

				 S_AXI_CTRL_rresp,

				 S_AXI_CTRL_awready,

				 S_AXI_CTRL_awvalid,

				 S_AXI_CTRL_awaddr,

				 S_AXI_CTRL_awprot,

				 S_AXI_CTRL_wready,

				 S_AXI_CTRL_wvalid,

				 S_AXI_CTRL_wdata,

				 S_AXI_CTRL_wstrb,

				 S_AXI_CTRL_bvalid,

				 S_AXI_CTRL_bready,

				 S_AXI_CTRL_bresp,

				 dma_resetn);
  input  aclk;
  input  resetn;

  // action method creditIfc_acceptTMCredit
  input  tm_dsc_sts_vld;
  input  tm_dsc_sts_byp;
  input  tm_dsc_sts_dir;
  input  tm_dsc_sts_mm;
  input  [10 : 0] tm_dsc_sts_qid;
  input  [15 : 0] tm_dsc_sts_avl;
  input  tm_dsc_sts_qinv;
  input  tm_dsc_sts_qen;
  input  tm_dsc_sts_irq_arm;
  input  tm_dsc_sts_error;
  input  [2 : 0] tm_dsc_sts_port_id;

  // value method creditIfc_rdy
  output tm_dsc_sts_rdy;

  // value method c2hDescriptorTransmitIfc_radr
  output [63 : 0] c2h_byp_in_radr;

  // value method c2hDescriptorTransmitIfc_wadr
  output [63 : 0] c2h_byp_in_wadr;

  // value method c2hDescriptorTransmitIfc_len
  output [15 : 0] c2h_byp_in_len;

  // value method c2hDescriptorTransmitIfc_sdi
  output c2h_byp_in_sdi;

  // value method c2hDescriptorTransmitIfc_mrkr_req
  output c2h_byp_in_mrkr_req;

  // value method c2hDescriptorTransmitIfc_qid
  output [10 : 0] c2h_byp_in_qid;

  // value method c2hDescriptorTransmitIfc_error
  output c2h_byp_in_error;

  // value method c2hDescriptorTransmitIfc_func
  output [7 : 0] c2h_byp_in_func;

  // value method c2hDescriptorTransmitIfc_cidx
  output [15 : 0] c2h_byp_in_cidx;

  // value method c2hDescriptorTransmitIfc_port_id
  output [2 : 0] c2h_byp_in_port_id;

  // value method c2hDescriptorTransmitIfc_vld
  output c2h_byp_in_vld;

  // action method c2hDescriptorTransmitIfc_acceptRdy
  input  c2h_byp_in_rdy;

  // value method h2cDescriptorTransmitIfc_radr
  output [63 : 0] h2c_byp_in_radr;

  // value method h2cDescriptorTransmitIfc_wadr
  output [63 : 0] h2c_byp_in_wadr;

  // value method h2cDescriptorTransmitIfc_len
  output [15 : 0] h2c_byp_in_len;

  // value method h2cDescriptorTransmitIfc_sdi
  output h2c_byp_in_sdi;

  // value method h2cDescriptorTransmitIfc_mrkr_req
  output h2c_byp_in_mrkr_req;

  // value method h2cDescriptorTransmitIfc_qid
  output [10 : 0] h2c_byp_in_qid;

  // value method h2cDescriptorTransmitIfc_error
  output h2c_byp_in_error;

  // value method h2cDescriptorTransmitIfc_func
  output [7 : 0] h2c_byp_in_func;

  // value method h2cDescriptorTransmitIfc_cidx
  output [15 : 0] h2c_byp_in_cidx;

  // value method h2cDescriptorTransmitIfc_port_id
  output [2 : 0] h2c_byp_in_port_id;

  // value method h2cDescriptorTransmitIfc_vld
  output h2c_byp_in_vld;

  // action method h2cDescriptorTransmitIfc_acceptRdy
  input  h2c_byp_in_rdy;

  // action method c2hDescriptorReceiveIfc_acceptDescriptor
  input  c2h_byp_out_vld;
  input  [255 : 0] c2h_byp_out_dsc;
  input  c2h_byp_out_st_mm;
  input  [1 : 0] c2h_byp_out_dsc_sz;
  input  [10 : 0] c2h_byp_out_qid;
  input  c2h_byp_out_error;
  input  [7 : 0] c2h_byp_out_func;
  input  [15 : 0] c2h_byp_out_cidx;
  input  [2 : 0] c2h_byp_out_port_id;
  input  c2h_byp_out_mrkr_rsp;

  // value method c2hDescriptorReceiveIfc_rdy
  output c2h_byp_out_rdy;

  // action method h2cDescriptorReceiveIfc_acceptDescriptor
  input  h2c_byp_out_vld;
  input  [255 : 0] h2c_byp_out_dsc;
  input  h2c_byp_out_st_mm;
  input  [1 : 0] h2c_byp_out_dsc_sz;
  input  [10 : 0] h2c_byp_out_qid;
  input  h2c_byp_out_error;
  input  [7 : 0] h2c_byp_out_func;
  input  [15 : 0] h2c_byp_out_cidx;
  input  [2 : 0] h2c_byp_out_port_id;
  input  h2c_byp_out_mrkr_rsp;

  // value method h2cDescriptorReceiveIfc_rdy
  output h2c_byp_out_rdy;

  // value method axi_rd_fab_arready
  output S_AXI_CTRL_arready;

  // action method axi_rd_fab_parvalid
  input  S_AXI_CTRL_arvalid;

  // action method axi_rd_fab_paraddr
  input  [11 : 0] S_AXI_CTRL_araddr;

  // action method axi_rd_fab_parprot
  input  [2 : 0] S_AXI_CTRL_arprot;

  // value method axi_rd_fab_rvalid
  output S_AXI_CTRL_rvalid;

  // action method axi_rd_fab_prready
  input  S_AXI_CTRL_rready;

  // value method axi_rd_fab_rdata
  output [63 : 0] S_AXI_CTRL_rdata;

  // value method axi_rd_fab_rresp
  output [1 : 0] S_AXI_CTRL_rresp;

  // value method axi_wr_fab_awready
  output S_AXI_CTRL_awready;

  // action method axi_wr_fab_pawvalid
  input  S_AXI_CTRL_awvalid;

  // action method axi_wr_fab_pawaddr
  input  [11 : 0] S_AXI_CTRL_awaddr;

  // action method axi_wr_fab_pawprot
  input  [2 : 0] S_AXI_CTRL_awprot;

  // value method axi_wr_fab_wready
  output S_AXI_CTRL_wready;

  // action method axi_wr_fab_pwvalid
  input  S_AXI_CTRL_wvalid;

  // action method axi_wr_fab_pwdata
  input  [63 : 0] S_AXI_CTRL_wdata;

  // action method axi_wr_fab_pwstrb
  input  [7 : 0] S_AXI_CTRL_wstrb;

  // value method axi_wr_fab_bvalid
  output S_AXI_CTRL_bvalid;

  // action method axi_wr_fab_pbready
  input  S_AXI_CTRL_bready;

  // value method axi_wr_fab_bresp
  output [1 : 0] S_AXI_CTRL_bresp;

  // value method dma_resetn
  output dma_resetn;

  // signals for module outputs
  wire [63 : 0] S_AXI_CTRL_rdata,
		c2h_byp_in_radr,
		c2h_byp_in_wadr,
		h2c_byp_in_radr,
		h2c_byp_in_wadr;
  wire [15 : 0] c2h_byp_in_cidx,
		c2h_byp_in_len,
		h2c_byp_in_cidx,
		h2c_byp_in_len;
  wire [10 : 0] c2h_byp_in_qid, h2c_byp_in_qid;
  wire [7 : 0] c2h_byp_in_func, h2c_byp_in_func;
  wire [2 : 0] c2h_byp_in_port_id, h2c_byp_in_port_id;
  wire [1 : 0] S_AXI_CTRL_bresp, S_AXI_CTRL_rresp;
  wire S_AXI_CTRL_arready,
       S_AXI_CTRL_awready,
       S_AXI_CTRL_bvalid,
       S_AXI_CTRL_rvalid,
       S_AXI_CTRL_wready,
       c2h_byp_in_error,
       c2h_byp_in_mrkr_req,
       c2h_byp_in_sdi,
       c2h_byp_in_vld,
       c2h_byp_out_rdy,
       dma_resetn,
       h2c_byp_in_error,
       h2c_byp_in_mrkr_req,
       h2c_byp_in_sdi,
       h2c_byp_in_vld,
       h2c_byp_out_rdy,
       tm_dsc_sts_rdy;

  // inlined wires
  wire [72 : 0] axiCtrlSlave_writeSlave_dataIn_rv$port0__write_1,
		axiCtrlSlave_writeSlave_dataIn_rv$port1__read,
		axiCtrlSlave_writeSlave_dataIn_rv$port2__read;
  wire [36 : 0] creditReceiver_creditWire$wget;
  wire [15 : 0] axiCtrlSlave_writeSlave_addrIn_rv$port0__write_1,
		axiCtrlSlave_writeSlave_addrIn_rv$port1__read,
		axiCtrlSlave_writeSlave_addrIn_rv$port2__read;
  wire activateDmaResetWire$whas,
       axiCtrlSlave_readIsHandled$whas,
       axiCtrlSlave_writeIsHandled$whas,
       axiCtrlSlave_writeSlave_addrIn_rv$EN_port0__write,
       axiCtrlSlave_writeSlave_addrIn_rv$EN_port1__write,
       axiCtrlSlave_writeSlave_dataIn_rv$EN_port0__write,
       axiCtrlSlave_writeSlave_dataIn_rv$EN_port1__write;

  // register axiCtrlSlave_readBusy
  reg axiCtrlSlave_readBusy;
  wire axiCtrlSlave_readBusy$D_IN, axiCtrlSlave_readBusy$EN;

  // register axiCtrlSlave_readSlave_isRst_isInReset
  reg axiCtrlSlave_readSlave_isRst_isInReset;
  wire axiCtrlSlave_readSlave_isRst_isInReset$D_IN,
       axiCtrlSlave_readSlave_isRst_isInReset$EN;

  // register axiCtrlSlave_writeBusy
  reg axiCtrlSlave_writeBusy;
  wire axiCtrlSlave_writeBusy$D_IN, axiCtrlSlave_writeBusy$EN;

  // register axiCtrlSlave_writeSlave_addrIn_rv
  reg [15 : 0] axiCtrlSlave_writeSlave_addrIn_rv;
  wire [15 : 0] axiCtrlSlave_writeSlave_addrIn_rv$D_IN;
  wire axiCtrlSlave_writeSlave_addrIn_rv$EN;

  // register axiCtrlSlave_writeSlave_dataIn_rv
  reg [72 : 0] axiCtrlSlave_writeSlave_dataIn_rv;
  wire [72 : 0] axiCtrlSlave_writeSlave_dataIn_rv$D_IN;
  wire axiCtrlSlave_writeSlave_dataIn_rv$EN;

  // register axiCtrlSlave_writeSlave_isRst_isInReset
  reg axiCtrlSlave_writeSlave_isRst_isInReset;
  wire axiCtrlSlave_writeSlave_isRst_isInReset$D_IN,
       axiCtrlSlave_writeSlave_isRst_isInReset$EN;

  // register c2hCurrReadAddr
  reg [63 : 0] c2hCurrReadAddr;
  wire [63 : 0] c2hCurrReadAddr$D_IN;
  wire c2hCurrReadAddr$EN;

  // register c2hCurrWriteAddr
  reg [63 : 0] c2hCurrWriteAddr;
  wire [63 : 0] c2hCurrWriteAddr$D_IN;
  wire c2hCurrWriteAddr$EN;

  // register c2hIrqArm
  reg c2hIrqArm;
  wire c2hIrqArm$D_IN, c2hIrqArm$EN;

  // register c2hOutstandingReg
  reg [31 : 0] c2hOutstandingReg;
  wire [31 : 0] c2hOutstandingReg$D_IN;
  wire c2hOutstandingReg$EN;

  // register c2hQueueEnable
  reg c2hQueueEnable;
  wire c2hQueueEnable$D_IN, c2hQueueEnable$EN;

  // register dmaResetActive
  reg dmaResetActive;
  wire dmaResetActive$D_IN, dmaResetActive$EN;

  // register fpgaAddrReg
  reg [63 : 0] fpgaAddrReg;
  wire [63 : 0] fpgaAddrReg$D_IN;
  wire fpgaAddrReg$EN;

  // register h2cCurrReadAddr
  reg [63 : 0] h2cCurrReadAddr;
  wire [63 : 0] h2cCurrReadAddr$D_IN;
  wire h2cCurrReadAddr$EN;

  // register h2cCurrWriteAddr
  reg [63 : 0] h2cCurrWriteAddr;
  wire [63 : 0] h2cCurrWriteAddr$D_IN;
  wire h2cCurrWriteAddr$EN;

  // register h2cIrqArm
  reg h2cIrqArm;
  wire h2cIrqArm$D_IN, h2cIrqArm$EN;

  // register h2cOutstandingReg
  reg [31 : 0] h2cOutstandingReg;
  wire [31 : 0] h2cOutstandingReg$D_IN;
  wire h2cOutstandingReg$EN;

  // register h2cQueueEnable
  reg h2cQueueEnable;
  wire h2cQueueEnable$D_IN, h2cQueueEnable$EN;

  // register hostAddrReg
  reg [63 : 0] hostAddrReg;
  wire [63 : 0] hostAddrReg$D_IN;
  wire hostAddrReg$EN;

  // register resetCount
  reg [7 : 0] resetCount;
  wire [7 : 0] resetCount$D_IN;
  wire resetCount$EN;

  // register transferLenReg
  reg [63 : 0] transferLenReg;
  wire [63 : 0] transferLenReg$D_IN;
  wire transferLenReg$EN;

  // ports of submodule axiCtrlSlave_readSlave_in
  wire [14 : 0] axiCtrlSlave_readSlave_in$D_IN,
		axiCtrlSlave_readSlave_in$D_OUT;
  wire axiCtrlSlave_readSlave_in$CLR,
       axiCtrlSlave_readSlave_in$DEQ,
       axiCtrlSlave_readSlave_in$EMPTY_N,
       axiCtrlSlave_readSlave_in$ENQ,
       axiCtrlSlave_readSlave_in$FULL_N;

  // ports of submodule axiCtrlSlave_readSlave_out
  reg [65 : 0] axiCtrlSlave_readSlave_out$D_IN;
  wire [65 : 0] axiCtrlSlave_readSlave_out$D_OUT;
  wire axiCtrlSlave_readSlave_out$CLR,
       axiCtrlSlave_readSlave_out$DEQ,
       axiCtrlSlave_readSlave_out$EMPTY_N,
       axiCtrlSlave_readSlave_out$ENQ,
       axiCtrlSlave_readSlave_out$FULL_N;

  // ports of submodule axiCtrlSlave_writeSlave_in
  wire [86 : 0] axiCtrlSlave_writeSlave_in$D_IN,
		axiCtrlSlave_writeSlave_in$D_OUT;
  wire axiCtrlSlave_writeSlave_in$CLR,
       axiCtrlSlave_writeSlave_in$DEQ,
       axiCtrlSlave_writeSlave_in$EMPTY_N,
       axiCtrlSlave_writeSlave_in$ENQ,
       axiCtrlSlave_writeSlave_in$FULL_N;

  // ports of submodule axiCtrlSlave_writeSlave_out
  wire [1 : 0] axiCtrlSlave_writeSlave_out$D_IN,
	       axiCtrlSlave_writeSlave_out$D_OUT;
  wire axiCtrlSlave_writeSlave_out$CLR,
       axiCtrlSlave_writeSlave_out$DEQ,
       axiCtrlSlave_writeSlave_out$EMPTY_N,
       axiCtrlSlave_writeSlave_out$ENQ,
       axiCtrlSlave_writeSlave_out$FULL_N;

  // ports of submodule c2hCmdFifo
  wire [159 : 0] c2hCmdFifo$D_IN, c2hCmdFifo$D_OUT;
  wire c2hCmdFifo$CLR,
       c2hCmdFifo$DEQ,
       c2hCmdFifo$EMPTY_N,
       c2hCmdFifo$ENQ,
       c2hCmdFifo$FULL_N;

  // ports of submodule c2hDescriptorTransmitter_descriptorFifo
  wire [184 : 0] c2hDescriptorTransmitter_descriptorFifo$D_IN,
		 c2hDescriptorTransmitter_descriptorFifo$D_OUT;
  wire c2hDescriptorTransmitter_descriptorFifo$CLR,
       c2hDescriptorTransmitter_descriptorFifo$DEQ,
       c2hDescriptorTransmitter_descriptorFifo$EMPTY_N,
       c2hDescriptorTransmitter_descriptorFifo$ENQ,
       c2hDescriptorTransmitter_descriptorFifo$FULL_N;

  // ports of submodule creditReceiver_creditFifo
  wire [36 : 0] creditReceiver_creditFifo$D_IN,
		creditReceiver_creditFifo$D_OUT;
  wire creditReceiver_creditFifo$CLR,
       creditReceiver_creditFifo$DEQ,
       creditReceiver_creditFifo$EMPTY_N,
       creditReceiver_creditFifo$ENQ,
       creditReceiver_creditFifo$FULL_N;

  // ports of submodule h2cCmdFifo
  wire [159 : 0] h2cCmdFifo$D_IN, h2cCmdFifo$D_OUT;
  wire h2cCmdFifo$CLR,
       h2cCmdFifo$DEQ,
       h2cCmdFifo$EMPTY_N,
       h2cCmdFifo$ENQ,
       h2cCmdFifo$FULL_N;

  // ports of submodule h2cDescriptorTransmitter_descriptorFifo
  wire [184 : 0] h2cDescriptorTransmitter_descriptorFifo$D_IN,
		 h2cDescriptorTransmitter_descriptorFifo$D_OUT;
  wire h2cDescriptorTransmitter_descriptorFifo$CLR,
       h2cDescriptorTransmitter_descriptorFifo$DEQ,
       h2cDescriptorTransmitter_descriptorFifo$EMPTY_N,
       h2cDescriptorTransmitter_descriptorFifo$ENQ,
       h2cDescriptorTransmitter_descriptorFifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_axiCtrlSlave_1_axiWriteFallback,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3,
       WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4,
       WILL_FIRE_RL_axiCtrlSlave_axiReadFallback,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4,
       WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5,
       WILL_FIRE_RL_dequeueC2HCmd,
       WILL_FIRE_RL_dequeueH2CCmd,
       WILL_FIRE_RL_generateC2HDescriptor,
       WILL_FIRE_RL_generateH2CDescriptor,
       WILL_FIRE_RL_startReset;

  // inputs to muxes for submodule ports
  wire [65 : 0] MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_1,
		MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_2,
		MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_3,
		MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_4;
  wire [63 : 0] MUX_c2hCurrReadAddr$write_1__VAL_1,
		MUX_c2hCurrWriteAddr$write_1__VAL_1,
		MUX_h2cCurrReadAddr$write_1__VAL_1,
		MUX_h2cCurrWriteAddr$write_1__VAL_1;
  wire [31 : 0] MUX_c2hOutstandingReg$write_1__VAL_1,
		MUX_h2cOutstandingReg$write_1__VAL_1;
  wire [7 : 0] MUX_resetCount$write_1__VAL_1;
  wire MUX_axiCtrlSlave_readSlave_out$enq_1__SEL_5,
       MUX_c2hCurrReadAddr$write_1__SEL_1,
       MUX_c2hIrqArm$write_1__SEL_1,
       MUX_dmaResetActive$write_1__SEL_1,
       MUX_h2cCurrReadAddr$write_1__SEL_1,
       MUX_h2cIrqArm$write_1__SEL_1,
       MUX_resetCount$write_1__SEL_1;

  // remaining internal signals
  wire [63 : 0] v__h7832, y__h15622, y__h16151;
  wire [31 : 0] y__h15568, y__h16117;
  wire [15 : 0] transferLen__h15335, transferLen__h15905;

  // value method creditIfc_rdy
  assign tm_dsc_sts_rdy = creditReceiver_creditFifo$FULL_N ;

  // value method c2hDescriptorTransmitIfc_radr
  assign c2h_byp_in_radr =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[184:121] :
	       64'd0 ;

  // value method c2hDescriptorTransmitIfc_wadr
  assign c2h_byp_in_wadr =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[120:57] :
	       64'd0 ;

  // value method c2hDescriptorTransmitIfc_len
  assign c2h_byp_in_len =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[56:41] :
	       16'd0 ;

  // value method c2hDescriptorTransmitIfc_sdi
  assign c2h_byp_in_sdi =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2hDescriptorTransmitter_descriptorFifo$D_OUT[40] ;

  // value method c2hDescriptorTransmitIfc_mrkr_req
  assign c2h_byp_in_mrkr_req =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2hDescriptorTransmitter_descriptorFifo$D_OUT[39] ;

  // value method c2hDescriptorTransmitIfc_qid
  assign c2h_byp_in_qid =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[38:28] :
	       11'd0 ;

  // value method c2hDescriptorTransmitIfc_error
  assign c2h_byp_in_error =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2hDescriptorTransmitter_descriptorFifo$D_OUT[27] ;

  // value method c2hDescriptorTransmitIfc_func
  assign c2h_byp_in_func =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[26:19] :
	       8'd0 ;

  // value method c2hDescriptorTransmitIfc_cidx
  assign c2h_byp_in_cidx =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[18:3] :
	       16'd0 ;

  // value method c2hDescriptorTransmitIfc_port_id
  assign c2h_byp_in_port_id =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       c2hDescriptorTransmitter_descriptorFifo$D_OUT[2:0] :
	       3'd0 ;

  // value method c2hDescriptorTransmitIfc_vld
  assign c2h_byp_in_vld = c2hDescriptorTransmitter_descriptorFifo$EMPTY_N ;

  // value method h2cDescriptorTransmitIfc_radr
  assign h2c_byp_in_radr =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[184:121] :
	       64'd0 ;

  // value method h2cDescriptorTransmitIfc_wadr
  assign h2c_byp_in_wadr =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[120:57] :
	       64'd0 ;

  // value method h2cDescriptorTransmitIfc_len
  assign h2c_byp_in_len =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[56:41] :
	       16'd0 ;

  // value method h2cDescriptorTransmitIfc_sdi
  assign h2c_byp_in_sdi =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cDescriptorTransmitter_descriptorFifo$D_OUT[40] ;

  // value method h2cDescriptorTransmitIfc_mrkr_req
  assign h2c_byp_in_mrkr_req =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cDescriptorTransmitter_descriptorFifo$D_OUT[39] ;

  // value method h2cDescriptorTransmitIfc_qid
  assign h2c_byp_in_qid =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[38:28] :
	       11'd0 ;

  // value method h2cDescriptorTransmitIfc_error
  assign h2c_byp_in_error =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2cDescriptorTransmitter_descriptorFifo$D_OUT[27] ;

  // value method h2cDescriptorTransmitIfc_func
  assign h2c_byp_in_func =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[26:19] :
	       8'd0 ;

  // value method h2cDescriptorTransmitIfc_cidx
  assign h2c_byp_in_cidx =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[18:3] :
	       16'd0 ;

  // value method h2cDescriptorTransmitIfc_port_id
  assign h2c_byp_in_port_id =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ?
	       h2cDescriptorTransmitter_descriptorFifo$D_OUT[2:0] :
	       3'd0 ;

  // value method h2cDescriptorTransmitIfc_vld
  assign h2c_byp_in_vld = h2cDescriptorTransmitter_descriptorFifo$EMPTY_N ;

  // value method c2hDescriptorReceiveIfc_rdy
  assign c2h_byp_out_rdy = 1'd1 ;

  // value method h2cDescriptorReceiveIfc_rdy
  assign h2c_byp_out_rdy = 1'd1 ;

  // value method axi_rd_fab_arready
  assign S_AXI_CTRL_arready =
	     !axiCtrlSlave_readSlave_isRst_isInReset &&
	     axiCtrlSlave_readSlave_in$FULL_N ;

  // value method axi_rd_fab_rvalid
  assign S_AXI_CTRL_rvalid =
	     !axiCtrlSlave_readSlave_isRst_isInReset &&
	     axiCtrlSlave_readSlave_out$EMPTY_N ;

  // value method axi_rd_fab_rdata
  assign S_AXI_CTRL_rdata =
	     axiCtrlSlave_readSlave_out$EMPTY_N ?
	       axiCtrlSlave_readSlave_out$D_OUT[65:2] :
	       64'd0 ;

  // value method axi_rd_fab_rresp
  assign S_AXI_CTRL_rresp =
	     axiCtrlSlave_readSlave_out$EMPTY_N ?
	       axiCtrlSlave_readSlave_out$D_OUT[1:0] :
	       2'd0 ;

  // value method axi_wr_fab_awready
  assign S_AXI_CTRL_awready =
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     !axiCtrlSlave_writeSlave_addrIn_rv[15] ;

  // value method axi_wr_fab_wready
  assign S_AXI_CTRL_wready =
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     !axiCtrlSlave_writeSlave_dataIn_rv[72] ;

  // value method axi_wr_fab_bvalid
  assign S_AXI_CTRL_bvalid =
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     axiCtrlSlave_writeSlave_out$EMPTY_N ;

  // value method axi_wr_fab_bresp
  assign S_AXI_CTRL_bresp =
	     axiCtrlSlave_writeSlave_out$EMPTY_N ?
	       axiCtrlSlave_writeSlave_out$D_OUT :
	       2'd0 ;

  // value method dma_resetn
  assign dma_resetn = !dmaResetActive ;

  // submodule axiCtrlSlave_readSlave_in
  FIFO2 #(.width(32'd15),
	  .guarded(1'd1)) axiCtrlSlave_readSlave_in(.RST(resetn),
						    .CLK(aclk),
						    .D_IN(axiCtrlSlave_readSlave_in$D_IN),
						    .ENQ(axiCtrlSlave_readSlave_in$ENQ),
						    .DEQ(axiCtrlSlave_readSlave_in$DEQ),
						    .CLR(axiCtrlSlave_readSlave_in$CLR),
						    .D_OUT(axiCtrlSlave_readSlave_in$D_OUT),
						    .FULL_N(axiCtrlSlave_readSlave_in$FULL_N),
						    .EMPTY_N(axiCtrlSlave_readSlave_in$EMPTY_N));

  // submodule axiCtrlSlave_readSlave_out
  FIFO2 #(.width(32'd66),
	  .guarded(1'd1)) axiCtrlSlave_readSlave_out(.RST(resetn),
						     .CLK(aclk),
						     .D_IN(axiCtrlSlave_readSlave_out$D_IN),
						     .ENQ(axiCtrlSlave_readSlave_out$ENQ),
						     .DEQ(axiCtrlSlave_readSlave_out$DEQ),
						     .CLR(axiCtrlSlave_readSlave_out$CLR),
						     .D_OUT(axiCtrlSlave_readSlave_out$D_OUT),
						     .FULL_N(axiCtrlSlave_readSlave_out$FULL_N),
						     .EMPTY_N(axiCtrlSlave_readSlave_out$EMPTY_N));

  // submodule axiCtrlSlave_writeSlave_in
  FIFO2 #(.width(32'd87),
	  .guarded(1'd1)) axiCtrlSlave_writeSlave_in(.RST(resetn),
						     .CLK(aclk),
						     .D_IN(axiCtrlSlave_writeSlave_in$D_IN),
						     .ENQ(axiCtrlSlave_writeSlave_in$ENQ),
						     .DEQ(axiCtrlSlave_writeSlave_in$DEQ),
						     .CLR(axiCtrlSlave_writeSlave_in$CLR),
						     .D_OUT(axiCtrlSlave_writeSlave_in$D_OUT),
						     .FULL_N(axiCtrlSlave_writeSlave_in$FULL_N),
						     .EMPTY_N(axiCtrlSlave_writeSlave_in$EMPTY_N));

  // submodule axiCtrlSlave_writeSlave_out
  FIFO2 #(.width(32'd2),
	  .guarded(1'd1)) axiCtrlSlave_writeSlave_out(.RST(resetn),
						      .CLK(aclk),
						      .D_IN(axiCtrlSlave_writeSlave_out$D_IN),
						      .ENQ(axiCtrlSlave_writeSlave_out$ENQ),
						      .DEQ(axiCtrlSlave_writeSlave_out$DEQ),
						      .CLR(axiCtrlSlave_writeSlave_out$CLR),
						      .D_OUT(axiCtrlSlave_writeSlave_out$D_OUT),
						      .FULL_N(axiCtrlSlave_writeSlave_out$FULL_N),
						      .EMPTY_N(axiCtrlSlave_writeSlave_out$EMPTY_N));

  // submodule c2hCmdFifo
  SizedFIFO #(.p1width(32'd160),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) c2hCmdFifo(.RST(resetn),
					 .CLK(aclk),
					 .D_IN(c2hCmdFifo$D_IN),
					 .ENQ(c2hCmdFifo$ENQ),
					 .DEQ(c2hCmdFifo$DEQ),
					 .CLR(c2hCmdFifo$CLR),
					 .D_OUT(c2hCmdFifo$D_OUT),
					 .FULL_N(c2hCmdFifo$FULL_N),
					 .EMPTY_N(c2hCmdFifo$EMPTY_N));

  // submodule c2hDescriptorTransmitter_descriptorFifo
  FIFO2 #(.width(32'd185),
	  .guarded(1'd1)) c2hDescriptorTransmitter_descriptorFifo(.RST(resetn),
								  .CLK(aclk),
								  .D_IN(c2hDescriptorTransmitter_descriptorFifo$D_IN),
								  .ENQ(c2hDescriptorTransmitter_descriptorFifo$ENQ),
								  .DEQ(c2hDescriptorTransmitter_descriptorFifo$DEQ),
								  .CLR(c2hDescriptorTransmitter_descriptorFifo$CLR),
								  .D_OUT(c2hDescriptorTransmitter_descriptorFifo$D_OUT),
								  .FULL_N(c2hDescriptorTransmitter_descriptorFifo$FULL_N),
								  .EMPTY_N(c2hDescriptorTransmitter_descriptorFifo$EMPTY_N));

  // submodule creditReceiver_creditFifo
  FIFO2 #(.width(32'd37),
	  .guarded(1'd1)) creditReceiver_creditFifo(.RST(resetn),
						    .CLK(aclk),
						    .D_IN(creditReceiver_creditFifo$D_IN),
						    .ENQ(creditReceiver_creditFifo$ENQ),
						    .DEQ(creditReceiver_creditFifo$DEQ),
						    .CLR(creditReceiver_creditFifo$CLR),
						    .D_OUT(creditReceiver_creditFifo$D_OUT),
						    .FULL_N(creditReceiver_creditFifo$FULL_N),
						    .EMPTY_N(creditReceiver_creditFifo$EMPTY_N));

  // submodule h2cCmdFifo
  SizedFIFO #(.p1width(32'd160),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) h2cCmdFifo(.RST(resetn),
					 .CLK(aclk),
					 .D_IN(h2cCmdFifo$D_IN),
					 .ENQ(h2cCmdFifo$ENQ),
					 .DEQ(h2cCmdFifo$DEQ),
					 .CLR(h2cCmdFifo$CLR),
					 .D_OUT(h2cCmdFifo$D_OUT),
					 .FULL_N(h2cCmdFifo$FULL_N),
					 .EMPTY_N(h2cCmdFifo$EMPTY_N));

  // submodule h2cDescriptorTransmitter_descriptorFifo
  FIFO2 #(.width(32'd185),
	  .guarded(1'd1)) h2cDescriptorTransmitter_descriptorFifo(.RST(resetn),
								  .CLK(aclk),
								  .D_IN(h2cDescriptorTransmitter_descriptorFifo$D_IN),
								  .ENQ(h2cDescriptorTransmitter_descriptorFifo$ENQ),
								  .DEQ(h2cDescriptorTransmitter_descriptorFifo$DEQ),
								  .CLR(h2cDescriptorTransmitter_descriptorFifo$CLR),
								  .D_OUT(h2cDescriptorTransmitter_descriptorFifo$D_OUT),
								  .FULL_N(h2cDescriptorTransmitter_descriptorFifo$FULL_N),
								  .EMPTY_N(h2cDescriptorTransmitter_descriptorFifo$EMPTY_N));

  // rule RL_dequeueC2HCmd
  assign WILL_FIRE_RL_dequeueC2HCmd =
	     c2hCmdFifo$EMPTY_N && c2hOutstandingReg == 32'd0 ;

  // rule RL_generateC2HDescriptor
  assign WILL_FIRE_RL_generateC2HDescriptor =
	     c2hDescriptorTransmitter_descriptorFifo$FULL_N &&
	     c2hOutstandingReg != 32'd0 ;

  // rule RL_dequeueH2CCmd
  assign WILL_FIRE_RL_dequeueH2CCmd =
	     h2cCmdFifo$EMPTY_N && h2cOutstandingReg == 32'd0 ;

  // rule RL_generateH2CDescriptor
  assign WILL_FIRE_RL_generateH2CDescriptor =
	     h2cDescriptorTransmitter_descriptorFifo$FULL_N &&
	     h2cOutstandingReg != 32'd0 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd0 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_1
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd1 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_2
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd2 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_3
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd3 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_4
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd5 ;

  // rule RL_axiCtrlSlave_axiReadSpecialIsHandled_5
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd32 ;

  // rule RL_axiCtrlSlave_axiReadSpecial
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd0 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_1
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd1 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_2
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd2 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_3
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd3 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_4
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd5 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadSpecial_5
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     axiCtrlSlave_readSlave_in$D_OUT[11:6] == 6'd32 &&
	     !axiCtrlSlave_readBusy ;

  // rule RL_axiCtrlSlave_axiReadFallback
  assign WILL_FIRE_RL_axiCtrlSlave_axiReadFallback =
	     axiCtrlSlave_readSlave_in$EMPTY_N &&
	     axiCtrlSlave_readSlave_out$FULL_N &&
	     !axiCtrlSlave_readIsHandled$whas ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd0 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd0 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd1 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial_1
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd1 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd2 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial_2
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd2 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd4 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial_3
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     c2hCmdFifo$FULL_N &&
	     h2cCmdFifo$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd4 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd32 ;

  // rule RL_axiCtrlSlave_1_axiWriteSpecial_4
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     axiCtrlSlave_writeSlave_in$D_OUT[83:78] == 6'd32 &&
	     !axiCtrlSlave_writeBusy ;

  // rule RL_startReset
  assign WILL_FIRE_RL_startReset =
	     !dmaResetActive && activateDmaResetWire$whas ;

  // rule RL_axiCtrlSlave_1_axiWriteFallback
  assign WILL_FIRE_RL_axiCtrlSlave_1_axiWriteFallback =
	     axiCtrlSlave_writeSlave_in$EMPTY_N &&
	     axiCtrlSlave_writeSlave_out$FULL_N &&
	     !axiCtrlSlave_writeIsHandled$whas &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	     !WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial ;

  // inputs to muxes for submodule ports
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__SEL_5 =
	     WILL_FIRE_RL_axiCtrlSlave_axiReadFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ;
  assign MUX_c2hCurrReadAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     (c2hOutstandingReg[31:16] != 16'd0 || c2hIrqArm) ;
  assign MUX_c2hIrqArm$write_1__SEL_1 =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ;
  assign MUX_dmaResetActive$write_1__SEL_1 =
	     dmaResetActive && resetCount == 8'd128 ;
  assign MUX_h2cCurrReadAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     (h2cOutstandingReg[31:16] != 16'd0 || h2cIrqArm) ;
  assign MUX_h2cIrqArm$write_1__SEL_1 =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     !creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ;
  assign MUX_resetCount$write_1__SEL_1 =
	     dmaResetActive && resetCount != 8'd128 ;
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_1 = { hostAddrReg, 2'd0 } ;
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_2 = { fpgaAddrReg, 2'd0 } ;
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_3 =
	     { transferLenReg, 2'd0 } ;
  assign MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_4 = { v__h7832, 2'd0 } ;
  assign MUX_c2hCurrReadAddr$write_1__VAL_1 = c2hCurrReadAddr + y__h15622 ;
  assign MUX_c2hCurrWriteAddr$write_1__VAL_1 = c2hCurrWriteAddr + y__h15622 ;
  assign MUX_c2hOutstandingReg$write_1__VAL_1 =
	     c2hOutstandingReg - y__h15568 ;
  assign MUX_h2cCurrReadAddr$write_1__VAL_1 = h2cCurrReadAddr + y__h16151 ;
  assign MUX_h2cCurrWriteAddr$write_1__VAL_1 = h2cCurrWriteAddr + y__h16151 ;
  assign MUX_h2cOutstandingReg$write_1__VAL_1 =
	     h2cOutstandingReg - y__h16117 ;
  assign MUX_resetCount$write_1__VAL_1 = resetCount + 8'd1 ;

  // inlined wires
  assign creditReceiver_creditWire$wget =
	     { tm_dsc_sts_byp,
	       tm_dsc_sts_dir,
	       tm_dsc_sts_mm,
	       tm_dsc_sts_qid,
	       tm_dsc_sts_avl,
	       tm_dsc_sts_qinv,
	       tm_dsc_sts_qen,
	       tm_dsc_sts_irq_arm,
	       tm_dsc_sts_error,
	       tm_dsc_sts_port_id } ;
  assign axiCtrlSlave_readIsHandled$whas =
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled ;
  assign axiCtrlSlave_writeIsHandled$whas =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled ;
  assign activateDmaResetWire$whas =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	     axiCtrlSlave_writeSlave_in$D_OUT[3] &&
	     axiCtrlSlave_writeSlave_in$D_OUT[11] ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$EN_port0__write =
	     !axiCtrlSlave_writeSlave_addrIn_rv[15] &&
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     S_AXI_CTRL_awvalid ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_CTRL_awaddr, S_AXI_CTRL_awprot } ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$port1__read =
	     axiCtrlSlave_writeSlave_addrIn_rv$EN_port0__write ?
	       axiCtrlSlave_writeSlave_addrIn_rv$port0__write_1 :
	       axiCtrlSlave_writeSlave_addrIn_rv ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$EN_port1__write =
	     axiCtrlSlave_writeSlave_addrIn_rv$port1__read[15] &&
	     axiCtrlSlave_writeSlave_dataIn_rv$port1__read[72] &&
	     axiCtrlSlave_writeSlave_in$FULL_N ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$port2__read =
	     axiCtrlSlave_writeSlave_addrIn_rv$EN_port1__write ?
	       16'd10922 :
	       axiCtrlSlave_writeSlave_addrIn_rv$port1__read ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$EN_port0__write =
	     !axiCtrlSlave_writeSlave_dataIn_rv[72] &&
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     S_AXI_CTRL_wvalid ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_CTRL_wdata, S_AXI_CTRL_wstrb } ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$port1__read =
	     axiCtrlSlave_writeSlave_dataIn_rv$EN_port0__write ?
	       axiCtrlSlave_writeSlave_dataIn_rv$port0__write_1 :
	       axiCtrlSlave_writeSlave_dataIn_rv ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$EN_port1__write =
	     axiCtrlSlave_writeSlave_addrIn_rv$port1__read[15] &&
	     axiCtrlSlave_writeSlave_dataIn_rv$port1__read[72] &&
	     axiCtrlSlave_writeSlave_in$FULL_N ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$port2__read =
	     axiCtrlSlave_writeSlave_dataIn_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       axiCtrlSlave_writeSlave_dataIn_rv$port1__read ;

  // register axiCtrlSlave_readBusy
  assign axiCtrlSlave_readBusy$D_IN = 1'b0 ;
  assign axiCtrlSlave_readBusy$EN = 1'b0 ;

  // register axiCtrlSlave_readSlave_isRst_isInReset
  assign axiCtrlSlave_readSlave_isRst_isInReset$D_IN = 1'd0 ;
  assign axiCtrlSlave_readSlave_isRst_isInReset$EN =
	     axiCtrlSlave_readSlave_isRst_isInReset ;

  // register axiCtrlSlave_writeBusy
  assign axiCtrlSlave_writeBusy$D_IN = 1'b0 ;
  assign axiCtrlSlave_writeBusy$EN = 1'b0 ;

  // register axiCtrlSlave_writeSlave_addrIn_rv
  assign axiCtrlSlave_writeSlave_addrIn_rv$D_IN =
	     axiCtrlSlave_writeSlave_addrIn_rv$port2__read ;
  assign axiCtrlSlave_writeSlave_addrIn_rv$EN = 1'b1 ;

  // register axiCtrlSlave_writeSlave_dataIn_rv
  assign axiCtrlSlave_writeSlave_dataIn_rv$D_IN =
	     axiCtrlSlave_writeSlave_dataIn_rv$port2__read ;
  assign axiCtrlSlave_writeSlave_dataIn_rv$EN = 1'b1 ;

  // register axiCtrlSlave_writeSlave_isRst_isInReset
  assign axiCtrlSlave_writeSlave_isRst_isInReset$D_IN = 1'd0 ;
  assign axiCtrlSlave_writeSlave_isRst_isInReset$EN =
	     axiCtrlSlave_writeSlave_isRst_isInReset ;

  // register c2hCurrReadAddr
  assign c2hCurrReadAddr$D_IN =
	     MUX_c2hCurrReadAddr$write_1__SEL_1 ?
	       MUX_c2hCurrReadAddr$write_1__VAL_1 :
	       c2hCmdFifo$D_OUT[159:96] ;
  assign c2hCurrReadAddr$EN =
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     (c2hOutstandingReg[31:16] != 16'd0 || c2hIrqArm) ||
	     WILL_FIRE_RL_dequeueC2HCmd ;

  // register c2hCurrWriteAddr
  assign c2hCurrWriteAddr$D_IN =
	     MUX_c2hCurrReadAddr$write_1__SEL_1 ?
	       MUX_c2hCurrWriteAddr$write_1__VAL_1 :
	       c2hCmdFifo$D_OUT[95:32] ;
  assign c2hCurrWriteAddr$EN =
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     (c2hOutstandingReg[31:16] != 16'd0 || c2hIrqArm) ||
	     WILL_FIRE_RL_dequeueC2HCmd ;

  // register c2hIrqArm
  assign c2hIrqArm$D_IN = MUX_c2hIrqArm$write_1__SEL_1 ;
  assign c2hIrqArm$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ||
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     c2hIrqArm &&
	     c2hOutstandingReg[31:16] == 16'd0 ;

  // register c2hOutstandingReg
  assign c2hOutstandingReg$D_IN =
	     MUX_c2hCurrReadAddr$write_1__SEL_1 ?
	       MUX_c2hOutstandingReg$write_1__VAL_1 :
	       c2hCmdFifo$D_OUT[31:0] ;
  assign c2hOutstandingReg$EN =
	     WILL_FIRE_RL_generateC2HDescriptor && c2hQueueEnable &&
	     (c2hOutstandingReg[31:16] != 16'd0 || c2hIrqArm) ||
	     WILL_FIRE_RL_dequeueC2HCmd ;

  // register c2hQueueEnable
  assign c2hQueueEnable$D_IN = creditReceiver_creditFifo$D_OUT[5] ;
  assign c2hQueueEnable$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     creditReceiver_creditFifo$D_OUT[35] ;

  // register dmaResetActive
  assign dmaResetActive$D_IN = !MUX_dmaResetActive$write_1__SEL_1 ;
  assign dmaResetActive$EN =
	     dmaResetActive && resetCount == 8'd128 ||
	     WILL_FIRE_RL_startReset ;

  // register fpgaAddrReg
  assign fpgaAddrReg$D_IN =
	     { axiCtrlSlave_writeSlave_in$D_OUT[10] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[74:67] :
		 fpgaAddrReg[63:56],
	       axiCtrlSlave_writeSlave_in$D_OUT[9] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[66:59] :
		 fpgaAddrReg[55:48],
	       axiCtrlSlave_writeSlave_in$D_OUT[8] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[58:51] :
		 fpgaAddrReg[47:40],
	       axiCtrlSlave_writeSlave_in$D_OUT[7] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[50:43] :
		 fpgaAddrReg[39:32],
	       axiCtrlSlave_writeSlave_in$D_OUT[6] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[42:35] :
		 fpgaAddrReg[31:24],
	       axiCtrlSlave_writeSlave_in$D_OUT[5] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[34:27] :
		 fpgaAddrReg[23:16],
	       axiCtrlSlave_writeSlave_in$D_OUT[4] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[26:19] :
		 fpgaAddrReg[15:8],
	       axiCtrlSlave_writeSlave_in$D_OUT[3] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[18:11] :
		 fpgaAddrReg[7:0] } ;
  assign fpgaAddrReg$EN = WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 ;

  // register h2cCurrReadAddr
  assign h2cCurrReadAddr$D_IN =
	     MUX_h2cCurrReadAddr$write_1__SEL_1 ?
	       MUX_h2cCurrReadAddr$write_1__VAL_1 :
	       h2cCmdFifo$D_OUT[159:96] ;
  assign h2cCurrReadAddr$EN =
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     (h2cOutstandingReg[31:16] != 16'd0 || h2cIrqArm) ||
	     WILL_FIRE_RL_dequeueH2CCmd ;

  // register h2cCurrWriteAddr
  assign h2cCurrWriteAddr$D_IN =
	     MUX_h2cCurrReadAddr$write_1__SEL_1 ?
	       MUX_h2cCurrWriteAddr$write_1__VAL_1 :
	       h2cCmdFifo$D_OUT[95:32] ;
  assign h2cCurrWriteAddr$EN =
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     (h2cOutstandingReg[31:16] != 16'd0 || h2cIrqArm) ||
	     WILL_FIRE_RL_dequeueH2CCmd ;

  // register h2cIrqArm
  assign h2cIrqArm$D_IN = MUX_h2cIrqArm$write_1__SEL_1 ;
  assign h2cIrqArm$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     !creditReceiver_creditFifo$D_OUT[35] &&
	     creditReceiver_creditFifo$D_OUT[4] ||
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     h2cIrqArm &&
	     h2cOutstandingReg[31:16] == 16'd0 ;

  // register h2cOutstandingReg
  assign h2cOutstandingReg$D_IN =
	     MUX_h2cCurrReadAddr$write_1__SEL_1 ?
	       MUX_h2cOutstandingReg$write_1__VAL_1 :
	       h2cCmdFifo$D_OUT[31:0] ;
  assign h2cOutstandingReg$EN =
	     WILL_FIRE_RL_generateH2CDescriptor && h2cQueueEnable &&
	     (h2cOutstandingReg[31:16] != 16'd0 || h2cIrqArm) ||
	     WILL_FIRE_RL_dequeueH2CCmd ;

  // register h2cQueueEnable
  assign h2cQueueEnable$D_IN = creditReceiver_creditFifo$D_OUT[5] ;
  assign h2cQueueEnable$EN =
	     creditReceiver_creditFifo$EMPTY_N &&
	     creditReceiver_creditFifo$D_OUT[33:23] == 11'd0 &&
	     !creditReceiver_creditFifo$D_OUT[35] ;

  // register hostAddrReg
  assign hostAddrReg$D_IN =
	     { axiCtrlSlave_writeSlave_in$D_OUT[10] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[74:67] :
		 hostAddrReg[63:56],
	       axiCtrlSlave_writeSlave_in$D_OUT[9] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[66:59] :
		 hostAddrReg[55:48],
	       axiCtrlSlave_writeSlave_in$D_OUT[8] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[58:51] :
		 hostAddrReg[47:40],
	       axiCtrlSlave_writeSlave_in$D_OUT[7] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[50:43] :
		 hostAddrReg[39:32],
	       axiCtrlSlave_writeSlave_in$D_OUT[6] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[42:35] :
		 hostAddrReg[31:24],
	       axiCtrlSlave_writeSlave_in$D_OUT[5] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[34:27] :
		 hostAddrReg[23:16],
	       axiCtrlSlave_writeSlave_in$D_OUT[4] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[26:19] :
		 hostAddrReg[15:8],
	       axiCtrlSlave_writeSlave_in$D_OUT[3] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[18:11] :
		 hostAddrReg[7:0] } ;
  assign hostAddrReg$EN = WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial ;

  // register resetCount
  assign resetCount$D_IN =
	     MUX_resetCount$write_1__SEL_1 ?
	       MUX_resetCount$write_1__VAL_1 :
	       8'd0 ;
  assign resetCount$EN =
	     dmaResetActive && resetCount != 8'd128 ||
	     WILL_FIRE_RL_startReset ;

  // register transferLenReg
  assign transferLenReg$D_IN =
	     { axiCtrlSlave_writeSlave_in$D_OUT[10] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[74:67] :
		 transferLenReg[63:56],
	       axiCtrlSlave_writeSlave_in$D_OUT[9] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[66:59] :
		 transferLenReg[55:48],
	       axiCtrlSlave_writeSlave_in$D_OUT[8] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[58:51] :
		 transferLenReg[47:40],
	       axiCtrlSlave_writeSlave_in$D_OUT[7] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[50:43] :
		 transferLenReg[39:32],
	       axiCtrlSlave_writeSlave_in$D_OUT[6] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[42:35] :
		 transferLenReg[31:24],
	       axiCtrlSlave_writeSlave_in$D_OUT[5] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[34:27] :
		 transferLenReg[23:16],
	       axiCtrlSlave_writeSlave_in$D_OUT[4] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[26:19] :
		 transferLenReg[15:8],
	       axiCtrlSlave_writeSlave_in$D_OUT[3] ?
		 axiCtrlSlave_writeSlave_in$D_OUT[18:11] :
		 transferLenReg[7:0] } ;
  assign transferLenReg$EN = WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 ;

  // submodule axiCtrlSlave_readSlave_in
  assign axiCtrlSlave_readSlave_in$D_IN =
	     { S_AXI_CTRL_araddr, S_AXI_CTRL_arprot } ;
  assign axiCtrlSlave_readSlave_in$ENQ =
	     axiCtrlSlave_readSlave_in$FULL_N &&
	     !axiCtrlSlave_readSlave_isRst_isInReset &&
	     S_AXI_CTRL_arvalid ;
  assign axiCtrlSlave_readSlave_in$DEQ =
	     WILL_FIRE_RL_axiCtrlSlave_axiReadFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial ;
  assign axiCtrlSlave_readSlave_in$CLR = 1'b0 ;

  // submodule axiCtrlSlave_readSlave_out
  always@(WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_1 or
	  WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_2 or
	  WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_3 or
	  WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_4 or
	  MUX_axiCtrlSlave_readSlave_out$enq_1__SEL_5 or
	  WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial:
	  axiCtrlSlave_readSlave_out$D_IN =
	      MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_1;
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1:
	  axiCtrlSlave_readSlave_out$D_IN =
	      MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_2;
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2:
	  axiCtrlSlave_readSlave_out$D_IN =
	      MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_3;
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5:
	  axiCtrlSlave_readSlave_out$D_IN =
	      MUX_axiCtrlSlave_readSlave_out$enq_1__VAL_4;
      MUX_axiCtrlSlave_readSlave_out$enq_1__SEL_5:
	  axiCtrlSlave_readSlave_out$D_IN = 66'd0;
      WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3:
	  axiCtrlSlave_readSlave_out$D_IN = 66'h00000000379704000;
      default: axiCtrlSlave_readSlave_out$D_IN =
		   66'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign axiCtrlSlave_readSlave_out$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ;
  assign axiCtrlSlave_readSlave_out$DEQ =
	     axiCtrlSlave_readSlave_out$EMPTY_N &&
	     !axiCtrlSlave_readSlave_isRst_isInReset &&
	     S_AXI_CTRL_rready ;
  assign axiCtrlSlave_readSlave_out$CLR = 1'b0 ;

  // submodule axiCtrlSlave_writeSlave_in
  assign axiCtrlSlave_writeSlave_in$D_IN =
	     { axiCtrlSlave_writeSlave_addrIn_rv$port1__read[14:3],
	       axiCtrlSlave_writeSlave_dataIn_rv$port1__read[71:0],
	       axiCtrlSlave_writeSlave_addrIn_rv$port1__read[2:0] } ;
  assign axiCtrlSlave_writeSlave_in$ENQ =
	     axiCtrlSlave_writeSlave_addrIn_rv$port1__read[15] &&
	     axiCtrlSlave_writeSlave_dataIn_rv$port1__read[72] &&
	     axiCtrlSlave_writeSlave_in$FULL_N ;
  assign axiCtrlSlave_writeSlave_in$DEQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial ;
  assign axiCtrlSlave_writeSlave_in$CLR = 1'b0 ;

  // submodule axiCtrlSlave_writeSlave_out
  assign axiCtrlSlave_writeSlave_out$D_IN = 2'd0 ;
  assign axiCtrlSlave_writeSlave_out$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteFallback ||
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial ;
  assign axiCtrlSlave_writeSlave_out$DEQ =
	     axiCtrlSlave_writeSlave_out$EMPTY_N &&
	     !axiCtrlSlave_writeSlave_isRst_isInReset &&
	     S_AXI_CTRL_bready ;
  assign axiCtrlSlave_writeSlave_out$CLR = 1'b0 ;

  // submodule c2hCmdFifo
  assign c2hCmdFifo$D_IN =
	     { fpgaAddrReg, hostAddrReg, transferLenReg[31:0] } ;
  assign c2hCmdFifo$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	     axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF &&
	     axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10001000 ;
  assign c2hCmdFifo$DEQ = WILL_FIRE_RL_dequeueC2HCmd ;
  assign c2hCmdFifo$CLR = 1'b0 ;

  // submodule c2hDescriptorTransmitter_descriptorFifo
  assign c2hDescriptorTransmitter_descriptorFifo$D_IN =
	     { c2hCurrReadAddr,
	       c2hCurrWriteAddr,
	       transferLen__h15335,
	       c2hOutstandingReg[31:16] == 16'd0,
	       40'd0 } ;
  assign c2hDescriptorTransmitter_descriptorFifo$ENQ =
	     MUX_c2hCurrReadAddr$write_1__SEL_1 ;
  assign c2hDescriptorTransmitter_descriptorFifo$DEQ =
	     c2hDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     c2h_byp_in_rdy ;
  assign c2hDescriptorTransmitter_descriptorFifo$CLR = 1'b0 ;

  // submodule creditReceiver_creditFifo
  assign creditReceiver_creditFifo$D_IN = creditReceiver_creditWire$wget ;
  assign creditReceiver_creditFifo$ENQ =
	     creditReceiver_creditFifo$FULL_N && tm_dsc_sts_vld ;
  assign creditReceiver_creditFifo$DEQ = creditReceiver_creditFifo$EMPTY_N ;
  assign creditReceiver_creditFifo$CLR = 1'b0 ;

  // submodule h2cCmdFifo
  assign h2cCmdFifo$D_IN =
	     { hostAddrReg, fpgaAddrReg, transferLenReg[31:0] } ;
  assign h2cCmdFifo$ENQ =
	     WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	     axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF &&
	     axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10000001 ;
  assign h2cCmdFifo$DEQ = WILL_FIRE_RL_dequeueH2CCmd ;
  assign h2cCmdFifo$CLR = 1'b0 ;

  // submodule h2cDescriptorTransmitter_descriptorFifo
  assign h2cDescriptorTransmitter_descriptorFifo$D_IN =
	     { h2cCurrReadAddr,
	       h2cCurrWriteAddr,
	       transferLen__h15905,
	       h2cOutstandingReg[31:16] == 16'd0,
	       40'd0 } ;
  assign h2cDescriptorTransmitter_descriptorFifo$ENQ =
	     MUX_h2cCurrReadAddr$write_1__SEL_1 ;
  assign h2cDescriptorTransmitter_descriptorFifo$DEQ =
	     h2cDescriptorTransmitter_descriptorFifo$EMPTY_N &&
	     h2c_byp_in_rdy ;
  assign h2cDescriptorTransmitter_descriptorFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign transferLen__h15335 =
	     (c2hOutstandingReg[31:16] == 16'd0) ?
	       c2hOutstandingReg[15:0] :
	       16'h8000 ;
  assign transferLen__h15905 =
	     (h2cOutstandingReg[31:16] == 16'd0) ?
	       h2cOutstandingReg[15:0] :
	       16'h8000 ;
  assign v__h7832 = { 63'd0, dmaResetActive } ;
  assign y__h15568 = { 16'd0, transferLen__h15335 } ;
  assign y__h15622 = { 48'd0, transferLen__h15335 } ;
  assign y__h16117 = { 16'd0, transferLen__h15905 } ;
  assign y__h16151 = { 48'd0, transferLen__h15905 } ;

  // handling of inlined registers

  always@(posedge aclk)
  begin
    if (resetn == `BSV_RESET_VALUE)
      begin
        axiCtrlSlave_readBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axiCtrlSlave_writeBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axiCtrlSlave_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY 16'd10922;
	axiCtrlSlave_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	c2hCurrReadAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	c2hCurrWriteAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	c2hIrqArm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	c2hOutstandingReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c2hQueueEnable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dmaResetActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fpgaAddrReg <= `BSV_ASSIGNMENT_DELAY 64'd0;
	h2cCurrReadAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	h2cCurrWriteAddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	h2cIrqArm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h2cOutstandingReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h2cQueueEnable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hostAddrReg <= `BSV_ASSIGNMENT_DELAY 64'd0;
	resetCount <= `BSV_ASSIGNMENT_DELAY 8'd0;
	transferLenReg <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (axiCtrlSlave_readBusy$EN)
	  axiCtrlSlave_readBusy <= `BSV_ASSIGNMENT_DELAY
	      axiCtrlSlave_readBusy$D_IN;
	if (axiCtrlSlave_writeBusy$EN)
	  axiCtrlSlave_writeBusy <= `BSV_ASSIGNMENT_DELAY
	      axiCtrlSlave_writeBusy$D_IN;
	if (axiCtrlSlave_writeSlave_addrIn_rv$EN)
	  axiCtrlSlave_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	      axiCtrlSlave_writeSlave_addrIn_rv$D_IN;
	if (axiCtrlSlave_writeSlave_dataIn_rv$EN)
	  axiCtrlSlave_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	      axiCtrlSlave_writeSlave_dataIn_rv$D_IN;
	if (c2hCurrReadAddr$EN)
	  c2hCurrReadAddr <= `BSV_ASSIGNMENT_DELAY c2hCurrReadAddr$D_IN;
	if (c2hCurrWriteAddr$EN)
	  c2hCurrWriteAddr <= `BSV_ASSIGNMENT_DELAY c2hCurrWriteAddr$D_IN;
	if (c2hIrqArm$EN) c2hIrqArm <= `BSV_ASSIGNMENT_DELAY c2hIrqArm$D_IN;
	if (c2hOutstandingReg$EN)
	  c2hOutstandingReg <= `BSV_ASSIGNMENT_DELAY c2hOutstandingReg$D_IN;
	if (c2hQueueEnable$EN)
	  c2hQueueEnable <= `BSV_ASSIGNMENT_DELAY c2hQueueEnable$D_IN;
	if (dmaResetActive$EN)
	  dmaResetActive <= `BSV_ASSIGNMENT_DELAY dmaResetActive$D_IN;
	if (fpgaAddrReg$EN)
	  fpgaAddrReg <= `BSV_ASSIGNMENT_DELAY fpgaAddrReg$D_IN;
	if (h2cCurrReadAddr$EN)
	  h2cCurrReadAddr <= `BSV_ASSIGNMENT_DELAY h2cCurrReadAddr$D_IN;
	if (h2cCurrWriteAddr$EN)
	  h2cCurrWriteAddr <= `BSV_ASSIGNMENT_DELAY h2cCurrWriteAddr$D_IN;
	if (h2cIrqArm$EN) h2cIrqArm <= `BSV_ASSIGNMENT_DELAY h2cIrqArm$D_IN;
	if (h2cOutstandingReg$EN)
	  h2cOutstandingReg <= `BSV_ASSIGNMENT_DELAY h2cOutstandingReg$D_IN;
	if (h2cQueueEnable$EN)
	  h2cQueueEnable <= `BSV_ASSIGNMENT_DELAY h2cQueueEnable$D_IN;
	if (hostAddrReg$EN)
	  hostAddrReg <= `BSV_ASSIGNMENT_DELAY hostAddrReg$D_IN;
	if (resetCount$EN)
	  resetCount <= `BSV_ASSIGNMENT_DELAY resetCount$D_IN;
	if (transferLenReg$EN)
	  transferLenReg <= `BSV_ASSIGNMENT_DELAY transferLenReg$D_IN;
      end
  end

  always@(posedge aclk or `BSV_RESET_EDGE resetn)
  if (resetn == `BSV_RESET_VALUE)
    begin
      axiCtrlSlave_readSlave_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      axiCtrlSlave_writeSlave_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (axiCtrlSlave_readSlave_isRst_isInReset$EN)
	axiCtrlSlave_readSlave_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    axiCtrlSlave_readSlave_isRst_isInReset$D_IN;
      if (axiCtrlSlave_writeSlave_isRst_isInReset$EN)
	axiCtrlSlave_writeSlave_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    axiCtrlSlave_writeSlave_isRst_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    axiCtrlSlave_readBusy = 1'h0;
    axiCtrlSlave_readSlave_isRst_isInReset = 1'h0;
    axiCtrlSlave_writeBusy = 1'h0;
    axiCtrlSlave_writeSlave_addrIn_rv = 16'hAAAA;
    axiCtrlSlave_writeSlave_dataIn_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    axiCtrlSlave_writeSlave_isRst_isInReset = 1'h0;
    c2hCurrReadAddr = 64'hAAAAAAAAAAAAAAAA;
    c2hCurrWriteAddr = 64'hAAAAAAAAAAAAAAAA;
    c2hIrqArm = 1'h0;
    c2hOutstandingReg = 32'hAAAAAAAA;
    c2hQueueEnable = 1'h0;
    dmaResetActive = 1'h0;
    fpgaAddrReg = 64'hAAAAAAAAAAAAAAAA;
    h2cCurrReadAddr = 64'hAAAAAAAAAAAAAAAA;
    h2cCurrWriteAddr = 64'hAAAAAAAAAAAAAAAA;
    h2cIrqArm = 1'h0;
    h2cOutstandingReg = 32'hAAAAAAAA;
    h2cQueueEnable = 1'h0;
    hostAddrReg = 64'hAAAAAAAAAAAAAAAA;
    resetCount = 8'hAA;
    transferLenReg = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge aclk)
  begin
    #0;
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_axiCtrlSlave_axiReadSpecial_1,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_1] and\n  [RL_axiCtrlSlave_axiReadSpecial_2,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_2, RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3, RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_axiCtrlSlave_axiReadSpecial_2,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_2] and\n  [RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3, RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3] and\n  [RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4] and\n  [RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled) &&
	  (WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5))
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_axiCtrlSlave_axiReadSpecial,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled] and\n  [RL_axiCtrlSlave_axiReadSpecial_1,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_1, RL_axiCtrlSlave_axiReadSpecial_2,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_2, RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3, RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecial_5 ||
	   WILL_FIRE_RL_axiCtrlSlave_axiReadSpecialIsHandled_5) &&
	  WILL_FIRE_RL_axiCtrlSlave_axiReadFallback)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 245, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_axiCtrlSlave_axiReadSpecial,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled, RL_axiCtrlSlave_axiReadSpecial_1,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_1, RL_axiCtrlSlave_axiReadSpecial_2,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_2, RL_axiCtrlSlave_axiReadSpecial_3,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_3, RL_axiCtrlSlave_axiReadSpecial_4,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_4, RL_axiCtrlSlave_axiReadSpecial_5,\n  RL_axiCtrlSlave_axiReadSpecialIsHandled_5] and\n  [RL_axiCtrlSlave_axiReadFallback] ) fired in the same clock cycle.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_1 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_2 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  (axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10000001 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10001000) &&
	  axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods read and\n  write of module instance transferLenReg.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  (axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10000001 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10001000) &&
	  axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods read and\n  write of module instance fpgaAddrReg.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  (axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10000001 ||
	   axiCtrlSlave_writeSlave_in$D_OUT[42:11] == 32'h10001000) &&
	  axiCtrlSlave_writeSlave_in$D_OUT[6:3] == 4'hF)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods read and write\n  of module instance hostAddrReg.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_3 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_3 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_3 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_2 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_1 called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1 &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecialIsHandled called conflicting methods wset\n  and wset of module instance axiCtrlSlave_writeIsHandled.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial &&
	  axiCtrlSlave_writeSlave_in$EMPTY_N)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 345, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecialIsHandled_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_3 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_3 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_3)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_3 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_2)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_2 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods deq and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_1)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial_1 called conflicting methods enq and enq\n  of module instance axiCtrlSlave_writeSlave_out.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods first and deq\n  of module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance axiCtrlSlave_writeSlave_in.\n");
    if (resetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_axiCtrlSlave_1_axiWriteSpecial)
	$display("Error: \"/scratch/tk/Pandas/Tapasco-Hard-IP/QDMADescriptorGenerator/libraries/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 334, column 18: (R0002)\n  Conflict-free rules RL_axiCtrlSlave_1_axiWriteSpecial_4 and\n  RL_axiCtrlSlave_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance axiCtrlSlave_writeSlave_out.\n");
  end
  // synopsys translate_on
endmodule  // mkQDMADescriptorGenerator

