# Copyright (c) 2014-2020 Embedded Systems and Applications, TU Darmstadt.
#
# This file is part of TaPaSCo
# (see https://github.com/esa-tu-darmstadt/tapasco).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#
# check TAPASCO_HOME env var
if {![info exists ::env(TAPASCO_HOME)]} {
  puts "Missing environment variable 'TAPASCO_HOME' - point to TaPaSCo root directory."
  exit 1
}

# set to true to skip final synthesis and bitstream generation
set skip_synth @@SKIP_SYNTH@@

# source base lib
source -notrace "$::env(TAPASCO_HOME_TCL)/common/common.tcl"

# event: pre-header
tapasco::call_plugins "pre-header"

# source common procs
@@HEADER@@

# source architecture-specific Tcl scripts
source -notrace "$env(TAPASCO_HOME_TCL)/arch/common/arch.tcl"
source -notrace @@ARCHITECTURE_TCL@@

# source platform-specific Tcl scripts
source -notrace "$env(TAPASCO_HOME_TCL)/platform/common/platform.tcl"
source -notrace @@PLATFORM_TCL@@

# event: post-init
tapasco::call_plugins "post-init"

# name of the bitstream description file
set bitstreamname @@BITSTREAM_NAME@@

# setup the project
create_project @@PROJECT_NAME@@ [pwd]/@@PROJECT_NAME@@ -part {@@PART@@} -force
if {"@@BOARD_PART@@" != ""} {
  if {"@@BOARD_PART_REPOSITORY@@" != ""} {
    set_property BOARD_PART_REPO_PATHS "@@BOARD_PART_REPOSITORY@@" [current_project]
  }
  set parts [get_board_parts -filter {NAME =~ "@@BOARD_PART@@*"}]
  set part [lindex $parts [expr [llength $parts] - 1]]
  puts "Selected board part $part"
  set_property board_part $part [current_project]
}

# configure message limits:
# suppress messages about no matching pins/ports
set_msg_config -suppress -id {[BD 5-230]}
set_msg_config -suppress -id {[BD 5-232]}
set_msg_config -suppress -id {[BD 5-235]}
# reduce chatter
set_msg_config -suppress -severity INFO
#set_msg_config -suppress -severity STATUS
# ignore AXI Interrupt controller warning about manual edge trigger setting
set_msg_config -suppress -id {[xilinx.com:ip:axi_intc:4.1-7]}

# loadout-specific configuration
@@COMPOSITION@@

# create design
create_bd_design -quiet [platform::get_bd_name]

# enable PE-local memories
tapasco::add_capabilities_flag "PLATFORM_CAP0_PE_LOCAL_MEM"

# enable dynamic address map
tapasco::add_capabilities_flag "PLATFORM_CAP0_DYNAMIC_ADDRESS_MAP"

# event: post-init
tapasco::call_plugins "pre-arch"

# instantiate architecture
arch::create

# event: pre-platform
tapasco::call_plugins "pre-platform"

# instantiate and connect platform
platform::create

# event: pre-wrapper
tapasco::call_plugins "pre-wrapper"

# Save block design before generating the wrapper. Otherwise it will be difficult to debug if anything goes wrong.
save_bd_design

# create wrapper
if {[llength [info commands platform::generate_wrapper]] == 0} {
  # create default wrapper
  make_wrapper -files [get_files [pwd]/@@PROJECT_NAME@@/@@PROJECT_NAME@@.srcs/sources_1/bd/system/system.bd] -top
  add_files -norecurse [pwd]/@@PROJECT_NAME@@/@@PROJECT_NAME@@.srcs/sources_1/bd/system/hdl/system_wrapper.v
  update_compile_order -fileset sources_1
} else {
  # create platform specific wrapper
  platform::generate_wrapper
}

tapasco::call_plugins "post-wrapper"

# skip platform generation if flag was provided
if {$skip_synth} {
	exit
}

# activate retiming in synthesis
set_property STEPS.SYNTH_DESIGN.ARGS.RETIMING true [get_runs synth_1]
if {[info exists platform::ooc_synth_mode] == 0 || [string is false $platform::ooc_synth_mode]} {
  set_property synth_checkpoint_mode None [get_files "[platform::get_bd_name].bd"]
}

# Synthesis and P&R effort level
set effort_level "@@EFFORT_LEVEL@@"

# generate according to the mode
platform::generate

# exit successfully
exit
