#!/usr/bin/python3
#
# Copyright (c) 2014-2020 Embedded Systems and Applications, TU Darmstadt.
#
# This file is part of TaPaSCo
# (see https://github.com/esa-tu-darmstadt/tapasco).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import os
import sys
import subprocess
from socket import gethostname
from pathlib import Path


def running_on_ec2():
    hyp_test = Path("/sys/hypervisor/uuid")
    if hyp_test.is_file():
        with hyp_test.open() as f:
            uuid = f.read()
            if uuid.startswith('ec2'):
                return True
    return False


parser = argparse.ArgumentParser()
parser.add_argument('bitstream', help='.bit file to load')
parser.add_argument(
    '--reload-driver',
    help='reload driver, if loaded (default: %(default)s)',
    action='store_true')
parser.add_argument(
    '--no-load-driver',
    help='do not load driver (default: %(default)s)',
    action='store_true')
parser.add_argument(
    '--verbose',
    help='verbose output (default: %(default)s)',
    action='store_true')
parser.add_argument(
    '--mode',
    help='select the operation to be performed (default: %(default)s)',
    default='normal',
    choices=[
        'normal',
        'program',
         'hotplug'])
parser.add_argument(
    '--adapter',
    help='select programming adapter (PCIe only)',
    action='store')
parser.add_argument(
    '--list-adapter',
    help='list available programming adapters (PCIe only)',
    action='store_true')
args = parser.parse_args()

if 'TAPASCO_HOME_RUNTIME' not in os.environ:
    sys.exit('ERROR: Environment variable TAPASCO_HOME_RUNTIME not set. Please source tapasco-setup.sh first or use -E flag to preserve pervious users environment if using sudo.')

if 'TAPASCO_PLATFORM' not in os.environ:
    print('Environment variable TAPASCO_PLATFORM is not set, guessing Platform ...')
    if gethostname() in [
        'zed',
        'zedboard',
        'zc706',
        'zynq',
        'pynq',
        'zcu102',
            'ultra96v2']:
        os.environ['TAPASCO_PLATFORM'] = 'zynq'
    elif running_on_ec2():
        os.environ['TAPASCO_PLATFORM'] = 'f1'
    else:
        os.environ['TAPASCO_PLATFORM'] = 'pcie'

if os.environ['TAPASCO_PLATFORM'] != 'f1' and not os.path.exists(
        args.bitstream):
    sys.exit('ERROR: {} could not be opened'.format(args.bitstream))

if args.verbose:
    print('Bitstream: {}'.format(args.bitstream))
    print('Reload Driver: {}'.format(str(args.reload_driver)))
    print('Platform: {}'.format(os.environ['TAPASCO_PLATFORM']))

if 'TAPASCO_HOME_RUNTIME' not in os.environ:
    os.environ['TAPASCO_HOME_RUNTIME'] = "{}/../".format(os.getcwd())

reld = '-d' if args.reload_driver else ''
nold = '-n' if args.no_load_driver else ''
verb = '-v' if args.verbose else ''
program = '-p' if args.mode == 'normal' or args.mode == 'program' else ''
hotplug = '-h' if args.mode == 'normal' or args.mode == 'hotplug' else ''
adapter = "-a {}".format(args.adapter) if args.adapter and len(args.adapter) > 0 else ''
listadapter = '-l' if args.list_adapter else ''

cmd = '$TAPASCO_HOME_RUNTIME/scripts/$TAPASCO_PLATFORM/bit_reload.sh {0} {1} {2} {3} {4} {5} {6} {7}'.format(
    verb, reld, nold, hotplug, program, adapter, listadapter, args.bitstream)
subprocess.call([cmd], shell=True)
