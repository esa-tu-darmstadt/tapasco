#!/usr/bin/python3
#
# Copyright (c) 2014-2023 Embedded Systems and Applications, TU Darmstadt.
#
# This file is part of TaPaSCo
# (see https://github.com/esa-tu-darmstadt/tapasco).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import sys
import subprocess
from socket import gethostname
import os
import signal
from os import path

default_cmd = 'mkdir -p {0} && cd {0} && cmake {1} {2} && make -j $(nproc) install DESTDIR={0}/install'
tlkm_cmd = 'mkdir -p {0} && cd {0} && cp -a {1} ./tlkm && cd ./tlkm && make -j $(nproc) {2} {3} {4}'

parser = argparse.ArgumentParser()
parser.add_argument(
    '--mode',
    help='build mode (default: %(default)s)',
    default='release',
    choices=[
        'clean',
        'release',
        'debug',
         'driver_debug'])
parser.add_argument(
    '--rebuild',
    help='force rebuild libs (default: %(default)s)',
    action='store_true')
parser.add_argument(
    '--rebuild_simlibs',
    help='force recompilation of questa simulation libraries (default: %(default)s)',
    action='store_true')
parser.add_argument(
    '--shared',
    help='build shared library instead of static',
    action='store_true')
parser.add_argument(
    '--package',
    help='build installation packages',
    action='store_true')
parser.add_argument(
    '--skip_driver',
    help='do not build the driver',
    action='store_true')
parser.add_argument(
    '--skip_runtime',
    help='do not build the tapasco runtime',
    action='store_true')
parser.add_argument(
    '--target',
    help='cross compile for other target (clang, zynq)',
    default='',
    choices=[
        '',
        'clang',
         'zynq'])
parser.add_argument(
    '--enable_svm',
    help='enable driver support for Shared Virtual Memory (SVM)',
    action='store_true')
sim_group = parser.add_mutually_exclusive_group()
sim_group.add_argument(
    '-s',
    dest='enable_sim',
    help='Enable simulation support in the driver and setup the tapasco simulation. Equivalent to --enable_sim=full',
    action='store_const',
    const='full',
)
sim_group.add_argument(
    '--enable_sim',
    help='Enable simulation support in the driver and setup the tapasco simulation. Selecting full will both setup simulator and runtime. Selecting runtime will only compile the runtime with simulation support and skip setup of the simulation installation.',
    choices=[
        'full',
        'runtime',
    ],
    action='store'
)
args = parser.parse_args()

clean = args.mode == 'clean'
debug = args.mode == 'debug' or args.mode == 'driver_debug'
driver_debug = args.mode == 'driver_debug'
debug_flags = '-DCMAKE_BUILD_TYPE=Debug' if debug else '-DCMAKE_BUILD_TYPE=Release'
build_folder = 'build' if args.target == '' else 'build-' + args.target

crosscompile_flags = ''
if args.target == 'zynq':
    print('Build target: ' + args.target)
    crosscompile_flags = '-DCMAKE_TOOLCHAIN_FILE=%s/cmake/zynq_cross_toolchain.cmake' % os.environ[
        'TAPASCO_HOME_RUNTIME']
if args.target == 'clang':
    print('Build target: ' + args.target)
    crosscompile_flags = '-DCMAKE_TOOLCHAIN_FILE=%s/cmake/clang_toolchain.cmake' % os.environ[
        'TAPASCO_HOME_RUNTIME']

shared_flags = '-DBUILD_SHARED_LIBS:BOOL={}'.format(
    'ON' if args.shared else 'OFF')

print('Build mode: {}'.format(args.mode))

mdir = '{}/kernel'.format(os.environ['TAPASCO_HOME_RUNTIME'])
bdir = '{}/{}'.format(os.environ['TAPASCO_WORK_DIR'], build_folder)
sdir = '{}/simulation'.format(os.environ['TAPASCO_WORK_DIR'])

if clean or args.rebuild:
    subprocess.call(['rm -rf %s' % bdir], shell=True)
    subprocess.call(['cd %s && make clean' % mdir], shell=True)
    if os.path.isdir(sdir):
        subprocess.call(['make -C %s clean' % sdir], shell=True)

if not clean:
    if debug:
        print('Building debug mode libraries...')
    else:
        print('Building release mode libraries...')

    if 'LINUX_HOME' in os.environ:
        subprocess.call(['make -C ' +
                         os.environ['LINUX_HOME'] +
                         ' scripts'], shell=True)

    if not args.skip_driver:
        ret = subprocess.call(
            [tlkm_cmd.format(bdir, mdir, '' if driver_debug else 'release', 'EN_SVM=1' if args.enable_svm else '', 'ENABLE_SIM=y' if args.enable_sim == 'full' or args.enable_sim == 'runtime' else '')], shell=True)
        if ret:
            print('Driver build failed!')
            sys.exit(ret)
    if not args.skip_runtime:
        cmd = default_cmd.format(bdir,
                                 " ".join([crosscompile_flags,
                                           debug_flags,
                                           shared_flags]),
                                 os.environ['TAPASCO_HOME_RUNTIME'])
        ret = subprocess.call([cmd], shell=True)
        if ret:
            print('Tapasco build failed!')
            sys.exit(ret)

    if args.enable_sim == 'full':
        # enable_sim == 'full' means that the simlibs should be compiled
        if not path.exists("%s/.setup_lock" % sdir):
            # use lock file to prevent the execution of the script twice on the same directory. The file is removed after the setup finished successfully

            compile_simlibs = None

            # to run the makefile target for the simlib compilation, a child process needs to be created
            # if the main process receives an interrupt, the child process needs to be terminated as well, hence the signal handler
            def interrupt_handler(sig, frame):
                global compile_simlibs
                subprocess.call(["rm %s/.setup_lock" % sdir], shell=True)
                if compile_simlibs is not None and compile_simlibs.returncode is None:
                    grp = os.getpgid(compile_simlibs.pid)
                    os.killpg(grp, signal.SIGTERM)

                print('')
                sys.exit(0)

            # creates a simulation directory inside the workspace
            subprocess.call(["cp -r {0}/simulation {1}".format(os.environ['TAPASCO_HOME_RUNTIME'], os.environ['TAPASCO_WORK_DIR'])], shell=True)
            # creates the lock file
            subprocess.call(["touch %s/.setup_lock" % sdir], shell=True)

            build_simlibs = not path.exists('%s/compile_simlib' % sdir) or args.rebuild_simlibs

            # installing python dependencies
            source_cmd =  ""
            if path.exists("%s/.venv" % sdir):
                source_cmd = "source .venv/bin/activate;"
            ret_config = subprocess.call(['bash -c "%s make configure"' % source_cmd], cwd=sdir, shell=True)
            # generating protocol buffer definitions and patching relative imports
            ret_protos = subprocess.call(['bash -c "source .venv/bin/activate; make protos"'], cwd=sdir, shell=True)

            build_simlibs = not path.exists('%s/compile_simlib' % sdir) or args.rebuild_simlibs
            if build_simlibs:
                # store previous signal handler
                original_sigint_handler = signal.getsignal(signal.SIGINT)
                signal.signal(signal.SIGINT, interrupt_handler)
                compile_simlibs = subprocess.Popen(['bash', '-c', 'source .venv/bin/activate; make simlib_questa'],
                                                stdin=subprocess.DEVNULL,
                                                stdout=subprocess.PIPE,
                                                cwd=sdir)
            else:
                print('\033[93m' + 'Folder with simulation libraries already exists, assuming Libraries are already built. To force a build use --rebuild_simlibs' + '\033[0m')

            ret_simlibs = False

            if build_simlibs:
                for line in compile_simlibs.stdout:
                    print(line.decode('utf-8'), end='')
                ret_simlibs = compile_simlibs.wait()
                signal.signal(signal.SIGINT, original_sigint_handler)

            subprocess.call(["rm %s/.setup_lock" % sdir], shell=True)
            if ret_config or ret_protos or ret_simlibs:
                # checking exit codes of subprocesses
                print('Simulation setup failed')
                sys.exit(1)

            print('Simulation setup done')

        elif path.exists("%s/.setup_lock" % sdir):
            print('\033[93m' + 'Lock file %s/.setup_lock exists. Another setup might be ongoing. If not, remove the file and try again.' % sdir + '\033[0m')

    if args.package:
        ret = subprocess.call(
            "cd {0} && make -j package".format(bdir),
            shell=True)
        if ret:
            print('Tapasco packaging failed!')
            sys.exit(ret)

