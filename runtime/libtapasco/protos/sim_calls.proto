syntax = "proto3";

import "status_core.proto";

package tapasco.simcalls;

service SimRequest {
  rpc register_interrupt (RegisterInterrupt) returns (SimResponse);
  rpc deregister_interrupt (DeregisterInterrupt) returns (SimResponse);
  rpc get_interrupt_status (InterruptStatusRequest) returns (SimResponse);
  rpc get_status (Void) returns (SimResponse);
  rpc start_pe (StartPE) returns (SimResponse);
  rpc set_arg (SetArg) returns (SimResponse);
  rpc write (Write) returns (SimResponse);
  rpc read (Read) returns (SimResponse);
  rpc get_return (GetReturn) returns (SimResponse);
}

message SetArg {
  uint32 peid = 1;
  uint64 argn = 2;
  oneof arg {
    uint32 u_32 = 3;
    uint64 u_64 = 4;
  }
}

message ReadArg {
  uint32 peid = 1;
  uint64 argn = 2;
  uint64 bytes = 3;
}

message ReadArgResp {
  oneof value {
    uint32 u_32 = 1;
    uint64 u_64 = 2;
  }
}

message GetReturn {
  uint64 peid = 1;
}

message GetReturnResponse {
  uint64 value = 1;
}

// read and write commands correspond only to offchip memory!!
message Write {
  uint64 addr = 1;
  oneof values {
    uint32 u_32 = 2;
    uint64 u_64 = 3;
  }
}

message Read {
  uint64 addr = 1;
}

message ReadResponse {
  uint64 value = 1;
}

message StartPE {
  uint64 id = 1;
}

message InterruptStatusRequest {
  int32 fd = 1;
}

message InterruptStatus {
  uint64 interrupts = 1;
}

message RegisterInterrupt {
  int32 fd = 1;
  int32 interrupt_id = 2;
}

message DeregisterInterrupt {
  int32 fd = 1;
}

enum SimResponseType {
  Okay = 0;
  Error = 1;
}

message SimResponse {
  SimResponseType type = 1;
  oneof response_payload {
    Void void = 2;
    RegisterInterrupt register_interrupt = 3;
    InterruptStatus interrupt_status = 4;
    tapasco.status.Status status = 5;
    string error_reason = 6;
    ReadResponse read_response = 7;
    GetReturnResponse get_return_response = 8;
  }
}

message Void {}
